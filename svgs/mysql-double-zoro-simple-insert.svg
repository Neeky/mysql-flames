<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#f8f8f8" offset="5%" />
		<stop stop-color="#e8e8e8" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="934.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >mysql-double-zoro-simple-insert</text>
<text id="details" x="10.00" y="917" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="917" > </text>
<g id="frames">
<g >
<title>entry_SYSCALL_64_after_hwframe (5 samples, 1.25%)</title><rect x="104.6" y="837" width="14.8" height="15.0" fill="rgb(70,184,184)" rx="2" ry="2" />
<text  x="107.64" y="847.5" ></text>
</g>
<g >
<title>SSL_write (47 samples, 11.78%)</title><rect x="344.2" y="677" width="139.0" height="15.0" fill="rgb(106,217,217)" rx="2" ry="2" />
<text  x="347.19" y="687.5" >SSL_write</text>
</g>
<g >
<title>HUF_compress4X_repeat (12 samples, 3.01%)</title><rect x="956.4" y="549" width="35.5" height="15.0" fill="rgb(78,191,191)" rx="2" ry="2" />
<text  x="959.37" y="559.5" >HUF..</text>
</g>
<g >
<title>irqentry_exit_to_user_mode (1 samples, 0.25%)</title><rect x="882.4" y="501" width="3.0" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="885.43" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (23 samples, 5.76%)</title><rect x="21.8" y="821" width="68.0" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="24.83" y="831.5" >entry_S..</text>
</g>
<g >
<title>Fil_shard::redo_space_flush() (2 samples, 0.50%)</title><rect x="187.4" y="773" width="6.0" height="15.0" fill="rgb(95,207,207)" rx="2" ry="2" />
<text  x="190.44" y="783.5" ></text>
</g>
<g >
<title>exit_to_user_mode_loop (1 samples, 0.25%)</title><rect x="341.2" y="677" width="3.0" height="15.0" fill="rgb(77,189,189)" rx="2" ry="2" />
<text  x="344.23" y="687.5" ></text>
</g>
<g >
<title>rec_init_offsets_comp_ordinary(unsigned char const*, bool, dict_index_t const*, unsigned long*) (2 samples, 0.50%)</title><rect x="654.7" y="533" width="5.9" height="15.0" fill="rgb(91,203,203)" rx="2" ry="2" />
<text  x="657.71" y="543.5" ></text>
</g>
<g >
<title>__fget_light (1 samples, 0.25%)</title><rect x="202.2" y="661" width="3.0" height="15.0" fill="rgb(69,182,182)" rx="2" ry="2" />
<text  x="205.23" y="671.5" ></text>
</g>
<g >
<title>__memcpy_sse2_unaligned (1 samples, 0.25%)</title><rect x="477.3" y="565" width="2.9" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="480.27" y="575.5" ></text>
</g>
<g >
<title>IO_CACHE_ostream::write(unsigned char const*, unsigned long long) (1 samples, 0.25%)</title><rect x="906.1" y="597" width="2.9" height="15.0" fill="rgb(101,212,212)" rx="2" ry="2" />
<text  x="909.09" y="607.5" ></text>
</g>
<g >
<title>__kfree_skb (1 samples, 0.25%)</title><rect x="444.7" y="69" width="3.0" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="447.74" y="79.5" ></text>
</g>
<g >
<title>__bio_iov_iter_get_pages (1 samples, 0.25%)</title><rect x="83.9" y="645" width="3.0" height="15.0" fill="rgb(106,217,217)" rx="2" ry="2" />
<text  x="86.93" y="655.5" ></text>
</g>
<g >
<title>io_submit_one (22 samples, 5.51%)</title><rect x="24.8" y="773" width="65.0" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="27.79" y="783.5" >io_subm..</text>
</g>
<g >
<title>Clone_persist_gtid::periodic_write() (1 samples, 0.25%)</title><rect x="181.5" y="821" width="3.0" height="15.0" fill="rgb(100,210,210)" rx="2" ry="2" />
<text  x="184.53" y="831.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (11 samples, 2.76%)</title><rect x="131.3" y="613" width="32.5" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="134.25" y="623.5" >en..</text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.25%)</title><rect x="217.0" y="501" width="3.0" height="15.0" fill="rgb(101,212,212)" rx="2" ry="2" />
<text  x="220.02" y="511.5" ></text>
</g>
<g >
<title>tcp_clean_rtx_queue.constprop.0 (1 samples, 0.25%)</title><rect x="450.7" y="69" width="2.9" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="453.65" y="79.5" ></text>
</g>
<g >
<title>vfs_write (7 samples, 1.75%)</title><rect x="796.7" y="549" width="20.7" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="799.67" y="559.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::commit(THD*, bool) (2 samples, 0.50%)</title><rect x="1086.5" y="709" width="5.9" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="1089.49" y="719.5" ></text>
</g>
<g >
<title>blk_finish_plug (19 samples, 4.76%)</title><rect x="27.7" y="693" width="56.2" height="15.0" fill="rgb(53,167,167)" rx="2" ry="2" />
<text  x="30.74" y="703.5" >blk_f..</text>
</g>
<g >
<title>trx_purge_truncate_rseg_history(trx_rseg_t*, purge_iter_t const*) (1 samples, 0.25%)</title><rect x="175.6" y="773" width="3.0" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="178.61" y="783.5" ></text>
</g>
<g >
<title>ha_innobase::write_row(unsigned char*) (33 samples, 8.27%)</title><rect x="637.0" y="677" width="97.6" height="15.0" fill="rgb(92,203,203)" rx="2" ry="2" />
<text  x="639.97" y="687.5" >ha_innobase..</text>
</g>
<g >
<title>trx_undo_report_row_operation(unsigned long, unsigned long, que_thr_t*, dict_index_t*, dtuple_t const*, upd_t const*, unsigned long, unsigned char const*, unsigned long const*, unsigned long*) (4 samples, 1.00%)</title><rect x="666.5" y="581" width="11.9" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="669.54" y="591.5" ></text>
</g>
<g >
<title>__xfrm_policy_check2.constprop.0 (1 samples, 0.25%)</title><rect x="391.5" y="117" width="3.0" height="15.0" fill="rgb(82,195,195)" rx="2" ry="2" />
<text  x="394.50" y="127.5" ></text>
</g>
<g >
<title>THD::send_statement_status() (48 samples, 12.03%)</title><rect x="341.2" y="773" width="142.0" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="344.23" y="783.5" >THD::send_statemen..</text>
</g>
<g >
<title>TABLE::bind_value_generators_to_fields() (1 samples, 0.25%)</title><rect x="554.2" y="661" width="2.9" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="557.16" y="671.5" ></text>
</g>
<g >
<title>selinux_file_permission (1 samples, 0.25%)</title><rect x="471.4" y="437" width="2.9" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="474.35" y="447.5" ></text>
</g>
<g >
<title>binlog_cache_data::finalize(THD*, Log_event*) (41 samples, 10.28%)</title><rect x="932.7" y="693" width="121.3" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="935.71" y="703.5" >binlog_cache_da..</text>
</g>
<g >
<title>pthread_rwlock_unlock@@GLIBC_2.34 (1 samples, 0.25%)</title><rect x="897.2" y="661" width="3.0" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="900.22" y="671.5" ></text>
</g>
<g >
<title>IO_CACHE_ostream::flush() (8 samples, 2.01%)</title><rect x="793.7" y="661" width="23.7" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="796.71" y="671.5" >I..</text>
</g>
<g >
<title>Double_write::write_to_datafile(buf_page_t const*, bool, file::Block const*) (3 samples, 0.75%)</title><rect x="163.8" y="693" width="8.9" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="166.78" y="703.5" ></text>
</g>
<g >
<title>__virt_addr_valid (1 samples, 0.25%)</title><rect x="462.5" y="341" width="2.9" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="465.48" y="351.5" ></text>
</g>
<g >
<title>fill_record(THD*, TABLE*, mem_root_deque&lt;Item*&gt; const&amp;, mem_root_deque&lt;Item*&gt; const&amp;, MY_BITMAP*, MY_BITMAP*, bool) (4 samples, 1.00%)</title><rect x="566.0" y="693" width="11.8" height="15.0" fill="rgb(81,194,194)" rx="2" ry="2" />
<text  x="568.99" y="703.5" ></text>
</g>
<g >
<title>pvclock_clocksource_read (1 samples, 0.25%)</title><rect x="160.8" y="357" width="3.0" height="15.0" fill="rgb(96,208,208)" rx="2" ry="2" />
<text  x="163.83" y="367.5" ></text>
</g>
<g >
<title>ZSTD_flushStream (20 samples, 5.01%)</title><rect x="932.7" y="645" width="59.2" height="15.0" fill="rgb(106,217,217)" rx="2" ry="2" />
<text  x="935.71" y="655.5" >ZSTD_f..</text>
</g>
<g >
<title>Write_rows_log_event::binlog_row_logging_function(THD*, TABLE*, bool, unsigned char const*, unsigned char const*) (3 samples, 0.75%)</title><rect x="622.2" y="661" width="8.9" height="15.0" fill="rgb(67,181,181)" rx="2" ry="2" />
<text  x="625.18" y="671.5" ></text>
</g>
<g >
<title>flst_add_first(unsigned char*, unsigned char*, mtr_t*) (1 samples, 0.25%)</title><rect x="867.6" y="517" width="3.0" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="870.64" y="527.5" ></text>
</g>
<g >
<title>ZSTD_compressContinue_internal (20 samples, 5.01%)</title><rect x="932.7" y="597" width="59.2" height="15.0" fill="rgb(102,212,212)" rx="2" ry="2" />
<text  x="935.71" y="607.5" >ZSTD_c..</text>
</g>
<g >
<title>ppoll (10 samples, 2.51%)</title><rect x="302.8" y="677" width="29.6" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="305.78" y="687.5" >pp..</text>
</g>
<g >
<title>page_cur_insert_rec_low(unsigned char*, dict_index_t*, unsigned char const*, unsigned long*, mtr_t*) (1 samples, 0.25%)</title><rect x="678.4" y="565" width="2.9" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="681.37" y="575.5" ></text>
</g>
<g >
<title>binary_log::Query_event::Query_event(char const*, char const*, char const*, unsigned int, unsigned long, unsigned long long, unsigned long, unsigned long, unsigned int, unsigned long long, int) (1 samples, 0.25%)</title><rect x="607.4" y="629" width="3.0" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="610.39" y="639.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::process_commit_stage_queue(THD*, THD*) (26 samples, 6.52%)</title><rect x="823.3" y="677" width="76.9" height="15.0" fill="rgb(82,194,194)" rx="2" ry="2" />
<text  x="826.28" y="687.5" >MYSQL_BI..</text>
</g>
<g >
<title>mlog_write_ulint(unsigned char*, unsigned long, mlog_id_t, mtr_t*) (1 samples, 0.25%)</title><rect x="1056.9" y="645" width="3.0" height="15.0" fill="rgb(56,171,171)" rx="2" ry="2" />
<text  x="1059.92" y="655.5" ></text>
</g>
<g >
<title>generic_write_end (2 samples, 0.50%)</title><rect x="808.5" y="485" width="5.9" height="15.0" fill="rgb(79,191,191)" rx="2" ry="2" />
<text  x="811.50" y="495.5" ></text>
</g>
<g >
<title>Lex_input_stream::add_digest_token(unsigned int, Lexer_yystype*) (1 samples, 0.25%)</title><rect x="1151.6" y="693" width="2.9" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="1154.55" y="703.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt; &gt;::_M_run() (19 samples, 4.76%)</title><rect x="125.3" y="837" width="56.2" height="15.0" fill="rgb(92,204,204)" rx="2" ry="2" />
<text  x="128.34" y="847.5" >std::..</text>
</g>
<g >
<title>syscall_exit_to_user_mode (1 samples, 0.25%)</title><rect x="719.8" y="597" width="2.9" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="722.77" y="607.5" ></text>
</g>
<g >
<title>os_file_write_page(IORequest&amp;, char const*, int, unsigned char const*, unsigned long, unsigned long, file::Block const*) (8 samples, 2.01%)</title><rect x="202.2" y="741" width="23.7" height="15.0" fill="rgb(54,168,168)" rx="2" ry="2" />
<text  x="205.23" y="751.5" >o..</text>
</g>
<g >
<title>__x64_sys_io_getevents (1 samples, 0.25%)</title><rect x="21.8" y="789" width="3.0" height="15.0" fill="rgb(101,211,211)" rx="2" ry="2" />
<text  x="24.83" y="799.5" ></text>
</g>
<g >
<title>pfs_rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.25%)</title><rect x="876.5" y="533" width="3.0" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="879.52" y="543.5" ></text>
</g>
<g >
<title>aio_write (22 samples, 5.51%)</title><rect x="24.8" y="757" width="65.0" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="27.79" y="767.5" >aio_write</text>
</g>
<g >
<title>new_sync_write (11 samples, 2.76%)</title><rect x="131.3" y="549" width="32.5" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="134.25" y="559.5" >ne..</text>
</g>
<g >
<title>ut_delay(unsigned long) (1 samples, 0.25%)</title><rect x="876.5" y="517" width="3.0" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="879.52" y="527.5" ></text>
</g>
<g >
<title>blk_mq_submit_bio (1 samples, 0.25%)</title><rect x="86.9" y="645" width="2.9" height="15.0" fill="rgb(92,204,204)" rx="2" ry="2" />
<text  x="89.89" y="655.5" ></text>
</g>
<g >
<title>new_sync_write (32 samples, 8.02%)</title><rect x="376.7" y="453" width="94.7" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="379.72" y="463.5" >new_sync_wr..</text>
</g>
<g >
<title>xid_t::get_my_xid() const (1 samples, 0.25%)</title><rect x="1095.4" y="709" width="2.9" height="15.0" fill="rgb(103,214,214)" rx="2" ry="2" />
<text  x="1098.36" y="719.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::process_after_commit_stage_queue(THD*, THD*) (2 samples, 0.50%)</title><rect x="817.4" y="677" width="5.9" height="15.0" fill="rgb(82,194,194)" rx="2" ry="2" />
<text  x="820.37" y="687.5" ></text>
</g>
<g >
<title>syscall (1 samples, 0.25%)</title><rect x="719.8" y="645" width="2.9" height="15.0" fill="rgb(79,191,191)" rx="2" ry="2" />
<text  x="722.77" y="655.5" ></text>
</g>
<g >
<title>Replicated_columns_view::Replicated_columns_view(TABLE const*, Replicated_columns_view::enum_replication_flow, THD const*) (1 samples, 0.25%)</title><rect x="625.1" y="629" width="3.0" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="628.14" y="639.5" ></text>
</g>
<g >
<title>HIST_countFast_wksp (1 samples, 0.25%)</title><rect x="950.5" y="549" width="2.9" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="953.45" y="559.5" ></text>
</g>
<g >
<title>skb_do_copy_data_nocache (2 samples, 0.50%)</title><rect x="462.5" y="373" width="5.9" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="465.48" y="383.5" ></text>
</g>
<g >
<title>vio_io_wait(Vio*, enum_vio_io_event, int) (1 samples, 0.25%)</title><rect x="332.4" y="677" width="2.9" height="15.0" fill="rgb(78,190,190)" rx="2" ry="2" />
<text  x="335.36" y="687.5" ></text>
</g>
<g >
<title>mark_buffer_dirty (2 samples, 0.50%)</title><rect x="808.5" y="453" width="5.9" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="811.50" y="463.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (3 samples, 0.75%)</title><rect x="376.7" y="293" width="8.9" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="379.72" y="303.5" ></text>
</g>
<g >
<title>__audit_syscall_exit (1 samples, 0.25%)</title><rect x="285.0" y="453" width="3.0" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="288.04" y="463.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (2 samples, 0.50%)</title><rect x="217.0" y="597" width="5.9" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="220.02" y="607.5" ></text>
</g>
<g >
<title>exit_to_user_mode_loop (1 samples, 0.25%)</title><rect x="882.4" y="469" width="3.0" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="885.43" y="479.5" ></text>
</g>
<g >
<title>close_thread_tables(THD*) (3 samples, 0.75%)</title><rect x="752.3" y="741" width="8.9" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="755.31" y="751.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.25%)</title><rect x="846.9" y="549" width="3.0" height="15.0" fill="rgb(80,193,193)" rx="2" ry="2" />
<text  x="849.94" y="559.5" ></text>
</g>
<g >
<title>vio_ssl_read(Vio*, unsigned char*, unsigned long) (27 samples, 6.77%)</title><rect x="255.5" y="709" width="79.8" height="15.0" fill="rgb(56,170,170)" rx="2" ry="2" />
<text  x="258.46" y="719.5" >vio_ssl_r..</text>
</g>
<g >
<title>mtr_t::Command::add_dirty_blocks_to_flush_list(unsigned long, unsigned long) (2 samples, 0.50%)</title><rect x="838.1" y="533" width="5.9" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="841.07" y="543.5" ></text>
</g>
<g >
<title>buf_flush_page_and_try_neighbors(buf_page_t*, buf_flush_t, unsigned long, unsigned long*) (16 samples, 4.01%)</title><rect x="125.3" y="773" width="47.4" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="128.34" y="783.5" >buf_..</text>
</g>
<g >
<title>vio_ssl_write(Vio*, unsigned char const*, unsigned long) (47 samples, 11.78%)</title><rect x="344.2" y="693" width="139.0" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="347.19" y="703.5" >vio_ssl_write(Vio..</text>
</g>
<g >
<title>binlog_cache_data::write_event(Log_event*) (2 samples, 0.50%)</title><rect x="610.4" y="629" width="5.9" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="613.35" y="639.5" ></text>
</g>
<g >
<title>submit_bio_wait (1 samples, 0.25%)</title><rect x="237.7" y="613" width="3.0" height="15.0" fill="rgb(82,194,194)" rx="2" ry="2" />
<text  x="240.72" y="623.5" ></text>
</g>
<g >
<title>ZSTD_buildCTable (1 samples, 0.25%)</title><rect x="953.4" y="549" width="3.0" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="956.41" y="559.5" ></text>
</g>
<g >
<title>__blk_mq_run_hw_queue (2 samples, 0.50%)</title><rect x="187.4" y="533" width="6.0" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="190.44" y="543.5" ></text>
</g>
<g >
<title>thd_ha_data (1 samples, 0.25%)</title><rect x="1054.0" y="693" width="2.9" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="1056.96" y="703.5" ></text>
</g>
<g >
<title>create_empty_buffers (1 samples, 0.25%)</title><rect x="217.0" y="549" width="3.0" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="220.02" y="559.5" ></text>
</g>
<g >
<title>futex_wake (4 samples, 1.00%)</title><rect x="89.8" y="773" width="11.9" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="92.85" y="783.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.25%)</title><rect x="876.5" y="565" width="3.0" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="879.52" y="575.5" ></text>
</g>
<g >
<title>ha_innobase::update_thd(THD*) (1 samples, 0.25%)</title><rect x="755.3" y="677" width="2.9" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="758.26" y="687.5" ></text>
</g>
<g >
<title>blk_mq_get_request (1 samples, 0.25%)</title><rect x="86.9" y="629" width="2.9" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="89.89" y="639.5" ></text>
</g>
<g >
<title>btr_cur_search_to_nth_level(dict_index_t*, unsigned long, dtuple_t const*, page_cur_mode_t, unsigned long, btr_cur_t*, unsigned long, char const*, unsigned long, mtr_t*) (10 samples, 2.51%)</title><rect x="681.3" y="597" width="29.6" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="684.33" y="607.5" >bt..</text>
</g>
<g >
<title>sp_cache_enforce_limit(sp_cache*, unsigned long) (1 samples, 0.25%)</title><rect x="1184.1" y="773" width="2.9" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="1187.09" y="783.5" ></text>
</g>
<g >
<title>ut_delay(unsigned long) (2 samples, 0.50%)</title><rect x="669.5" y="501" width="5.9" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="672.50" y="511.5" ></text>
</g>
<g >
<title>io_schedule (1 samples, 0.25%)</title><rect x="799.6" y="293" width="3.0" height="15.0" fill="rgb(90,201,201)" rx="2" ry="2" />
<text  x="802.62" y="303.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (1 samples, 0.25%)</title><rect x="116.5" y="789" width="2.9" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="119.47" y="799.5" ></text>
</g>
<g >
<title>ha_flush_logs(bool) (1 samples, 0.25%)</title><rect x="900.2" y="645" width="2.9" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="903.18" y="655.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.25%)</title><rect x="832.2" y="565" width="2.9" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="835.16" y="575.5" ></text>
</g>
<g >
<title>blk_mq_dispatch_rq_list (9 samples, 2.26%)</title><rect x="131.3" y="341" width="26.6" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="134.25" y="351.5" >b..</text>
</g>
<g >
<title>hardware::crc32_using_pclmul(unsigned char const*, unsigned long) (1 samples, 0.25%)</title><rect x="225.9" y="789" width="2.9" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="228.89" y="799.5" ></text>
</g>
<g >
<title>BIO_read (9 samples, 2.26%)</title><rect x="264.3" y="581" width="26.7" height="15.0" fill="rgb(92,203,203)" rx="2" ry="2" />
<text  x="267.34" y="591.5" >B..</text>
</g>
<g >
<title>Field_varstring::real_type() const (1 samples, 0.25%)</title><rect x="589.6" y="613" width="3.0" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="592.65" y="623.5" ></text>
</g>
<g >
<title>ZSTD_safecopyLiterals (1 samples, 0.25%)</title><rect x="947.5" y="549" width="3.0" height="15.0" fill="rgb(79,192,192)" rx="2" ry="2" />
<text  x="950.49" y="559.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::commit(THD*, bool) (1 samples, 0.25%)</title><rect x="500.9" y="741" width="3.0" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="503.93" y="751.5" ></text>
</g>
<g >
<title>validate_xmit_skb (1 samples, 0.25%)</title><rect x="382.6" y="277" width="3.0" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="385.63" y="287.5" ></text>
</g>
<g >
<title>wbt_wait (1 samples, 0.25%)</title><rect x="237.7" y="533" width="3.0" height="15.0" fill="rgb(93,205,205)" rx="2" ry="2" />
<text  x="240.72" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.25%)</title><rect x="237.7" y="693" width="3.0" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="240.72" y="703.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.25%)</title><rect x="681.3" y="549" width="3.0" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="684.33" y="559.5" ></text>
</g>
<g >
<title>generic_update_time (3 samples, 0.75%)</title><rect x="796.7" y="485" width="8.8" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="799.67" y="495.5" ></text>
</g>
<g >
<title>fill_record_n_invoke_before_triggers(THD*, COPY_INFO*, mem_root_deque&lt;Item*&gt; const&amp;, mem_root_deque&lt;Item*&gt; const&amp;, TABLE*, enum_trigger_event_type, int, bool, bool*) (4 samples, 1.00%)</title><rect x="566.0" y="709" width="11.8" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="568.99" y="719.5" ></text>
</g>
<g >
<title>EVP_CIPHER_CTX_iv_length (1 samples, 0.25%)</title><rect x="293.9" y="581" width="3.0" height="15.0" fill="rgb(91,202,202)" rx="2" ry="2" />
<text  x="296.91" y="591.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;Replicated_columns_view::Replicated_columns_view(TABLE const*, Replicated_columns_view::enum_replication_flow, THD const*)::{lambda(TABLE const*, unsigned long)#1}&gt;::_M_manager(std::_Any_data&amp;, std::_Any_data const&amp;, std::_Manager_operation) (1 samples, 0.25%)</title><rect x="619.2" y="645" width="3.0" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="622.22" y="655.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (1 samples, 0.25%)</title><rect x="341.2" y="709" width="3.0" height="15.0" fill="rgb(67,181,181)" rx="2" ry="2" />
<text  x="344.23" y="719.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core.constprop.0 (1 samples, 0.25%)</title><rect x="388.5" y="181" width="3.0" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="391.55" y="191.5" ></text>
</g>
<g >
<title>srv_suspend_thread(srv_slot_t*) (1 samples, 0.25%)</title><rect x="178.6" y="805" width="2.9" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="181.57" y="815.5" ></text>
</g>
<g >
<title>ZSTD_compressStream2 (17 samples, 4.26%)</title><rect x="1000.7" y="613" width="50.3" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="1003.73" y="623.5" >ZSTD_..</text>
</g>
<g >
<title>tcp_v4_rcv (22 samples, 5.51%)</title><rect x="391.5" y="149" width="65.1" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="394.50" y="159.5" >tcp_v4_..</text>
</g>
<g >
<title>row_insert_for_mysql_using_ins_graph(unsigned char const*, row_prebuilt_t*) (33 samples, 8.27%)</title><rect x="637.0" y="661" width="97.6" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="639.97" y="671.5" >row_insert_..</text>
</g>
<g >
<title>void ut_list_prepend&lt;ut_list_base&lt;trx_undo_t, trx_undo_t_undo_list_node_getter&gt; &gt;(ut_list_base&lt;trx_undo_t, trx_undo_t_undo_list_node_getter&gt;&amp;, ut_list_base&lt;trx_undo_t, trx_undo_t_undo_list_node_getter&gt;::elem_type*) (1 samples, 0.25%)</title><rect x="870.6" y="565" width="3.0" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="873.60" y="575.5" ></text>
</g>
<g >
<title>unroll_tree_refs (1 samples, 0.25%)</title><rect x="474.3" y="437" width="3.0" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="477.31" y="447.5" ></text>
</g>
<g >
<title>Protocol_classic::read_packet() (28 samples, 7.02%)</title><rect x="252.5" y="773" width="82.8" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="255.51" y="783.5" >Protocol_..</text>
</g>
<g >
<title>__ip_queue_xmit (27 samples, 6.77%)</title><rect x="376.7" y="325" width="79.9" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="379.72" y="335.5" >__ip_queu..</text>
</g>
<g >
<title>blk_mq_rq_ctx_init.constprop.0.isra.0 (1 samples, 0.25%)</title><rect x="86.9" y="597" width="2.9" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="89.89" y="607.5" ></text>
</g>
<g >
<title>__GI_fsync (1 samples, 0.25%)</title><rect x="237.7" y="709" width="3.0" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="240.72" y="719.5" ></text>
</g>
<g >
<title>submit_bio_noacct (1 samples, 0.25%)</title><rect x="160.8" y="453" width="3.0" height="15.0" fill="rgb(92,204,204)" rx="2" ry="2" />
<text  x="163.83" y="463.5" ></text>
</g>
<g >
<title>trx_commit_for_mysql(trx_t*) (23 samples, 5.76%)</title><rect x="829.2" y="613" width="68.0" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="832.20" y="623.5" >trx_com..</text>
</g>
<g >
<title>THD::binlog_write_row(TABLE*, bool, unsigned char const*, unsigned char const*) (3 samples, 0.75%)</title><rect x="622.2" y="645" width="8.9" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="625.18" y="655.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (1 samples, 0.25%)</title><rect x="477.3" y="533" width="2.9" height="15.0" fill="rgb(57,172,172)" rx="2" ry="2" />
<text  x="480.27" y="543.5" ></text>
</g>
<g >
<title>binlog_cache_data::flush(THD*, unsigned long long*, bool*) (4 samples, 1.00%)</title><rect x="903.1" y="645" width="11.9" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="906.13" y="655.5" ></text>
</g>
<g >
<title>copy_user_generic_string (1 samples, 0.25%)</title><rect x="302.8" y="581" width="2.9" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="305.78" y="591.5" ></text>
</g>
<g >
<title>blk_mq_dispatch_rq_list (19 samples, 4.76%)</title><rect x="27.7" y="549" width="56.2" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="30.74" y="559.5" >blk_m..</text>
</g>
<g >
<title>Security_context::check_access(unsigned long, std::string const&amp;, bool) (1 samples, 0.25%)</title><rect x="530.5" y="677" width="3.0" height="15.0" fill="rgb(70,184,184)" rx="2" ry="2" />
<text  x="533.50" y="687.5" ></text>
</g>
<g >
<title>MDL_context::acquire_lock(MDL_request*, unsigned long) (1 samples, 0.25%)</title><rect x="551.2" y="661" width="3.0" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="554.20" y="671.5" ></text>
</g>
<g >
<title>file_write_and_wait_range (2 samples, 0.50%)</title><rect x="187.4" y="677" width="6.0" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="190.44" y="687.5" ></text>
</g>
<g >
<title>Gtid_log_event::write_data_body(Basic_ostream*) (1 samples, 0.25%)</title><rect x="906.1" y="613" width="2.9" height="15.0" fill="rgb(79,191,191)" rx="2" ry="2" />
<text  x="909.09" y="623.5" ></text>
</g>
<g >
<title>ssl3_write_pending (37 samples, 9.27%)</title><rect x="367.8" y="597" width="109.5" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="370.84" y="607.5" >ssl3_write_pe..</text>
</g>
<g >
<title>__GI___pthread_self (1 samples, 0.25%)</title><rect x="882.4" y="533" width="3.0" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="885.43" y="543.5" ></text>
</g>
<g >
<title>iowrite16 (9 samples, 2.26%)</title><rect x="131.3" y="277" width="26.6" height="15.0" fill="rgb(107,218,218)" rx="2" ry="2" />
<text  x="134.25" y="287.5" >i..</text>
</g>
<g >
<title>register_binlog_handler(THD*, bool) (1 samples, 0.25%)</title><rect x="616.3" y="629" width="2.9" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="619.27" y="639.5" ></text>
</g>
<g >
<title>Fil_shard::do_io(IORequest const&amp;, bool, page_id_t const&amp;, page_size_t const&amp;, unsigned long, unsigned long, void*, void*) (1 samples, 0.25%)</title><rect x="169.7" y="661" width="3.0" height="15.0" fill="rgb(80,193,193)" rx="2" ry="2" />
<text  x="172.70" y="671.5" ></text>
</g>
<g >
<title>SSL_want (1 samples, 0.25%)</title><rect x="299.8" y="677" width="3.0" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="302.82" y="687.5" ></text>
</g>
<g >
<title>security_file_permission (2 samples, 0.50%)</title><rect x="279.1" y="453" width="5.9" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="282.12" y="463.5" ></text>
</g>
<g >
<title>ktime_get (1 samples, 0.25%)</title><rect x="276.2" y="341" width="2.9" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="279.17" y="351.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (6 samples, 1.50%)</title><rect x="205.2" y="629" width="17.7" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="208.19" y="639.5" ></text>
</g>
<g >
<title>fsnotify (1 samples, 0.25%)</title><rect x="279.1" y="437" width="3.0" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="282.12" y="447.5" ></text>
</g>
<g >
<title>ZSTD_resetCCtx_internal (16 samples, 4.01%)</title><rect x="1003.7" y="565" width="47.3" height="15.0" fill="rgb(80,193,193)" rx="2" ry="2" />
<text  x="1006.68" y="575.5" >ZSTD..</text>
</g>
<g >
<title>btr_page_split_and_insert(unsigned int, btr_cur_t*, unsigned long**, mem_block_info_t**, dtuple_t const*, mtr_t*) (1 samples, 0.25%)</title><rect x="678.4" y="581" width="2.9" height="15.0" fill="rgb(101,212,212)" rx="2" ry="2" />
<text  x="681.37" y="591.5" ></text>
</g>
<g >
<title>ZSTD_buildSequencesStatistics (2 samples, 0.50%)</title><rect x="950.5" y="565" width="5.9" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="953.45" y="575.5" ></text>
</g>
<g >
<title>buf_flush_do_batch(buf_pool_t*, buf_flush_t, unsigned long, unsigned long, unsigned long*) (16 samples, 4.01%)</title><rect x="125.3" y="789" width="47.4" height="15.0" fill="rgb(64,177,177)" rx="2" ry="2" />
<text  x="128.34" y="799.5" >buf_..</text>
</g>
<g >
<title>iomap_apply (1 samples, 0.25%)</title><rect x="160.8" y="485" width="3.0" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="163.83" y="495.5" ></text>
</g>
<g >
<title>binlog_cache_data::compress(THD*) (41 samples, 10.28%)</title><rect x="932.7" y="677" width="121.3" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="935.71" y="687.5" >binlog_cache_da..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.25%)</title><rect x="104.6" y="741" width="3.0" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="107.64" y="751.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (16 samples, 4.01%)</title><rect x="397.4" y="69" width="47.3" height="15.0" fill="rgb(103,213,213)" rx="2" ry="2" />
<text  x="400.42" y="79.5" >_raw..</text>
</g>
<g >
<title>__schedule (2 samples, 0.50%)</title><rect x="314.6" y="549" width="5.9" height="15.0" fill="rgb(68,181,181)" rx="2" ry="2" />
<text  x="317.61" y="559.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.25%)</title><rect x="27.7" y="501" width="3.0" height="15.0" fill="rgb(71,185,185)" rx="2" ry="2" />
<text  x="30.74" y="511.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.25%)</title><rect x="879.5" y="533" width="2.9" height="15.0" fill="rgb(101,212,212)" rx="2" ry="2" />
<text  x="882.47" y="543.5" ></text>
</g>
<g >
<title>trx_undo_set_state_at_prepare(trx_t*, trx_undo_t*, bool, mtr_t*) (4 samples, 1.00%)</title><rect x="1059.9" y="645" width="11.8" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="1062.87" y="655.5" ></text>
</g>
<g >
<title>virtio_queue_rq (19 samples, 4.76%)</title><rect x="27.7" y="533" width="56.2" height="15.0" fill="rgb(64,178,178)" rx="2" ry="2" />
<text  x="30.74" y="543.5" >virti..</text>
</g>
<g >
<title>ssl3_read_n (10 samples, 2.51%)</title><rect x="261.4" y="597" width="29.6" height="15.0" fill="rgb(64,178,178)" rx="2" ry="2" />
<text  x="264.38" y="607.5" >ss..</text>
</g>
<g >
<title>blk_mq_rq_ctx_init.constprop.0.isra.0 (1 samples, 0.25%)</title><rect x="86.9" y="613" width="2.9" height="15.0" fill="rgb(69,182,182)" rx="2" ry="2" />
<text  x="89.89" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, trx_t*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, trx_t*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, Trx_by_id_with_min::Trx_track_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, trx_t*&gt;, true&gt;*, unsigned long) (1 samples, 0.25%)</title><rect x="722.7" y="629" width="3.0" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="725.73" y="639.5" ></text>
</g>
<g >
<title>__audit_syscall_exit (1 samples, 0.25%)</title><rect x="719.8" y="565" width="2.9" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="722.77" y="575.5" ></text>
</g>
<g >
<title>io_handler_thread(unsigned long) (5 samples, 1.25%)</title><rect x="231.8" y="821" width="14.8" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="234.80" y="831.5" ></text>
</g>
<g >
<title>exit_to_user_mode_loop (1 samples, 0.25%)</title><rect x="252.5" y="645" width="3.0" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="255.51" y="655.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now() (1 samples, 0.25%)</title><rect x="228.8" y="821" width="3.0" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="231.85" y="831.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::fetch_and_process_flush_stage_queue(bool) (1 samples, 0.25%)</title><rect x="900.2" y="661" width="2.9" height="15.0" fill="rgb(53,167,167)" rx="2" ry="2" />
<text  x="903.18" y="671.5" ></text>
</g>
<g >
<title>LinuxAIOHandler::find_completed_slot(unsigned long*) (2 samples, 0.50%)</title><rect x="240.7" y="757" width="5.9" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="243.68" y="767.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (1 samples, 0.25%)</title><rect x="211.1" y="453" width="3.0" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="214.10" y="463.5" ></text>
</g>
<g >
<title>sock_def_readable (17 samples, 4.26%)</title><rect x="394.5" y="101" width="50.2" height="15.0" fill="rgb(105,216,216)" rx="2" ry="2" />
<text  x="397.46" y="111.5" >sock_..</text>
</g>
<g >
<title>lock_trx_release_locks(trx_t*) (2 samples, 0.50%)</title><rect x="849.9" y="549" width="5.9" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="852.90" y="559.5" ></text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (1 samples, 0.25%)</title><rect x="24.8" y="677" width="2.9" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="27.79" y="687.5" ></text>
</g>
<g >
<title>rec_get_offsets_func(unsigned char const*, dict_index_t const*, unsigned long*, unsigned long, mem_block_info_t**) (2 samples, 0.50%)</title><rect x="705.0" y="565" width="5.9" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="707.99" y="575.5" ></text>
</g>
<g >
<title>mark_wake_futex (1 samples, 0.25%)</title><rect x="89.8" y="741" width="3.0" height="15.0" fill="rgb(82,195,195)" rx="2" ry="2" />
<text  x="92.85" y="751.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (2 samples, 0.50%)</title><rect x="669.5" y="549" width="5.9" height="15.0" fill="rgb(102,212,212)" rx="2" ry="2" />
<text  x="672.50" y="559.5" ></text>
</g>
<g >
<title>HUF_writeCTable_wksp (4 samples, 1.00%)</title><rect x="980.0" y="517" width="11.9" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="983.03" y="527.5" ></text>
</g>
<g >
<title>mtr_t::commit() (1 samples, 0.25%)</title><rect x="710.9" y="597" width="3.0" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="713.90" y="607.5" ></text>
</g>
<g >
<title>MYSQLparse(THD*, Parse_tree_root**) (24 samples, 6.02%)</title><rect x="1113.1" y="725" width="71.0" height="15.0" fill="rgb(80,192,192)" rx="2" ry="2" />
<text  x="1116.11" y="735.5" >MYSQLpar..</text>
</g>
<g >
<title>sock_read_iter (3 samples, 0.75%)</title><rect x="270.3" y="437" width="8.8" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="273.25" y="447.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::ordered_commit(THD*, bool, bool) (48 samples, 12.03%)</title><rect x="784.8" y="693" width="142.0" height="15.0" fill="rgb(82,194,194)" rx="2" ry="2" />
<text  x="787.84" y="703.5" >MYSQL_BIN_LOG::ord..</text>
</g>
<g >
<title>PT_insert_values_list::contextualize(Parse_context*) (2 samples, 0.50%)</title><rect x="1104.2" y="693" width="6.0" height="15.0" fill="rgb(67,180,180)" rx="2" ry="2" />
<text  x="1107.24" y="703.5" ></text>
</g>
<g >
<title>trx_undo_gtid_add_update_undo(trx_t*, bool, bool) (8 samples, 2.01%)</title><rect x="873.6" y="597" width="23.6" height="15.0" fill="rgb(77,189,189)" rx="2" ry="2" />
<text  x="876.56" y="607.5" >t..</text>
</g>
<g >
<title>Fil_shard::do_redo_io(IORequest const&amp;, page_id_t const&amp;, page_size_t const&amp;, unsigned long, unsigned long, void*) (9 samples, 2.26%)</title><rect x="199.3" y="773" width="26.6" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="202.27" y="783.5" >F..</text>
</g>
<g >
<title>all (399 samples, 100%)</title><rect x="10.0" y="885" width="1180.0" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="13.00" y="895.5" ></text>
</g>
<g >
<title>iov_iter_fault_in_readable (1 samples, 0.25%)</title><rect x="814.4" y="485" width="3.0" height="15.0" fill="rgb(70,184,184)" rx="2" ry="2" />
<text  x="817.41" y="495.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (17 samples, 4.26%)</title><rect x="394.5" y="85" width="50.2" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="397.46" y="95.5" >__wak..</text>
</g>
<g >
<title>do_syscall_64 (4 samples, 1.00%)</title><rect x="89.8" y="821" width="11.9" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="92.85" y="831.5" ></text>
</g>
<g >
<title>sock_sendmsg (32 samples, 8.02%)</title><rect x="376.7" y="421" width="94.7" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="379.72" y="431.5" >sock_sendmsg</text>
</g>
<g >
<title>TABLE::cleanup_value_generator_items() (1 samples, 0.25%)</title><rect x="752.3" y="725" width="3.0" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="755.31" y="735.5" ></text>
</g>
<g >
<title>__write (35 samples, 8.77%)</title><rect x="373.8" y="533" width="103.5" height="15.0" fill="rgb(56,170,170)" rx="2" ry="2" />
<text  x="376.76" y="543.5" >__write</text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, long&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, long&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, long&gt; &gt; &gt;::_M_erase(std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, long&gt; &gt;*) (1 samples, 0.25%)</title><rect x="912.0" y="549" width="3.0" height="15.0" fill="rgb(78,190,190)" rx="2" ry="2" />
<text  x="915.01" y="559.5" ></text>
</g>
<g >
<title>THD::binlog_write_table_map(TABLE*, bool, bool) (14 samples, 3.51%)</title><rect x="580.8" y="661" width="41.4" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="583.78" y="671.5" >THD..</text>
</g>
<g >
<title>ha_innobase::store_lock(THD*, THR_LOCK_DATA**, thr_lock_type) (1 samples, 0.25%)</title><rect x="743.4" y="677" width="3.0" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="746.43" y="687.5" ></text>
</g>
<g >
<title>bio_write_intern (36 samples, 9.02%)</title><rect x="370.8" y="565" width="106.5" height="15.0" fill="rgb(66,179,179)" rx="2" ry="2" />
<text  x="373.80" y="575.5" >bio_write_int..</text>
</g>
<g >
<title>trx_undo_assign_undo(trx_t*, trx_undo_ptr_t*, unsigned long) (7 samples, 1.75%)</title><rect x="873.6" y="581" width="20.7" height="15.0" fill="rgb(78,190,190)" rx="2" ry="2" />
<text  x="876.56" y="591.5" ></text>
</g>
<g >
<title>Table_columns_view&lt;std::function&lt;bool (TABLE const*, unsigned long)&gt; &gt;::init_fields_bitmaps() (1 samples, 0.25%)</title><rect x="625.1" y="597" width="3.0" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="628.14" y="607.5" ></text>
</g>
<g >
<title>__skb_datagram_iter (1 samples, 0.25%)</title><rect x="273.2" y="341" width="3.0" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="276.21" y="351.5" ></text>
</g>
<g >
<title>__iomap_dio_rw (11 samples, 2.76%)</title><rect x="131.3" y="501" width="32.5" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="134.25" y="511.5" >__..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.25%)</title><rect x="808.5" y="421" width="3.0" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="811.50" y="431.5" ></text>
</g>
<g >
<title>digest_add_token(sql_digest_state*, unsigned int, Lexer_yystype*) (1 samples, 0.25%)</title><rect x="1178.2" y="645" width="2.9" height="15.0" fill="rgb(78,190,190)" rx="2" ry="2" />
<text  x="1181.17" y="655.5" ></text>
</g>
<g >
<title>MDL_context::release_lock(enum_mdl_duration, MDL_ticket*) (1 samples, 0.25%)</title><rect x="498.0" y="725" width="2.9" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="500.97" y="735.5" ></text>
</g>
<g >
<title>open_temporary_tables(THD*, TABLE_LIST*) (1 samples, 0.25%)</title><rect x="770.1" y="741" width="2.9" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="773.05" y="751.5" ></text>
</g>
<g >
<title>ext4_inode_csum (1 samples, 0.25%)</title><rect x="211.1" y="469" width="3.0" height="15.0" fill="rgb(78,191,191)" rx="2" ry="2" />
<text  x="214.10" y="479.5" ></text>
</g>
<g >
<title>generic_update_time (3 samples, 0.75%)</title><rect x="208.1" y="597" width="8.9" height="15.0" fill="rgb(103,214,214)" rx="2" ry="2" />
<text  x="211.15" y="607.5" ></text>
</g>
<g >
<title>trx_purge(unsigned long, unsigned long, bool) (2 samples, 0.50%)</title><rect x="172.7" y="805" width="5.9" height="15.0" fill="rgb(54,168,168)" rx="2" ry="2" />
<text  x="175.66" y="815.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, long&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, long&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, long&gt; &gt; &gt;::_M_erase(std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, long&gt; &gt;*) (1 samples, 0.25%)</title><rect x="912.0" y="453" width="3.0" height="15.0" fill="rgb(101,212,212)" rx="2" ry="2" />
<text  x="915.01" y="463.5" ></text>
</g>
<g >
<title>LEX::make_sql_cmd(Parse_tree_root*) (3 samples, 0.75%)</title><rect x="1104.2" y="725" width="8.9" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="1107.24" y="735.5" ></text>
</g>
<g >
<title>vfs_write (33 samples, 8.27%)</title><rect x="376.7" y="469" width="97.6" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="379.72" y="479.5" >vfs_write</text>
</g>
<g >
<title>Trans_delegate::trans_begin(THD*, int&amp;) (2 samples, 0.50%)</title><rect x="764.1" y="725" width="6.0" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="767.14" y="735.5" ></text>
</g>
<g >
<title>bool stream_copy&lt;IO_CACHE_binlog_cache_storage, Basic_ostream&gt;(IO_CACHE_binlog_cache_storage*, Basic_ostream*, bool*) (20 samples, 5.01%)</title><rect x="994.8" y="661" width="59.2" height="15.0" fill="rgb(67,181,181)" rx="2" ry="2" />
<text  x="997.81" y="671.5" >bool s..</text>
</g>
<g >
<title>blk_flush_plug (19 samples, 4.76%)</title><rect x="27.7" y="677" width="56.2" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="30.74" y="687.5" >blk_f..</text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.25%)</title><rect x="681.3" y="581" width="3.0" height="15.0" fill="rgb(68,182,182)" rx="2" ry="2" />
<text  x="684.33" y="591.5" ></text>
</g>
<g >
<title>vp_notify (18 samples, 4.51%)</title><rect x="30.7" y="501" width="53.2" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="33.70" y="511.5" >vp_no..</text>
</g>
<g >
<title>iomap_dio_bio_actor (2 samples, 0.50%)</title><rect x="83.9" y="677" width="5.9" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="86.93" y="687.5" ></text>
</g>
<g >
<title>Protocol_classic::get_command(COM_DATA*, enum_server_command*) (29 samples, 7.27%)</title><rect x="249.5" y="789" width="85.8" height="15.0" fill="rgb(68,182,182)" rx="2" ry="2" />
<text  x="252.55" y="799.5" >Protocol_c..</text>
</g>
<g >
<title>diff(Bigint*, Bigint*, Stack_alloc*) (1 samples, 0.25%)</title><rect x="571.9" y="613" width="3.0" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="574.90" y="623.5" ></text>
</g>
<g >
<title>do_syscall_64 (23 samples, 5.76%)</title><rect x="21.8" y="805" width="68.0" height="15.0" fill="rgb(102,213,213)" rx="2" ry="2" />
<text  x="24.83" y="815.5" >do_sysc..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::check_state(buf_block_t*&amp;) (1 samples, 0.25%)</title><rect x="1059.9" y="613" width="2.9" height="15.0" fill="rgb(54,169,169)" rx="2" ry="2" />
<text  x="1062.87" y="623.5" ></text>
</g>
<g >
<title>__blk_mq_do_dispatch_sched (19 samples, 4.76%)</title><rect x="27.7" y="565" width="56.2" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="30.74" y="575.5" >__blk..</text>
</g>
<g >
<title>digest_add_token(sql_digest_state*, unsigned int, Lexer_yystype*) (1 samples, 0.25%)</title><rect x="1154.5" y="693" width="3.0" height="15.0" fill="rgb(94,206,206)" rx="2" ry="2" />
<text  x="1157.51" y="703.5" ></text>
</g>
<g >
<title>crc32c_pcl_intel_update (1 samples, 0.25%)</title><rect x="211.1" y="437" width="3.0" height="15.0" fill="rgb(57,172,172)" rx="2" ry="2" />
<text  x="214.10" y="447.5" ></text>
</g>
<g >
<title>cmp_dtuple_rec_with_match_low(dtuple_t const*, unsigned char const*, dict_index_t const*, unsigned long const*, unsigned long, unsigned long*) (3 samples, 0.75%)</title><rect x="693.2" y="565" width="8.8" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="696.16" y="575.5" ></text>
</g>
<g >
<title>launch_hook_trans_begin(THD*, TABLE_LIST*) (2 samples, 0.50%)</title><rect x="764.1" y="741" width="6.0" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="767.14" y="751.5" ></text>
</g>
<g >
<title>ha_commit_trans(THD*, bool, bool) (103 samples, 25.81%)</title><rect x="773.0" y="725" width="304.6" height="15.0" fill="rgb(106,217,217)" rx="2" ry="2" />
<text  x="776.01" y="735.5" >ha_commit_trans(THD*, bool, bool)</text>
</g>
<g >
<title>__filemap_fdatawrite_range (2 samples, 0.50%)</title><rect x="187.4" y="661" width="6.0" height="15.0" fill="rgb(101,212,212)" rx="2" ry="2" />
<text  x="190.44" y="671.5" ></text>
</g>
<g >
<title>mysql_encryption_file_write(IO_CACHE*, unsigned char const*, unsigned long, int) (8 samples, 2.01%)</title><rect x="793.7" y="629" width="23.7" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="796.71" y="639.5" >m..</text>
</g>
<g >
<title>trx_commit(trx_t*) (14 samples, 3.51%)</title><rect x="832.2" y="597" width="41.4" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="835.16" y="607.5" >trx..</text>
</g>
<g >
<title>blk_mq_sched_dispatch_requests (2 samples, 0.50%)</title><rect x="187.4" y="517" width="6.0" height="15.0" fill="rgb(66,179,179)" rx="2" ry="2" />
<text  x="190.44" y="527.5" ></text>
</g>
<g >
<title>mtr_t::Command::execute() (2 samples, 0.50%)</title><rect x="882.4" y="549" width="5.9" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="885.43" y="559.5" ></text>
</g>
<g >
<title>Double_write::check_page_lsn(unsigned char const*) (1 samples, 0.25%)</title><rect x="166.7" y="661" width="3.0" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="169.74" y="671.5" ></text>
</g>
<g >
<title>ZSTD_compressContinue (20 samples, 5.01%)</title><rect x="932.7" y="613" width="59.2" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="935.71" y="623.5" >ZSTD_c..</text>
</g>
<g >
<title>ut_delay(unsigned long) (1 samples, 0.25%)</title><rect x="175.6" y="709" width="3.0" height="15.0" fill="rgb(103,214,214)" rx="2" ry="2" />
<text  x="178.61" y="719.5" ></text>
</g>
<g >
<title>buf_flush_page(buf_pool_t*, buf_page_t*, buf_flush_t, bool) (15 samples, 3.76%)</title><rect x="128.3" y="757" width="44.4" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="131.30" y="767.5" >buf_..</text>
</g>
<g >
<title>blk_finish_plug (9 samples, 2.26%)</title><rect x="131.3" y="485" width="26.6" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="134.25" y="495.5" >b..</text>
</g>
<g >
<title>__blk_mq_delay_run_hw_queue (19 samples, 4.76%)</title><rect x="27.7" y="629" width="56.2" height="15.0" fill="rgb(105,216,216)" rx="2" ry="2" />
<text  x="30.74" y="639.5" >__blk..</text>
</g>
<g >
<title>__strcmp_avx2 (1 samples, 0.25%)</title><rect x="13.0" y="805" width="2.9" height="15.0" fill="rgb(77,189,189)" rx="2" ry="2" />
<text  x="15.96" y="815.5" ></text>
</g>
<g >
<title>__ext4_mark_inode_dirty (2 samples, 0.50%)</title><rect x="799.6" y="437" width="5.9" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="802.62" y="447.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (41 samples, 10.28%)</title><rect x="125.3" y="853" width="121.3" height="15.0" fill="rgb(69,183,183)" rx="2" ry="2" />
<text  x="128.34" y="863.5" >execute_native_..</text>
</g>
<g >
<title>__iomap_dio_rw (21 samples, 5.26%)</title><rect x="27.7" y="709" width="62.1" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="30.74" y="719.5" >__ioma..</text>
</g>
<g >
<title>blk_mq_dispatch_rq_list (2 samples, 0.50%)</title><rect x="187.4" y="469" width="6.0" height="15.0" fill="rgb(92,204,204)" rx="2" ry="2" />
<text  x="190.44" y="479.5" ></text>
</g>
<g >
<title>lockless_pages_from_mm (1 samples, 0.25%)</title><rect x="83.9" y="581" width="3.0" height="15.0" fill="rgb(106,217,217)" rx="2" ry="2" />
<text  x="86.93" y="591.5" ></text>
</g>
<g >
<title>__block_write_begin_int (1 samples, 0.25%)</title><rect x="217.0" y="581" width="3.0" height="15.0" fill="rgb(69,182,182)" rx="2" ry="2" />
<text  x="220.02" y="591.5" ></text>
</g>
<g >
<title>add_pke(TABLE*, THD*, unsigned char const*) (1 samples, 0.25%)</title><rect x="631.1" y="661" width="2.9" height="15.0" fill="rgb(80,193,193)" rx="2" ry="2" />
<text  x="634.05" y="671.5" ></text>
</g>
<g >
<title>Fil_shard::flush_file_spaces(unsigned char) (1 samples, 0.25%)</title><rect x="237.7" y="741" width="3.0" height="15.0" fill="rgb(91,203,203)" rx="2" ry="2" />
<text  x="240.72" y="751.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.25%)</title><rect x="722.7" y="565" width="3.0" height="15.0" fill="rgb(81,194,194)" rx="2" ry="2" />
<text  x="725.73" y="575.5" ></text>
</g>
<g >
<title>locksys::Shard_naked_latch_guard::Shard_naked_latch_guard(ut::Location, page_id_t const&amp;) (1 samples, 0.25%)</title><rect x="648.8" y="565" width="3.0" height="15.0" fill="rgb(69,183,183)" rx="2" ry="2" />
<text  x="651.80" y="575.5" ></text>
</g>
<g >
<title>Replicated_columns_view::set_thd(THD const*) (1 samples, 0.25%)</title><rect x="625.1" y="613" width="3.0" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="628.14" y="623.5" ></text>
</g>
<g >
<title>skb_release_data (1 samples, 0.25%)</title><rect x="444.7" y="53" width="3.0" height="15.0" fill="rgb(105,216,216)" rx="2" ry="2" />
<text  x="447.74" y="63.5" ></text>
</g>
<g >
<title>blk_flush_plug (2 samples, 0.50%)</title><rect x="187.4" y="597" width="6.0" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="190.44" y="607.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(unsigned long), unsigned long&gt; &gt; &gt;::_M_run() (5 samples, 1.25%)</title><rect x="231.8" y="837" width="14.8" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="234.80" y="847.5" ></text>
</g>
<g >
<title>trx_purge_attach_undo_recs(unsigned long, unsigned long) (1 samples, 0.25%)</title><rect x="172.7" y="789" width="2.9" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="175.66" y="799.5" ></text>
</g>
<g >
<title>sock_poll (1 samples, 0.25%)</title><rect x="323.5" y="581" width="2.9" height="15.0" fill="rgb(91,202,202)" rx="2" ry="2" />
<text  x="326.48" y="591.5" ></text>
</g>
<g >
<title>tcp_rcv_established (21 samples, 5.26%)</title><rect x="394.5" y="117" width="62.1" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="397.46" y="127.5" >tcp_rc..</text>
</g>
<g >
<title>my_net_read(NET*) (28 samples, 7.02%)</title><rect x="252.5" y="757" width="82.8" height="15.0" fill="rgb(95,207,207)" rx="2" ry="2" />
<text  x="255.51" y="767.5" >my_net_re..</text>
</g>
<g >
<title>syscall_exit_work (1 samples, 0.25%)</title><rect x="719.8" y="581" width="2.9" height="15.0" fill="rgb(78,191,191)" rx="2" ry="2" />
<text  x="722.77" y="591.5" ></text>
</g>
<g >
<title>bread_conv (8 samples, 2.01%)</title><rect x="267.3" y="549" width="23.7" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="270.29" y="559.5" >b..</text>
</g>
<g >
<title>ext4_buffered_write_iter (7 samples, 1.75%)</title><rect x="796.7" y="517" width="20.7" height="15.0" fill="rgb(68,181,181)" rx="2" ry="2" />
<text  x="799.67" y="527.5" ></text>
</g>
<g >
<title>iowrite16 (2 samples, 0.50%)</title><rect x="187.4" y="389" width="6.0" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="190.44" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (5 samples, 1.25%)</title><rect x="104.6" y="821" width="14.8" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="107.64" y="831.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (2 samples, 0.50%)</title><rect x="861.7" y="501" width="5.9" height="15.0" fill="rgb(78,191,191)" rx="2" ry="2" />
<text  x="864.73" y="511.5" ></text>
</g>
<g >
<title>__x64_sys_pwrite64 (11 samples, 2.76%)</title><rect x="131.3" y="581" width="32.5" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="134.25" y="591.5" >__..</text>
</g>
<g >
<title>blk_mq_sched_dispatch_requests (9 samples, 2.26%)</title><rect x="131.3" y="389" width="26.6" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="134.25" y="399.5" >b..</text>
</g>
<g >
<title>generic_perform_write (2 samples, 0.50%)</title><rect x="217.0" y="613" width="5.9" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="220.02" y="623.5" ></text>
</g>
<g >
<title>copy_user_generic_string (1 samples, 0.25%)</title><rect x="302.8" y="565" width="2.9" height="15.0" fill="rgb(90,201,201)" rx="2" ry="2" />
<text  x="305.78" y="575.5" ></text>
</g>
<g >
<title>down_write (1 samples, 0.25%)</title><rect x="205.2" y="613" width="2.9" height="15.0" fill="rgb(89,200,200)" rx="2" ry="2" />
<text  x="208.19" y="623.5" ></text>
</g>
<g >
<title>log_flush_low(log_t&amp;) (2 samples, 0.50%)</title><rect x="187.4" y="805" width="6.0" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="190.44" y="815.5" ></text>
</g>
<g >
<title>lock_table(unsigned long, dict_table_t*, lock_mode, que_thr_t*) (1 samples, 0.25%)</title><rect x="639.9" y="629" width="3.0" height="15.0" fill="rgb(58,173,173)" rx="2" ry="2" />
<text  x="642.92" y="639.5" ></text>
</g>
<g >
<title>exit_to_user_mode_loop (1 samples, 0.25%)</title><rect x="882.4" y="453" width="3.0" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="885.43" y="463.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (2 samples, 0.50%)</title><rect x="314.6" y="533" width="5.9" height="15.0" fill="rgb(53,167,167)" rx="2" ry="2" />
<text  x="317.61" y="543.5" ></text>
</g>
<g >
<title>__x64_sys_read (1 samples, 0.25%)</title><rect x="267.3" y="469" width="3.0" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="270.29" y="479.5" ></text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (1 samples, 0.25%)</title><rect x="341.2" y="725" width="3.0" height="15.0" fill="rgb(101,212,212)" rx="2" ry="2" />
<text  x="344.23" y="735.5" ></text>
</g>
<g >
<title>file_update_time (3 samples, 0.75%)</title><rect x="208.1" y="613" width="8.9" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="211.15" y="623.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, long&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, long&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, long&gt; &gt; &gt;::_M_erase(std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, long&gt; &gt;*) (1 samples, 0.25%)</title><rect x="912.0" y="565" width="3.0" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="915.01" y="575.5" ></text>
</g>
<g >
<title>__x64_sys_ppoll (10 samples, 2.51%)</title><rect x="302.8" y="629" width="29.6" height="15.0" fill="rgb(79,191,191)" rx="2" ry="2" />
<text  x="305.78" y="639.5" >__..</text>
</g>
<g >
<title>ha_prepare_low(THD*, bool) (7 samples, 1.75%)</title><rect x="1056.9" y="709" width="20.7" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="1059.92" y="719.5" ></text>
</g>
<g >
<title>tls13_enc (3 samples, 0.75%)</title><rect x="291.0" y="597" width="8.8" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="293.95" y="607.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.25%)</title><rect x="10.0" y="837" width="3.0" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="13.00" y="847.5" ></text>
</g>
<g >
<title>Delegate::read_lock() (1 samples, 0.25%)</title><rect x="784.8" y="661" width="3.0" height="15.0" fill="rgb(68,182,182)" rx="2" ry="2" />
<text  x="787.84" y="671.5" ></text>
</g>
<g >
<title>open_tables(THD*, TABLE_LIST**, unsigned int*, unsigned int, Prelocking_strategy*) (6 samples, 1.50%)</title><rect x="542.3" y="693" width="17.8" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="545.33" y="703.5" ></text>
</g>
<g >
<title>ha_innobase::extra(ha_extra_function) (1 samples, 0.25%)</title><rect x="557.1" y="661" width="3.0" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="560.12" y="671.5" ></text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (1 samples, 0.25%)</title><rect x="24.8" y="693" width="2.9" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="27.79" y="703.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (1 samples, 0.25%)</title><rect x="220.0" y="581" width="2.9" height="15.0" fill="rgb(89,200,200)" rx="2" ry="2" />
<text  x="222.97" y="591.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.25%)</title><rect x="13.0" y="821" width="2.9" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="15.96" y="831.5" ></text>
</g>
<g >
<title>__check_object_size.part.0 (1 samples, 0.25%)</title><rect x="462.5" y="357" width="2.9" height="15.0" fill="rgb(103,213,213)" rx="2" ry="2" />
<text  x="465.48" y="367.5" ></text>
</g>
<g >
<title>__xfrm_policy_check2.constprop.0 (1 samples, 0.25%)</title><rect x="391.5" y="133" width="3.0" height="15.0" fill="rgb(56,171,171)" rx="2" ry="2" />
<text  x="394.50" y="143.5" ></text>
</g>
<g >
<title>Sql_cmd_insert_base::prepare_inner(THD*) (8 samples, 2.01%)</title><rect x="506.8" y="709" width="23.7" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="509.84" y="719.5" >S..</text>
</g>
<g >
<title>__blk_mq_sched_dispatch_requests (9 samples, 2.26%)</title><rect x="131.3" y="373" width="26.6" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="134.25" y="383.5" >_..</text>
</g>
<g >
<title>open_tables_for_query(THD*, TABLE_LIST*, unsigned int) (6 samples, 1.50%)</title><rect x="542.3" y="709" width="17.8" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="545.33" y="719.5" ></text>
</g>
<g >
<title>copy_user_generic_string (1 samples, 0.25%)</title><rect x="465.4" y="325" width="3.0" height="15.0" fill="rgb(101,211,211)" rx="2" ry="2" />
<text  x="468.44" y="335.5" ></text>
</g>
<g >
<title>trx_start_low(trx_t*, bool) (4 samples, 1.00%)</title><rect x="722.7" y="645" width="11.9" height="15.0" fill="rgb(58,173,173)" rx="2" ry="2" />
<text  x="725.73" y="655.5" ></text>
</g>
<g >
<title>mark_wake_futex (1 samples, 0.25%)</title><rect x="89.8" y="757" width="3.0" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="92.85" y="767.5" ></text>
</g>
<g >
<title>__pthread_mutex_cond_lock (1 samples, 0.25%)</title><rect x="18.9" y="837" width="2.9" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="21.87" y="847.5" ></text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.25%)</title><rect x="1048.0" y="533" width="3.0" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="1051.05" y="543.5" ></text>
</g>
<g >
<title>check_access(THD*, unsigned long, char const*, unsigned long*, GRANT_INTERNAL_INFO*, bool, bool) (1 samples, 0.25%)</title><rect x="533.5" y="677" width="2.9" height="15.0" fill="rgb(68,182,182)" rx="2" ry="2" />
<text  x="536.46" y="687.5" ></text>
</g>
<g >
<title>mysql_lock_tables(THD*, TABLE**, unsigned long, unsigned int) (4 samples, 1.00%)</title><rect x="737.5" y="709" width="11.8" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="740.52" y="719.5" ></text>
</g>
<g >
<title>__ext4_mark_inode_dirty (2 samples, 0.50%)</title><rect x="208.1" y="549" width="6.0" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="211.15" y="559.5" ></text>
</g>
<g >
<title>__x64_sys_io_submit (22 samples, 5.51%)</title><rect x="24.8" y="789" width="65.0" height="15.0" fill="rgb(57,172,172)" rx="2" ry="2" />
<text  x="27.79" y="799.5" >__x64_s..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (2 samples, 0.50%)</title><rect x="669.5" y="533" width="5.9" height="15.0" fill="rgb(92,203,203)" rx="2" ry="2" />
<text  x="672.50" y="543.5" ></text>
</g>
<g >
<title>__x64_sys_fsync (2 samples, 0.50%)</title><rect x="187.4" y="709" width="6.0" height="15.0" fill="rgb(55,170,170)" rx="2" ry="2" />
<text  x="190.44" y="719.5" ></text>
</g>
<g >
<title>binlog_cache_data::compress(THD*) (1 samples, 0.25%)</title><rect x="929.7" y="693" width="3.0" height="15.0" fill="rgb(79,192,192)" rx="2" ry="2" />
<text  x="932.75" y="703.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (1 samples, 0.25%)</title><rect x="796.7" y="437" width="2.9" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="799.67" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7 samples, 1.75%)</title><rect x="796.7" y="597" width="20.7" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="799.67" y="607.5" ></text>
</g>
<g >
<title>iowrite16 (18 samples, 4.51%)</title><rect x="30.7" y="485" width="53.2" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="33.70" y="495.5" >iowri..</text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, binlog_cache_data::cache_state&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, binlog_cache_data::cache_state&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, binlog_cache_data::cache_state&gt; &gt; &gt;::_M_get_insert_unique_pos(unsigned long long const&amp;) (1 samples, 0.25%)</title><rect x="1089.4" y="693" width="3.0" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="1092.45" y="703.5" ></text>
</g>
<g >
<title>BIO_get_callback_arg (1 samples, 0.25%)</title><rect x="264.3" y="533" width="3.0" height="15.0" fill="rgb(54,169,169)" rx="2" ry="2" />
<text  x="267.34" y="543.5" ></text>
</g>
<g >
<title>trx_purge_add_update_undo_to_history(trx_t*, trx_undo_ptr_t*, unsigned char*, bool, unsigned long, mtr_t*) (3 samples, 0.75%)</title><rect x="861.7" y="533" width="8.9" height="15.0" fill="rgb(67,180,180)" rx="2" ry="2" />
<text  x="864.73" y="543.5" ></text>
</g>
<g >
<title>dispatch_sql_command(THD*, Parser_state*) (237 samples, 59.40%)</title><rect x="483.2" y="773" width="700.9" height="15.0" fill="rgb(80,193,193)" rx="2" ry="2" />
<text  x="486.18" y="783.5" >dispatch_sql_command(THD*, Parser_state*)</text>
</g>
<g >
<title>mlog_write_ulint(unsigned char*, unsigned long, mlog_id_t, mtr_t*) (1 samples, 0.25%)</title><rect x="867.6" y="485" width="3.0" height="15.0" fill="rgb(102,212,212)" rx="2" ry="2" />
<text  x="870.64" y="495.5" ></text>
</g>
<g >
<title>lockless_pages_from_mm (1 samples, 0.25%)</title><rect x="83.9" y="597" width="3.0" height="15.0" fill="rgb(56,171,171)" rx="2" ry="2" />
<text  x="86.93" y="607.5" ></text>
</g>
<g >
<title>row_upd_index_entry_sys_field(dtuple_t*, dict_index_t*, unsigned long, unsigned long) (1 samples, 0.25%)</title><rect x="663.6" y="581" width="2.9" height="15.0" fill="rgb(82,195,195)" rx="2" ry="2" />
<text  x="666.58" y="591.5" ></text>
</g>
<g >
<title>new_sync_write (6 samples, 1.50%)</title><rect x="205.2" y="645" width="17.7" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="208.19" y="655.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (3 samples, 0.75%)</title><rect x="208.1" y="565" width="8.9" height="15.0" fill="rgb(66,179,179)" rx="2" ry="2" />
<text  x="211.15" y="575.5" ></text>
</g>
<g >
<title>trx_assign_rseg_durable(trx_t*) (3 samples, 0.75%)</title><rect x="725.7" y="629" width="8.9" height="15.0" fill="rgb(90,201,201)" rx="2" ry="2" />
<text  x="728.69" y="639.5" ></text>
</g>
<g >
<title>Field_real::store_decimal(my_decimal const*) (3 samples, 0.75%)</title><rect x="568.9" y="661" width="8.9" height="15.0" fill="rgb(79,192,192)" rx="2" ry="2" />
<text  x="571.95" y="671.5" ></text>
</g>
<g >
<title>Fil_system::flush_file_spaces(unsigned char) (1 samples, 0.25%)</title><rect x="237.7" y="757" width="3.0" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="240.72" y="767.5" ></text>
</g>
<g >
<title>thd_get_ha_data (1 samples, 0.25%)</title><rect x="1098.3" y="725" width="3.0" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="1101.32" y="735.5" ></text>
</g>
<g >
<title>__GI_fsync (2 samples, 0.50%)</title><rect x="187.4" y="757" width="6.0" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="190.44" y="767.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (21 samples, 5.26%)</title><rect x="394.5" y="133" width="62.1" height="15.0" fill="rgb(80,192,192)" rx="2" ry="2" />
<text  x="397.46" y="143.5" >tcp_v4..</text>
</g>
<g >
<title>validate_xmit_skb (1 samples, 0.25%)</title><rect x="382.6" y="261" width="3.0" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="385.63" y="271.5" ></text>
</g>
<g >
<title>security_file_permission (1 samples, 0.25%)</title><rect x="471.4" y="453" width="2.9" height="15.0" fill="rgb(82,194,194)" rx="2" ry="2" />
<text  x="474.35" y="463.5" ></text>
</g>
<g >
<title>ip_finish_output2 (27 samples, 6.77%)</title><rect x="376.7" y="309" width="79.9" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="379.72" y="319.5" >ip_finish..</text>
</g>
<g >
<title>remove_wait_queue (1 samples, 0.25%)</title><rect x="326.4" y="581" width="3.0" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="329.44" y="591.5" ></text>
</g>
<g >
<title>binlog_trx_cache_data::reset() (1 samples, 0.25%)</title><rect x="915.0" y="645" width="2.9" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="917.96" y="655.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.25%)</title><rect x="394.5" y="69" width="2.9" height="15.0" fill="rgb(100,210,210)" rx="2" ry="2" />
<text  x="397.46" y="79.5" ></text>
</g>
<g >
<title>Log_event::write_header(Basic_ostream*, unsigned long) (1 samples, 0.25%)</title><rect x="613.3" y="597" width="3.0" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="616.31" y="607.5" ></text>
</g>
<g >
<title>do_syscall_64 (8 samples, 2.01%)</title><rect x="267.3" y="501" width="23.7" height="15.0" fill="rgb(77,189,189)" rx="2" ry="2" />
<text  x="270.29" y="511.5" >d..</text>
</g>
<g >
<title>selinux_file_permission (1 samples, 0.25%)</title><rect x="282.1" y="437" width="2.9" height="15.0" fill="rgb(66,179,179)" rx="2" ry="2" />
<text  x="285.08" y="447.5" ></text>
</g>
<g >
<title>kvm_clock_get_cycles (1 samples, 0.25%)</title><rect x="329.4" y="597" width="3.0" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="332.40" y="607.5" ></text>
</g>
<g >
<title>Security_context::check_access(unsigned long, std::string const&amp;, bool) (1 samples, 0.25%)</title><rect x="533.5" y="661" width="2.9" height="15.0" fill="rgb(106,217,217)" rx="2" ry="2" />
<text  x="536.46" y="671.5" ></text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.25%)</title><rect x="527.5" y="645" width="3.0" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="530.54" y="655.5" ></text>
</g>
<g >
<title>__blk_mq_do_dispatch_sched (9 samples, 2.26%)</title><rect x="131.3" y="357" width="26.6" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="134.25" y="367.5" >_..</text>
</g>
<g >
<title>pc_flush_slot() (16 samples, 4.01%)</title><rect x="125.3" y="805" width="47.4" height="15.0" fill="rgb(91,202,202)" rx="2" ry="2" />
<text  x="128.34" y="815.5" >pc_f..</text>
</g>
<g >
<title>check_single_table_access(THD*, unsigned long, TABLE_LIST*, bool) (4 samples, 1.00%)</title><rect x="530.5" y="693" width="11.8" height="15.0" fill="rgb(94,206,206)" rx="2" ry="2" />
<text  x="533.50" y="703.5" ></text>
</g>
<g >
<title>do_syscall_64 (34 samples, 8.52%)</title><rect x="376.7" y="501" width="100.6" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="379.72" y="511.5" >do_syscall_64</text>
</g>
<g >
<title>MDL_ticket::destroy(MDL_ticket*) (1 samples, 0.25%)</title><rect x="778.9" y="709" width="3.0" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="781.92" y="719.5" ></text>
</g>
<g >
<title>jbd2__journal_start (1 samples, 0.25%)</title><rect x="796.7" y="405" width="2.9" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="799.67" y="415.5" ></text>
</g>
<g >
<title>blk_mq_flush_plug_list (19 samples, 4.76%)</title><rect x="27.7" y="661" width="56.2" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="30.74" y="671.5" >blk_m..</text>
</g>
<g >
<title>Rows_log_event* THD::binlog_prepare_pending_rows_event&lt;Write_rows_log_event&gt;(TABLE*, unsigned int, unsigned long, bool, unsigned char const*, unsigned int) (1 samples, 0.25%)</title><rect x="628.1" y="629" width="3.0" height="15.0" fill="rgb(67,180,180)" rx="2" ry="2" />
<text  x="631.10" y="639.5" ></text>
</g>
<g >
<title>WPACKET_allocate_bytes (1 samples, 0.25%)</title><rect x="359.0" y="613" width="2.9" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="361.97" y="623.5" ></text>
</g>
<g >
<title>Lex_input_stream::add_digest_token(unsigned int, Lexer_yystype*) (1 samples, 0.25%)</title><rect x="1178.2" y="661" width="2.9" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="1181.17" y="671.5" ></text>
</g>
<g >
<title>lock_tables(THD*, TABLE_LIST*, unsigned int, unsigned int) (4 samples, 1.00%)</title><rect x="737.5" y="725" width="11.8" height="15.0" fill="rgb(102,213,213)" rx="2" ry="2" />
<text  x="740.52" y="735.5" ></text>
</g>
<g >
<title>start_thread (319 samples, 79.95%)</title><rect x="246.6" y="853" width="943.4" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="249.59" y="863.5" >start_thread</text>
</g>
<g >
<title>file_update_time (3 samples, 0.75%)</title><rect x="796.7" y="501" width="8.8" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="799.67" y="511.5" ></text>
</g>
<g >
<title>my_strtod(char const*, char const**, int*) (3 samples, 0.75%)</title><rect x="568.9" y="629" width="8.9" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="571.95" y="639.5" ></text>
</g>
<g >
<title>Item_decimal::Item_decimal(YYLTYPE const&amp;, char const*, unsigned int, CHARSET_INFO const*) (1 samples, 0.25%)</title><rect x="1148.6" y="709" width="3.0" height="15.0" fill="rgb(79,192,192)" rx="2" ry="2" />
<text  x="1151.60" y="719.5" ></text>
</g>
<g >
<title>binary_log::codecs::binary::Transaction_payload::~Transaction_payload() (1 samples, 0.25%)</title><rect x="991.9" y="645" width="2.9" height="15.0" fill="rgb(57,172,172)" rx="2" ry="2" />
<text  x="994.85" y="655.5" ></text>
</g>
<g >
<title>pfs_spawn_thread (319 samples, 79.95%)</title><rect x="246.6" y="837" width="943.4" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="249.59" y="847.5" >pfs_spawn_thread</text>
</g>
<g >
<title>LinuxAIOHandler::poll(fil_node_t**, void**, IORequest*) (2 samples, 0.50%)</title><rect x="240.7" y="773" width="5.9" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="243.68" y="783.5" ></text>
</g>
<g >
<title>vfs_write (7 samples, 1.75%)</title><rect x="205.2" y="661" width="20.7" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="208.19" y="671.5" ></text>
</g>
<g >
<title>Double_write::write_complete(buf_page_t*, buf_flush_t) (1 samples, 0.25%)</title><rect x="237.7" y="773" width="3.0" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="240.72" y="783.5" ></text>
</g>
<g >
<title>Clone_persist_gtid::flush_gtids(THD*) (1 samples, 0.25%)</title><rect x="181.5" y="805" width="3.0" height="15.0" fill="rgb(87,198,198)" rx="2" ry="2" />
<text  x="184.53" y="815.5" ></text>
</g>
<g >
<title>__ext4_journal_get_write_access (2 samples, 0.50%)</title><rect x="799.6" y="405" width="5.9" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="802.62" y="415.5" ></text>
</g>
<g >
<title>iomap_apply (2 samples, 0.50%)</title><rect x="83.9" y="693" width="5.9" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="86.93" y="703.5" ></text>
</g>
<g >
<title>tcp_event_data_recv (1 samples, 0.25%)</title><rect x="453.6" y="85" width="3.0" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="456.61" y="95.5" ></text>
</g>
<g >
<title>Double_write::enqueue(buf_flush_t, buf_page_t*, file::Block const*) (15 samples, 3.76%)</title><rect x="128.3" y="725" width="44.4" height="15.0" fill="rgb(80,192,192)" rx="2" ry="2" />
<text  x="131.30" y="735.5" >Doub..</text>
</g>
<g >
<title>innobase_commit(handlerton*, THD*, bool) (23 samples, 5.76%)</title><rect x="829.2" y="645" width="68.0" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="832.20" y="655.5" >innobas..</text>
</g>
<g >
<title>os_file_write_func(IORequest&amp;, char const*, int, void const*, unsigned long, unsigned long) (11 samples, 2.76%)</title><rect x="131.3" y="661" width="32.5" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="134.25" y="671.5" >os..</text>
</g>
<g >
<title>virtqueue_notify (18 samples, 4.51%)</title><rect x="30.7" y="517" width="53.2" height="15.0" fill="rgb(57,172,172)" rx="2" ry="2" />
<text  x="33.70" y="527.5" >virtq..</text>
</g>
<g >
<title>exit_to_user_mode_prepare (1 samples, 0.25%)</title><rect x="341.2" y="693" width="3.0" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="344.23" y="703.5" ></text>
</g>
<g >
<title>__x64_sys_futex (4 samples, 1.00%)</title><rect x="104.6" y="805" width="11.9" height="15.0" fill="rgb(78,190,190)" rx="2" ry="2" />
<text  x="107.64" y="815.5" ></text>
</g>
<g >
<title>handler::ha_reset() (1 samples, 0.25%)</title><rect x="755.3" y="709" width="2.9" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="758.26" y="719.5" ></text>
</g>
<g >
<title>tcp_write_xmit (28 samples, 7.02%)</title><rect x="376.7" y="357" width="82.8" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="379.72" y="367.5" >tcp_write..</text>
</g>
<g >
<title>ZSTD_compressLiterals (12 samples, 3.01%)</title><rect x="956.4" y="565" width="35.5" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="959.37" y="575.5" >ZST..</text>
</g>
<g >
<title>aes_gcm_ctrl (1 samples, 0.25%)</title><rect x="293.9" y="549" width="3.0" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="296.91" y="559.5" ></text>
</g>
<g >
<title>Binlog_storage_delegate::after_flush(THD*, char const*, unsigned long long) (2 samples, 0.50%)</title><rect x="784.8" y="677" width="6.0" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="787.84" y="687.5" ></text>
</g>
<g >
<title>do_ssl3_write (40 samples, 10.03%)</title><rect x="361.9" y="613" width="118.3" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="364.93" y="623.5" >do_ssl3_write</text>
</g>
<g >
<title>Clone_persist_gtid::has_gtid(trx_t*, THD*&amp;, bool&amp;) (1 samples, 0.25%)</title><rect x="1071.7" y="645" width="3.0" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="1074.70" y="655.5" ></text>
</g>
<g >
<title>binlog_start_trans_and_stmt(THD*, Log_event*) (5 samples, 1.25%)</title><rect x="604.4" y="645" width="14.8" height="15.0" fill="rgb(57,172,172)" rx="2" ry="2" />
<text  x="607.44" y="655.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.25%)</title><rect x="234.8" y="789" width="2.9" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="237.76" y="799.5" ></text>
</g>
<g >
<title>trx_undo_gtid_add_update_undo(trx_t*, bool, bool) (1 samples, 0.25%)</title><rect x="1071.7" y="661" width="3.0" height="15.0" fill="rgb(70,184,184)" rx="2" ry="2" />
<text  x="1074.70" y="671.5" ></text>
</g>
<g >
<title>ext4_dio_write_iter (22 samples, 5.51%)</title><rect x="24.8" y="741" width="65.0" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="27.79" y="751.5" >ext4_di..</text>
</g>
<g >
<title>std::string::reserve(unsigned long) (1 samples, 0.25%)</title><rect x="634.0" y="661" width="3.0" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="637.01" y="671.5" ></text>
</g>
<g >
<title>__fget_files (1 samples, 0.25%)</title><rect x="202.2" y="645" width="3.0" height="15.0" fill="rgb(108,219,219)" rx="2" ry="2" />
<text  x="205.23" y="655.5" ></text>
</g>
<g >
<title>mtr_t::Command::add_dirty_blocks_to_flush_list(unsigned long, unsigned long) (1 samples, 0.25%)</title><rect x="885.4" y="533" width="2.9" height="15.0" fill="rgb(94,206,206)" rx="2" ry="2" />
<text  x="888.39" y="543.5" ></text>
</g>
<g >
<title>blk_mq_sched_insert_requests (2 samples, 0.50%)</title><rect x="187.4" y="565" width="6.0" height="15.0" fill="rgb(65,178,178)" rx="2" ry="2" />
<text  x="190.44" y="575.5" ></text>
</g>
<g >
<title>page_cur_tuple_insert(page_cur_t*, dtuple_t const*, dict_index_t*, unsigned long**, mem_block_info_t**, mtr_t*) (1 samples, 0.25%)</title><rect x="660.6" y="581" width="3.0" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="663.63" y="591.5" ></text>
</g>
<g >
<title>__GI___pthread_cond_broadcast (1 samples, 0.25%)</title><rect x="923.8" y="677" width="3.0" height="15.0" fill="rgb(79,192,192)" rx="2" ry="2" />
<text  x="926.83" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, long&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, long&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, long&gt; &gt; &gt;::_M_erase(std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, long&gt; &gt;*) (1 samples, 0.25%)</title><rect x="912.0" y="437" width="3.0" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="915.01" y="447.5" ></text>
</g>
<g >
<title>Writeset_trx_dependency_tracker::get_dependency(THD*, long&amp;, long&amp;) (2 samples, 0.50%)</title><rect x="909.0" y="613" width="6.0" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="912.05" y="623.5" ></text>
</g>
<g >
<title>iomap_dio_bio_actor (1 samples, 0.25%)</title><rect x="160.8" y="469" width="3.0" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="163.83" y="479.5" ></text>
</g>
<g >
<title>Log_event::write(Basic_ostream*) (1 samples, 0.25%)</title><rect x="563.0" y="661" width="3.0" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="566.03" y="671.5" ></text>
</g>
<g >
<title>PT_insert::make_cmd(THD*) (3 samples, 0.75%)</title><rect x="1104.2" y="709" width="8.9" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="1107.24" y="719.5" ></text>
</g>
<g >
<title>HUF_buildCTable_wksp (8 samples, 2.01%)</title><rect x="956.4" y="517" width="23.6" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="959.37" y="527.5" >H..</text>
</g>
<g >
<title>MYSQLlex(YYSTYPE*, YYLTYPE*, THD*) (10 samples, 2.51%)</title><rect x="1151.6" y="709" width="29.5" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="1154.55" y="719.5" >MY..</text>
</g>
<g >
<title>ext4_writepages (2 samples, 0.50%)</title><rect x="187.4" y="629" width="6.0" height="15.0" fill="rgb(54,168,168)" rx="2" ry="2" />
<text  x="190.44" y="639.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (16 samples, 4.01%)</title><rect x="1003.7" y="549" width="47.3" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="1006.68" y="559.5" >__me..</text>
</g>
<g >
<title>__local_bh_enable_ip (24 samples, 6.02%)</title><rect x="385.6" y="293" width="71.0" height="15.0" fill="rgb(55,170,170)" rx="2" ry="2" />
<text  x="388.59" y="303.5" >__local_..</text>
</g>
<g >
<title>process_backlog (23 samples, 5.76%)</title><rect x="388.5" y="213" width="68.1" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="391.55" y="223.5" >process..</text>
</g>
<g >
<title>Restrictions::db() const (1 samples, 0.25%)</title><rect x="533.5" y="629" width="2.9" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="536.46" y="639.5" ></text>
</g>
<g >
<title>Table_columns_view&lt;std::function&lt;bool (TABLE const*, unsigned long)&gt; &gt;::iterator::operator++() (1 samples, 0.25%)</title><rect x="592.6" y="613" width="3.0" height="15.0" fill="rgb(105,216,216)" rx="2" ry="2" />
<text  x="595.61" y="623.5" ></text>
</g>
<g >
<title>decimal2double(decimal_t const*, double*) (3 samples, 0.75%)</title><rect x="568.9" y="645" width="8.9" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="571.95" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, long&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, long&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, long&gt; &gt; &gt;::_M_erase(std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, long&gt; &gt;*) (1 samples, 0.25%)</title><rect x="912.0" y="533" width="3.0" height="15.0" fill="rgb(94,206,206)" rx="2" ry="2" />
<text  x="915.01" y="543.5" ></text>
</g>
<g >
<title>Rpl_thd_context::get_tx_rpl_delegate_stage_status() (1 samples, 0.25%)</title><rect x="604.4" y="629" width="3.0" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="607.44" y="639.5" ></text>
</g>
<g >
<title>fil_space_get(unsigned int) (1 samples, 0.25%)</title><rect x="879.5" y="549" width="2.9" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="882.47" y="559.5" ></text>
</g>
<g >
<title>Table_map_log_event::Table_map_log_event(THD*, TABLE*, Table_id const&amp;, bool) (4 samples, 1.00%)</title><rect x="586.7" y="645" width="11.8" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="589.69" y="655.5" ></text>
</g>
<g >
<title>ssl3_write_bytes (44 samples, 11.03%)</title><rect x="353.1" y="629" width="130.1" height="15.0" fill="rgb(77,189,189)" rx="2" ry="2" />
<text  x="356.06" y="639.5" >ssl3_write_bytes</text>
</g>
<g >
<title>asm_sysvec_call_function_single (1 samples, 0.25%)</title><rect x="252.5" y="693" width="3.0" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="255.51" y="703.5" ></text>
</g>
<g >
<title>trx_release_impl_and_expl_locks(trx_t*, bool) (3 samples, 0.75%)</title><rect x="846.9" y="565" width="8.9" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="849.94" y="575.5" ></text>
</g>
<g >
<title>pfn_valid (1 samples, 0.25%)</title><rect x="462.5" y="325" width="2.9" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="465.48" y="335.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.25%)</title><rect x="639.9" y="613" width="3.0" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="642.92" y="623.5" ></text>
</g>
<g >
<title>__strcmp_avx2 (1 samples, 0.25%)</title><rect x="787.8" y="661" width="3.0" height="15.0" fill="rgb(79,191,191)" rx="2" ry="2" />
<text  x="790.79" y="671.5" ></text>
</g>
<g >
<title>ha_innobase::update_thd(THD*) (1 samples, 0.25%)</title><rect x="557.1" y="645" width="3.0" height="15.0" fill="rgb(56,171,171)" rx="2" ry="2" />
<text  x="560.12" y="655.5" ></text>
</g>
<g >
<title>skb_release_data (1 samples, 0.25%)</title><rect x="444.7" y="37" width="3.0" height="15.0" fill="rgb(58,173,173)" rx="2" ry="2" />
<text  x="447.74" y="47.5" ></text>
</g>
<g >
<title>__napi_poll (23 samples, 5.76%)</title><rect x="388.5" y="229" width="68.1" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="391.55" y="239.5" >__napi_..</text>
</g>
<g >
<title>futex_wait (4 samples, 1.00%)</title><rect x="104.6" y="773" width="11.9" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="107.64" y="783.5" ></text>
</g>
<g >
<title>LEX::make_sql_cmd(Parse_tree_root*) (1 samples, 0.25%)</title><rect x="1101.3" y="741" width="2.9" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="1104.28" y="751.5" ></text>
</g>
<g >
<title>blk_mq_get_request (1 samples, 0.25%)</title><rect x="160.8" y="421" width="3.0" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="163.83" y="431.5" ></text>
</g>
<g >
<title>Fil_shard::space_flush(unsigned int) (1 samples, 0.25%)</title><rect x="237.7" y="725" width="3.0" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="240.72" y="735.5" ></text>
</g>
<g >
<title>jbd2_journal_get_write_access (2 samples, 0.50%)</title><rect x="799.6" y="389" width="5.9" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="802.62" y="399.5" ></text>
</g>
<g >
<title>trans_commit(THD*, bool) (103 samples, 25.81%)</title><rect x="773.0" y="741" width="304.6" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="776.01" y="751.5" >trans_commit(THD*, bool)</text>
</g>
<g >
<title>exit_to_user_mode_loop (1 samples, 0.25%)</title><rect x="477.3" y="485" width="2.9" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="480.27" y="495.5" ></text>
</g>
<g >
<title>btr_cur_optimistic_insert(unsigned long, btr_cur_t*, unsigned long**, mem_block_info_t**, dtuple_t*, unsigned char**, big_rec_t**, que_thr_t*, mtr_t*) (1 samples, 0.25%)</title><rect x="642.9" y="613" width="2.9" height="15.0" fill="rgb(103,213,213)" rx="2" ry="2" />
<text  x="645.88" y="623.5" ></text>
</g>
<g >
<title>IO_CACHE_binlog_cache_storage::length() const (1 samples, 0.25%)</title><rect x="616.3" y="613" width="2.9" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="619.27" y="623.5" ></text>
</g>
<g >
<title>Fil_shard::flush_file_redo() (2 samples, 0.50%)</title><rect x="187.4" y="789" width="6.0" height="15.0" fill="rgb(106,217,217)" rx="2" ry="2" />
<text  x="190.44" y="799.5" ></text>
</g>
<g >
<title>kvm_clock_get_cycles (1 samples, 0.25%)</title><rect x="276.2" y="309" width="2.9" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="279.17" y="319.5" ></text>
</g>
<g >
<title>do_io_getevents (1 samples, 0.25%)</title><rect x="21.8" y="773" width="3.0" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="24.83" y="783.5" ></text>
</g>
<g >
<title>pfs_rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.25%)</title><rect x="864.7" y="485" width="2.9" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="867.69" y="495.5" ></text>
</g>
<g >
<title>__pthread_disable_asynccancel (1 samples, 0.25%)</title><rect x="119.4" y="853" width="3.0" height="15.0" fill="rgb(92,203,203)" rx="2" ry="2" />
<text  x="122.42" y="863.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.25%)</title><rect x="237.7" y="677" width="3.0" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="240.72" y="687.5" ></text>
</g>
<g >
<title>trx_write_serialisation_history(trx_t*, mtr_t*) (5 samples, 1.25%)</title><rect x="855.8" y="565" width="14.8" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="858.81" y="575.5" ></text>
</g>
<g >
<title>tcp_mstamp_refresh (1 samples, 0.25%)</title><rect x="276.2" y="357" width="2.9" height="15.0" fill="rgb(93,205,205)" rx="2" ry="2" />
<text  x="279.17" y="367.5" ></text>
</g>
<g >
<title>blk_mq_sched_insert_requests (19 samples, 4.76%)</title><rect x="27.7" y="645" width="56.2" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="30.74" y="655.5" >blk_m..</text>
</g>
<g >
<title>binlog_cache_data::write_event(Log_event*) (1 samples, 0.25%)</title><rect x="991.9" y="661" width="2.9" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="994.85" y="671.5" ></text>
</g>
<g >
<title>row_ins_clust_index_entry_low(unsigned int, unsigned long, dict_index_t*, unsigned long, dtuple_t*, que_thr_t*, bool) (24 samples, 6.02%)</title><rect x="645.8" y="613" width="71.0" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="648.84" y="623.5" >row_ins_..</text>
</g>
<g >
<title>syscall (23 samples, 5.76%)</title><rect x="21.8" y="837" width="68.0" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="24.83" y="847.5" >syscall</text>
</g>
<g >
<title>ZSTD_buildSeqStore (5 samples, 1.25%)</title><rect x="935.7" y="565" width="14.8" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="938.66" y="575.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::write_transaction(THD*, binlog_cache_data*, Binlog_event_writer*) (4 samples, 1.00%)</title><rect x="903.1" y="629" width="11.9" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="906.13" y="639.5" ></text>
</g>
<g >
<title>check_one_table_access(THD*, unsigned long, TABLE_LIST*) (4 samples, 1.00%)</title><rect x="530.5" y="709" width="11.8" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="533.50" y="719.5" ></text>
</g>
<g >
<title>exit_to_user_mode_loop (1 samples, 0.25%)</title><rect x="252.5" y="629" width="3.0" height="15.0" fill="rgb(64,178,178)" rx="2" ry="2" />
<text  x="255.51" y="639.5" ></text>
</g>
<g >
<title>pfs_set_mem_cnt_THD_vc(THD*, THD**) (1 samples, 0.25%)</title><rect x="820.3" y="661" width="3.0" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="823.33" y="671.5" ></text>
</g>
<g >
<title>do_softirq (24 samples, 6.02%)</title><rect x="385.6" y="277" width="71.0" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="388.59" y="287.5" >do_softirq</text>
</g>
<g >
<title>virtio_queue_rq (2 samples, 0.50%)</title><rect x="187.4" y="453" width="6.0" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="190.44" y="463.5" ></text>
</g>
<g >
<title>check_insert_fields(THD*, TABLE_LIST*, mem_root_deque&lt;Item*&gt;*) (6 samples, 1.50%)</title><rect x="512.8" y="693" width="17.7" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="515.76" y="703.5" ></text>
</g>
<g >
<title>poll_freewait (1 samples, 0.25%)</title><rect x="326.4" y="597" width="3.0" height="15.0" fill="rgb(65,179,179)" rx="2" ry="2" />
<text  x="329.44" y="607.5" ></text>
</g>
<g >
<title>__fget_files (1 samples, 0.25%)</title><rect x="202.2" y="629" width="3.0" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="205.23" y="639.5" ></text>
</g>
<g >
<title>buf_page_io_complete(buf_page_t*, bool) (1 samples, 0.25%)</title><rect x="237.7" y="789" width="3.0" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="240.72" y="799.5" ></text>
</g>
<g >
<title>Table_map_log_event::init_signedness_field() (1 samples, 0.25%)</title><rect x="595.6" y="613" width="2.9" height="15.0" fill="rgb(101,212,212)" rx="2" ry="2" />
<text  x="598.56" y="623.5" ></text>
</g>
<g >
<title>do_syscall_64 (11 samples, 2.76%)</title><rect x="131.3" y="597" width="32.5" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="134.25" y="607.5" >do..</text>
</g>
<g >
<title>ktime_get (1 samples, 0.25%)</title><rect x="160.8" y="389" width="3.0" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="163.83" y="399.5" ></text>
</g>
<g >
<title>fil_redo_io(IORequest const&amp;, page_id_t const&amp;, page_size_t const&amp;, unsigned long, unsigned long, void*) (9 samples, 2.26%)</title><rect x="199.3" y="789" width="26.6" height="15.0" fill="rgb(63,176,176)" rx="2" ry="2" />
<text  x="202.27" y="799.5" >f..</text>
</g>
<g >
<title>__GI___pthread_cond_timedwait (1 samples, 0.25%)</title><rect x="193.4" y="789" width="2.9" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="196.36" y="799.5" ></text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (1 samples, 0.25%)</title><rect x="477.3" y="549" width="2.9" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="480.27" y="559.5" ></text>
</g>
<g >
<title>ssl3_read_internal (14 samples, 3.51%)</title><rect x="258.4" y="645" width="41.4" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="261.42" y="655.5" >ssl..</text>
</g>
<g >
<title>dispatch_command(THD*, COM_DATA const*, enum_server_command) (288 samples, 72.18%)</title><rect x="335.3" y="789" width="851.7" height="15.0" fill="rgb(92,203,203)" rx="2" ry="2" />
<text  x="338.31" y="799.5" >dispatch_command(THD*, COM_DATA const*, enum_server_command)</text>
</g>
<g >
<title>tcp_clean_rtx_queue.constprop.0 (3 samples, 0.75%)</title><rect x="444.7" y="85" width="8.9" height="15.0" fill="rgb(81,194,194)" rx="2" ry="2" />
<text  x="447.74" y="95.5" ></text>
</g>
<g >
<title>TABLE::init(THD*, TABLE_LIST*) (1 samples, 0.25%)</title><rect x="545.3" y="677" width="2.9" height="15.0" fill="rgb(104,215,215)" rx="2" ry="2" />
<text  x="548.29" y="687.5" ></text>
</g>
<g >
<title>os_aio_handler(unsigned long, fil_node_t**, void**, IORequest*) (2 samples, 0.50%)</title><rect x="240.7" y="789" width="5.9" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="243.68" y="799.5" ></text>
</g>
<g >
<title>do_poll.constprop.0 (7 samples, 1.75%)</title><rect x="305.7" y="597" width="20.7" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="308.74" y="607.5" ></text>
</g>
<g >
<title>CRYPTO_zalloc (1 samples, 0.25%)</title><rect x="296.9" y="565" width="2.9" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="299.87" y="575.5" ></text>
</g>
<g >
<title>void ut_list_remove&lt;ut_list_base&lt;trx_undo_t, trx_undo_t_undo_list_node_getter&gt; &gt;(ut_list_base&lt;trx_undo_t, trx_undo_t_undo_list_node_getter&gt;&amp;, ut_list_base&lt;trx_undo_t, trx_undo_t_undo_list_node_getter&gt;::elem_type*) (1 samples, 0.25%)</title><rect x="894.3" y="581" width="2.9" height="15.0" fill="rgb(94,206,206)" rx="2" ry="2" />
<text  x="897.26" y="591.5" ></text>
</g>
<g >
<title>invalidate_inode_pages2_range (1 samples, 0.25%)</title><rect x="157.9" y="469" width="2.9" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="160.87" y="479.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.25%)</title><rect x="861.7" y="485" width="3.0" height="15.0" fill="rgb(105,216,216)" rx="2" ry="2" />
<text  x="864.73" y="495.5" ></text>
</g>
<g >
<title>tcp_write_xmit (1 samples, 0.25%)</title><rect x="456.6" y="341" width="2.9" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="459.57" y="351.5" ></text>
</g>
<g >
<title>char* std::string::_S_construct&lt;char const*&gt;(char const*, char const*, std::allocator&lt;char&gt; const&amp;, std::forward_iterator_tag) (1 samples, 0.25%)</title><rect x="539.4" y="645" width="2.9" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="542.37" y="655.5" ></text>
</g>
<g >
<title>do_futex (4 samples, 1.00%)</title><rect x="89.8" y="789" width="11.9" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="92.85" y="799.5" ></text>
</g>
<g >
<title>HIST_count_simple (1 samples, 0.25%)</title><rect x="988.9" y="501" width="3.0" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="991.90" y="511.5" ></text>
</g>
<g >
<title>pvclock_clocksource_read (1 samples, 0.25%)</title><rect x="160.8" y="341" width="3.0" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="163.83" y="351.5" ></text>
</g>
<g >
<title>bit_wait_io (1 samples, 0.25%)</title><rect x="799.6" y="325" width="3.0" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="802.62" y="335.5" ></text>
</g>
<g >
<title>PTI_text_literal_text_string::itemize(Parse_context*, Item**) (1 samples, 0.25%)</title><rect x="1107.2" y="677" width="3.0" height="15.0" fill="rgb(56,170,170)" rx="2" ry="2" />
<text  x="1110.19" y="687.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (1 samples, 0.25%)</title><rect x="122.4" y="853" width="2.9" height="15.0" fill="rgb(105,216,216)" rx="2" ry="2" />
<text  x="125.38" y="863.5" ></text>
</g>
<g >
<title>net_rx_action (23 samples, 5.76%)</title><rect x="388.5" y="245" width="68.1" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="391.55" y="255.5" >net_rx_..</text>
</g>
<g >
<title>find_keyword(Lex_input_stream*, unsigned int, bool) (4 samples, 1.00%)</title><rect x="1169.3" y="677" width="11.8" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="1172.30" y="687.5" ></text>
</g>
<g >
<title>net_flush(NET*) (47 samples, 11.78%)</title><rect x="344.2" y="725" width="139.0" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="347.19" y="735.5" >net_flush(NET*)</text>
</g>
<g >
<title>flush_handlerton(THD*, st_plugin_int*, void*) (1 samples, 0.25%)</title><rect x="900.2" y="613" width="2.9" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="903.18" y="623.5" ></text>
</g>
<g >
<title>Query_block::record_join_nest_info(mem_root_deque&lt;TABLE_LIST*&gt;*) (1 samples, 0.25%)</title><rect x="509.8" y="677" width="3.0" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="512.80" y="687.5" ></text>
</g>
<g >
<title>__kfree_skb (1 samples, 0.25%)</title><rect x="270.3" y="357" width="2.9" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="273.25" y="367.5" ></text>
</g>
<g >
<title>srv_purge_coordinator_thread() (2 samples, 0.50%)</title><rect x="172.7" y="821" width="5.9" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="175.66" y="831.5" ></text>
</g>
<g >
<title>binary_log::transaction::compression::Zstd_comp::compress(unsigned char const*, unsigned long) (19 samples, 4.76%)</title><rect x="997.8" y="629" width="56.2" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="1000.77" y="639.5" >binar..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (16 samples, 4.01%)</title><rect x="397.4" y="53" width="47.3" height="15.0" fill="rgb(54,169,169)" rx="2" ry="2" />
<text  x="400.42" y="63.5" >_raw..</text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::lookup() (1 samples, 0.25%)</title><rect x="681.3" y="533" width="3.0" height="15.0" fill="rgb(64,177,177)" rx="2" ry="2" />
<text  x="684.33" y="543.5" ></text>
</g>
<g >
<title>do_poll.constprop.0 (1 samples, 0.25%)</title><rect x="308.7" y="581" width="3.0" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="311.70" y="591.5" ></text>
</g>
<g >
<title>tls13_enc (1 samples, 0.25%)</title><rect x="477.3" y="597" width="2.9" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="480.27" y="607.5" ></text>
</g>
<g >
<title>mtr_t::Command::execute() (2 samples, 0.50%)</title><rect x="838.1" y="549" width="5.9" height="15.0" fill="rgb(90,201,201)" rx="2" ry="2" />
<text  x="841.07" y="559.5" ></text>
</g>
<g >
<title>trx_undo_update_cleanup(trx_t*, trx_undo_ptr_t*, unsigned char*, bool, unsigned long, mtr_t*) (3 samples, 0.75%)</title><rect x="861.7" y="549" width="8.9" height="15.0" fill="rgb(91,203,203)" rx="2" ry="2" />
<text  x="864.73" y="559.5" ></text>
</g>
<g >
<title>syscall_trace_enter.constprop.0 (1 samples, 0.25%)</title><rect x="116.5" y="805" width="2.9" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="119.47" y="815.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (3 samples, 0.75%)</title><rect x="107.6" y="709" width="8.9" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="110.59" y="719.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (2 samples, 0.50%)</title><rect x="314.6" y="517" width="5.9" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="317.61" y="527.5" ></text>
</g>
<g >
<title>blk_mq_submit_bio (1 samples, 0.25%)</title><rect x="237.7" y="581" width="3.0" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="240.72" y="591.5" ></text>
</g>
<g >
<title>log_command(THD*, enum_server_command) (1 samples, 0.25%)</title><rect x="489.1" y="757" width="3.0" height="15.0" fill="rgb(54,169,169)" rx="2" ry="2" />
<text  x="492.10" y="767.5" ></text>
</g>
<g >
<title>Write_rows_log_event::Write_rows_log_event(THD*, TABLE*, Table_id const&amp;, bool, unsigned char const*) (1 samples, 0.25%)</title><rect x="628.1" y="613" width="3.0" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="631.10" y="623.5" ></text>
</g>
<g >
<title>blk_mq_submit_bio (1 samples, 0.25%)</title><rect x="160.8" y="437" width="3.0" height="15.0" fill="rgb(101,212,212)" rx="2" ry="2" />
<text  x="163.83" y="447.5" ></text>
</g>
<g >
<title>ha_innobase::extra(ha_extra_function) (1 samples, 0.25%)</title><rect x="755.3" y="693" width="2.9" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="758.26" y="703.5" ></text>
</g>
<g >
<title>Sql_cmd_dml::prepare(THD*) (19 samples, 4.76%)</title><rect x="503.9" y="725" width="56.2" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="506.88" y="735.5" >Sql_c..</text>
</g>
<g >
<title>lock_table_dequeue(ib_lock_t*) (1 samples, 0.25%)</title><rect x="849.9" y="533" width="3.0" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="852.90" y="543.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (22 samples, 5.51%)</title><rect x="391.5" y="181" width="65.1" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="394.50" y="191.5" >ip_loca..</text>
</g>
<g >
<title>ext4_reserve_inode_write (2 samples, 0.50%)</title><rect x="799.6" y="421" width="5.9" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="802.62" y="431.5" ></text>
</g>
<g >
<title>pfn_valid (1 samples, 0.25%)</title><rect x="462.5" y="309" width="2.9" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="465.48" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.50%)</title><rect x="187.4" y="725" width="6.0" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="190.44" y="735.5" ></text>
</g>
<g >
<title>__wait_on_bit (1 samples, 0.25%)</title><rect x="799.6" y="341" width="3.0" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="802.62" y="351.5" ></text>
</g>
<g >
<title>__fget_light (1 samples, 0.25%)</title><rect x="305.7" y="565" width="3.0" height="15.0" fill="rgb(76,188,188)" rx="2" ry="2" />
<text  x="308.74" y="575.5" ></text>
</g>
<g >
<title>plugin_foreach_with_mask(THD*, bool (*)(THD*, st_plugin_int*, void*), int, unsigned int, void*) (1 samples, 0.25%)</title><rect x="817.4" y="645" width="2.9" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="820.37" y="655.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.50%)</title><rect x="187.4" y="741" width="6.0" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="190.44" y="751.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (1 samples, 0.25%)</title><rect x="477.3" y="517" width="2.9" height="15.0" fill="rgb(103,213,213)" rx="2" ry="2" />
<text  x="480.27" y="527.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (3 samples, 0.75%)</title><rect x="796.7" y="469" width="8.8" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="799.67" y="479.5" ></text>
</g>
<g >
<title>selinux_file_permission (1 samples, 0.25%)</title><rect x="471.4" y="421" width="2.9" height="15.0" fill="rgb(57,172,172)" rx="2" ry="2" />
<text  x="474.35" y="431.5" ></text>
</g>
<g >
<title>lex_one_token(Lexer_yystype*, THD*) (8 samples, 2.01%)</title><rect x="1157.5" y="693" width="23.6" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="1160.47" y="703.5" >l..</text>
</g>
<g >
<title>multadd(Bigint*, int, int, Stack_alloc*) (1 samples, 0.25%)</title><rect x="574.9" y="613" width="2.9" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="577.86" y="623.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (28 samples, 7.02%)</title><rect x="376.7" y="373" width="82.8" height="15.0" fill="rgb(65,178,178)" rx="2" ry="2" />
<text  x="379.72" y="383.5" >__tcp_pus..</text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.25%)</title><rect x="722.7" y="549" width="3.0" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="725.73" y="559.5" ></text>
</g>
<g >
<title>Double_write::prepare(buf_page_t const*, void**, unsigned int*) (2 samples, 0.50%)</title><rect x="163.8" y="677" width="5.9" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="166.78" y="687.5" ></text>
</g>
<g >
<title>iowrite16 (9 samples, 2.26%)</title><rect x="131.3" y="261" width="26.6" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="134.25" y="271.5" >i..</text>
</g>
<g >
<title>__tcp_transmit_skb (27 samples, 6.77%)</title><rect x="376.7" y="341" width="79.9" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="379.72" y="351.5" >__tcp_tra..</text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.25%)</title><rect x="858.8" y="533" width="2.9" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="861.77" y="543.5" ></text>
</g>
<g >
<title>kvm_clock_get_cycles (1 samples, 0.25%)</title><rect x="329.4" y="581" width="3.0" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="332.40" y="591.5" ></text>
</g>
<g >
<title>close_thread_table(THD*, TABLE**) (1 samples, 0.25%)</title><rect x="755.3" y="725" width="2.9" height="15.0" fill="rgb(102,213,213)" rx="2" ry="2" />
<text  x="758.26" y="735.5" ></text>
</g>
<g >
<title>Rpl_transaction_ctx::cleanup() (1 samples, 0.25%)</title><rect x="826.2" y="661" width="3.0" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="829.24" y="671.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (1 samples, 0.25%)</title><rect x="214.1" y="549" width="2.9" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="217.06" y="559.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.25%)</title><rect x="722.7" y="597" width="3.0" height="15.0" fill="rgb(79,192,192)" rx="2" ry="2" />
<text  x="725.73" y="607.5" ></text>
</g>
<g >
<title>blk_mq_rq_ctx_init.constprop.0.isra.0 (1 samples, 0.25%)</title><rect x="160.8" y="405" width="3.0" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="163.83" y="415.5" ></text>
</g>
<g >
<title>Log_event::write(Basic_ostream*) (1 samples, 0.25%)</title><rect x="583.7" y="645" width="3.0" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="586.73" y="655.5" ></text>
</g>
<g >
<title>vfs_write (11 samples, 2.76%)</title><rect x="131.3" y="565" width="32.5" height="15.0" fill="rgb(103,214,214)" rx="2" ry="2" />
<text  x="134.25" y="575.5" >vf..</text>
</g>
<g >
<title>MDL_context::release_locks_stored_before(enum_mdl_duration, MDL_ticket*) (1 samples, 0.25%)</title><rect x="498.0" y="741" width="2.9" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="500.97" y="751.5" ></text>
</g>
<g >
<title>virtio_queue_rq (9 samples, 2.26%)</title><rect x="131.3" y="325" width="26.6" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="134.25" y="335.5" >v..</text>
</g>
<g >
<title>mlog_write_ulint(unsigned char*, unsigned long, mlog_id_t, mtr_t*) (1 samples, 0.25%)</title><rect x="1068.7" y="629" width="3.0" height="15.0" fill="rgb(68,182,182)" rx="2" ry="2" />
<text  x="1071.75" y="639.5" ></text>
</g>
<g >
<title>check_grant(THD*, unsigned long, TABLE_LIST*, bool, unsigned int, bool) (2 samples, 0.50%)</title><rect x="536.4" y="677" width="5.9" height="15.0" fill="rgb(93,205,205)" rx="2" ry="2" />
<text  x="539.42" y="687.5" ></text>
</g>
<g >
<title>rec_get_offsets_func(unsigned char const*, dict_index_t const*, unsigned long*, unsigned long, mem_block_info_t**) (1 samples, 0.25%)</title><rect x="678.4" y="533" width="2.9" height="15.0" fill="rgb(69,182,182)" rx="2" ry="2" />
<text  x="681.37" y="543.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::flush_cache_to_file(unsigned long long*) (8 samples, 2.01%)</title><rect x="793.7" y="677" width="23.7" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="796.71" y="687.5" >M..</text>
</g>
<g >
<title>bwrite_conv (35 samples, 8.77%)</title><rect x="373.8" y="549" width="103.5" height="15.0" fill="rgb(80,192,192)" rx="2" ry="2" />
<text  x="376.76" y="559.5" >bwrite_conv</text>
</g>
<g >
<title>handle_connection (319 samples, 79.95%)</title><rect x="246.6" y="821" width="943.4" height="15.0" fill="rgb(108,219,219)" rx="2" ry="2" />
<text  x="249.59" y="831.5" >handle_connection</text>
</g>
<g >
<title>log_flush_notifier(log_t*) (1 samples, 0.25%)</title><rect x="184.5" y="821" width="2.9" height="15.0" fill="rgb(55,170,170)" rx="2" ry="2" />
<text  x="187.49" y="831.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info() (1 samples, 0.25%)</title><rect x="13.0" y="837" width="2.9" height="15.0" fill="rgb(79,192,192)" rx="2" ry="2" />
<text  x="15.96" y="847.5" ></text>
</g>
<g >
<title>FSE_compress_usingCTable_generic (3 samples, 0.75%)</title><rect x="980.0" y="501" width="8.9" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="983.03" y="511.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.25%)</title><rect x="681.3" y="565" width="3.0" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="684.33" y="575.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (1 samples, 0.25%)</title><rect x="468.4" y="373" width="3.0" height="15.0" fill="rgb(91,203,203)" rx="2" ry="2" />
<text  x="471.40" y="383.5" ></text>
</g>
<g >
<title>inet6_recvmsg (3 samples, 0.75%)</title><rect x="270.3" y="421" width="8.8" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="273.25" y="431.5" ></text>
</g>
<g >
<title>Item::save_in_field(Field*, bool) (4 samples, 1.00%)</title><rect x="566.0" y="677" width="11.8" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="568.99" y="687.5" ></text>
</g>
<g >
<title>invoke_table_check_constraints(THD*, TABLE const*) (1 samples, 0.25%)</title><rect x="734.6" y="725" width="2.9" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="737.56" y="735.5" ></text>
</g>
<g >
<title>binlog_cache_data::write_event(Log_event*) (1 samples, 0.25%)</title><rect x="601.5" y="645" width="2.9" height="15.0" fill="rgb(78,190,190)" rx="2" ry="2" />
<text  x="604.48" y="655.5" ></text>
</g>
<g >
<title>ext4_do_update_inode.isra.0 (1 samples, 0.25%)</title><rect x="208.1" y="501" width="3.0" height="15.0" fill="rgb(65,179,179)" rx="2" ry="2" />
<text  x="211.15" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10 samples, 2.51%)</title><rect x="302.8" y="661" width="29.6" height="15.0" fill="rgb(69,183,183)" rx="2" ry="2" />
<text  x="305.78" y="671.5" >en..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.25%)</title><rect x="719.8" y="629" width="2.9" height="15.0" fill="rgb(83,196,196)" rx="2" ry="2" />
<text  x="722.77" y="639.5" ></text>
</g>
<g >
<title>blk_flush_plug (9 samples, 2.26%)</title><rect x="131.3" y="469" width="26.6" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="134.25" y="479.5" >b..</text>
</g>
<g >
<title>MYSQL_BIN_LOG::commit(THD*, bool) (2 samples, 0.50%)</title><rect x="1077.6" y="725" width="5.9" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="1080.62" y="735.5" ></text>
</g>
<g >
<title>log_writer(log_t*) (11 samples, 2.76%)</title><rect x="196.3" y="821" width="32.5" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="199.32" y="831.5" >lo..</text>
</g>
<g >
<title>syscall_exit_work (1 samples, 0.25%)</title><rect x="474.3" y="469" width="3.0" height="15.0" fill="rgb(103,214,214)" rx="2" ry="2" />
<text  x="477.31" y="479.5" ></text>
</g>
<g >
<title>vfs_write (1 samples, 0.25%)</title><rect x="222.9" y="645" width="3.0" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="225.93" y="655.5" ></text>
</g>
<g >
<title>blk_mq_get_request (1 samples, 0.25%)</title><rect x="237.7" y="565" width="3.0" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="240.72" y="575.5" ></text>
</g>
<g >
<title>schedule (2 samples, 0.50%)</title><rect x="314.6" y="565" width="5.9" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="317.61" y="575.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.25%)</title><rect x="27.7" y="517" width="3.0" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="30.74" y="527.5" ></text>
</g>
<g >
<title>SSL_read (15 samples, 3.76%)</title><rect x="255.5" y="693" width="44.3" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="258.46" y="703.5" >SSL_..</text>
</g>
<g >
<title>skb_copy_datagram_iter (1 samples, 0.25%)</title><rect x="273.2" y="373" width="3.0" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="276.21" y="383.5" ></text>
</g>
<g >
<title>ssl_should_retry(Vio*, int, enum_vio_io_event*, unsigned long*) [clone .isra.1] (1 samples, 0.25%)</title><rect x="299.8" y="693" width="3.0" height="15.0" fill="rgb(78,191,191)" rx="2" ry="2" />
<text  x="302.82" y="703.5" ></text>
</g>
<g >
<title>check_trx_exists(THD*) (1 samples, 0.25%)</title><rect x="740.5" y="677" width="2.9" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="743.48" y="687.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.25%)</title><rect x="1059.9" y="629" width="2.9" height="15.0" fill="rgb(55,170,170)" rx="2" ry="2" />
<text  x="1062.87" y="639.5" ></text>
</g>
<g >
<title>__GI___pthread_cond_broadcast (4 samples, 1.00%)</title><rect x="89.8" y="853" width="11.9" height="15.0" fill="rgb(67,180,180)" rx="2" ry="2" />
<text  x="92.85" y="863.5" ></text>
</g>
<g >
<title>Trans_delegate::after_commit(THD*, bool) (1 samples, 0.25%)</title><rect x="817.4" y="661" width="2.9" height="15.0" fill="rgb(77,189,189)" rx="2" ry="2" />
<text  x="820.37" y="671.5" ></text>
</g>
<g >
<title>blkdev_issue_flush (1 samples, 0.25%)</title><rect x="237.7" y="629" width="3.0" height="15.0" fill="rgb(69,183,183)" rx="2" ry="2" />
<text  x="240.72" y="639.5" ></text>
</g>
<g >
<title>generic_perform_write (4 samples, 1.00%)</title><rect x="805.5" y="501" width="11.9" height="15.0" fill="rgb(102,212,212)" rx="2" ry="2" />
<text  x="808.54" y="511.5" ></text>
</g>
<g >
<title>trx_purge_truncate_history(purge_iter_t*, ReadView const*) (1 samples, 0.25%)</title><rect x="175.6" y="789" width="3.0" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="178.61" y="799.5" ></text>
</g>
<g >
<title>__alloc_skb (1 samples, 0.25%)</title><rect x="459.5" y="341" width="3.0" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="462.52" y="351.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (3 samples, 0.75%)</title><rect x="107.6" y="693" width="8.9" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="110.59" y="703.5" ></text>
</g>
<g >
<title>__blk_mq_do_dispatch_sched (2 samples, 0.50%)</title><rect x="187.4" y="485" width="6.0" height="15.0" fill="rgb(89,200,200)" rx="2" ry="2" />
<text  x="190.44" y="495.5" ></text>
</g>
<g >
<title>trx_undo_assign_undo(trx_t*, trx_undo_ptr_t*, unsigned long) (2 samples, 0.50%)</title><rect x="669.5" y="565" width="5.9" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="672.50" y="575.5" ></text>
</g>
<g >
<title>locksys::Latches::Page_shards::get_shard(page_id_t const&amp;) (1 samples, 0.25%)</title><rect x="648.8" y="549" width="3.0" height="15.0" fill="rgb(81,194,194)" rx="2" ry="2" />
<text  x="651.80" y="559.5" ></text>
</g>
<g >
<title>IO_CACHE_binlog_cache_storage::write(unsigned char const*, unsigned long long) (1 samples, 0.25%)</title><rect x="613.3" y="581" width="3.0" height="15.0" fill="rgb(66,179,179)" rx="2" ry="2" />
<text  x="616.31" y="591.5" ></text>
</g>
<g >
<title>_copy_from_user (1 samples, 0.25%)</title><rect x="302.8" y="597" width="2.9" height="15.0" fill="rgb(104,215,215)" rx="2" ry="2" />
<text  x="305.78" y="607.5" ></text>
</g>
<g >
<title>tcp_recvmsg_locked (3 samples, 0.75%)</title><rect x="270.3" y="389" width="8.8" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="273.25" y="399.5" ></text>
</g>
<g >
<title>kvm_clock_get_cycles (1 samples, 0.25%)</title><rect x="276.2" y="325" width="2.9" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="279.17" y="335.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.25%)</title><rect x="808.5" y="437" width="3.0" height="15.0" fill="rgb(54,168,168)" rx="2" ry="2" />
<text  x="811.50" y="447.5" ></text>
</g>
<g >
<title>kvm_clock_get_cycles (1 samples, 0.25%)</title><rect x="160.8" y="373" width="3.0" height="15.0" fill="rgb(69,182,182)" rx="2" ry="2" />
<text  x="163.83" y="383.5" ></text>
</g>
<g >
<title>trx_undo_set_state_at_finish(trx_undo_t*, mtr_t*) (1 samples, 0.25%)</title><rect x="858.8" y="549" width="2.9" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="861.77" y="559.5" ></text>
</g>
<g >
<title>Trans_delegate::before_commit(THD*, bool, Binlog_cache_storage*, Binlog_cache_storage*, unsigned long long, bool) (1 samples, 0.25%)</title><rect x="926.8" y="693" width="2.9" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="929.79" y="703.5" ></text>
</g>
<g >
<title>ha_prepare_low(THD*, bool) (1 samples, 0.25%)</title><rect x="1092.4" y="709" width="3.0" height="15.0" fill="rgb(91,203,203)" rx="2" ry="2" />
<text  x="1095.41" y="719.5" ></text>
</g>
<g >
<title>HIST_count_simple (1 samples, 0.25%)</title><rect x="950.5" y="533" width="2.9" height="15.0" fill="rgb(55,170,170)" rx="2" ry="2" />
<text  x="953.45" y="543.5" ></text>
</g>
<g >
<title>iomap_dio_rw (21 samples, 5.26%)</title><rect x="27.7" y="725" width="62.1" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="30.74" y="735.5" >iomap_..</text>
</g>
<g >
<title>tcp_rcv_space_adjust (1 samples, 0.25%)</title><rect x="276.2" y="373" width="2.9" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="279.17" y="383.5" ></text>
</g>
<g >
<title>Table_map_log_event::init_metadata_fields() (3 samples, 0.75%)</title><rect x="589.6" y="629" width="8.9" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="592.65" y="639.5" ></text>
</g>
<g >
<title>Sql_cmd_dml::execute(THD*) (84 samples, 21.05%)</title><rect x="503.9" y="741" width="248.4" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="506.88" y="751.5" >Sql_cmd_dml::execute(THD*)</text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, long&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, long&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, long&gt; &gt; &gt;::_M_erase(std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, long&gt; &gt;*) (1 samples, 0.25%)</title><rect x="912.0" y="469" width="3.0" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="915.01" y="479.5" ></text>
</g>
<g >
<title>current_time (1 samples, 0.25%)</title><rect x="24.8" y="709" width="2.9" height="15.0" fill="rgb(80,192,192)" rx="2" ry="2" />
<text  x="27.79" y="719.5" ></text>
</g>
<g >
<title>__write (8 samples, 2.01%)</title><rect x="793.7" y="613" width="23.7" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="796.71" y="623.5" >_..</text>
</g>
<g >
<title>Sql_cmd_insert_values::execute_inner(THD*) (59 samples, 14.79%)</title><rect x="560.1" y="725" width="174.5" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="563.08" y="735.5" >Sql_cmd_insert_values:..</text>
</g>
<g >
<title>tcp_sendmsg (32 samples, 8.02%)</title><rect x="376.7" y="405" width="94.7" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="379.72" y="415.5" >tcp_sendmsg</text>
</g>
<g >
<title>mysql_unlock_tables(THD*, MYSQL_LOCK*) (1 samples, 0.25%)</title><rect x="758.2" y="725" width="3.0" height="15.0" fill="rgb(54,169,169)" rx="2" ry="2" />
<text  x="761.22" y="735.5" ></text>
</g>
<g >
<title>MDL_context::acquire_lock(MDL_request*, unsigned long) (2 samples, 0.50%)</title><rect x="773.0" y="709" width="5.9" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="776.01" y="719.5" ></text>
</g>
<g >
<title>THD::sql_parser() (27 samples, 6.77%)</title><rect x="1104.2" y="741" width="79.9" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="1107.24" y="751.5" >THD::sql_..</text>
</g>
<g >
<title>__blk_mq_run_hw_queue (9 samples, 2.26%)</title><rect x="131.3" y="405" width="26.6" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="134.25" y="415.5" >_..</text>
</g>
<g >
<title>__x64_sys_read (1 samples, 0.25%)</title><rect x="267.3" y="485" width="3.0" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="270.29" y="495.5" ></text>
</g>
<g >
<title>iowrite16 (18 samples, 4.51%)</title><rect x="30.7" y="469" width="53.2" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="33.70" y="479.5" >iowri..</text>
</g>
<g >
<title>log_flusher(log_t*) (2 samples, 0.50%)</title><rect x="187.4" y="821" width="6.0" height="15.0" fill="rgb(82,194,194)" rx="2" ry="2" />
<text  x="190.44" y="831.5" ></text>
</g>
<g >
<title>ip_protocol_deliver_rcu (22 samples, 5.51%)</title><rect x="391.5" y="165" width="65.1" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="394.50" y="175.5" >ip_prot..</text>
</g>
<g >
<title>mysql_execute_command(THD*, bool) (206 samples, 51.63%)</title><rect x="492.1" y="757" width="609.2" height="15.0" fill="rgb(105,216,216)" rx="2" ry="2" />
<text  x="495.06" y="767.5" >mysql_execute_command(THD*, bool)</text>
</g>
<g >
<title>tcp_event_data_recv (1 samples, 0.25%)</title><rect x="453.6" y="101" width="3.0" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="456.61" y="111.5" ></text>
</g>
<g >
<title>__blk_mq_run_hw_queue (19 samples, 4.76%)</title><rect x="27.7" y="613" width="56.2" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="30.74" y="623.5" >__blk..</text>
</g>
<g >
<title>syscall_exit_work (1 samples, 0.25%)</title><rect x="288.0" y="453" width="3.0" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="290.99" y="463.5" ></text>
</g>
<g >
<title>exit_to_user_mode_loop (1 samples, 0.25%)</title><rect x="341.2" y="661" width="3.0" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="344.23" y="671.5" ></text>
</g>
<g >
<title>try_to_wake_up (3 samples, 0.75%)</title><rect x="92.8" y="741" width="8.9" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="95.81" y="751.5" ></text>
</g>
<g >
<title>ssl_write_internal (46 samples, 11.53%)</title><rect x="347.1" y="661" width="136.1" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="350.14" y="671.5" >ssl_write_internal</text>
</g>
<g >
<title>[unknown] (27 samples, 6.77%)</title><rect x="10.0" y="853" width="79.8" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="13.00" y="863.5" >[unknown]</text>
</g>
<g >
<title>ext4_mark_iloc_dirty (2 samples, 0.50%)</title><rect x="208.1" y="533" width="6.0" height="15.0" fill="rgb(82,194,194)" rx="2" ry="2" />
<text  x="211.15" y="543.5" ></text>
</g>
<g >
<title>blk_mq_sched_insert_requests (9 samples, 2.26%)</title><rect x="131.3" y="437" width="26.6" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="134.25" y="447.5" >b..</text>
</g>
<g >
<title>new_sync_read (3 samples, 0.75%)</title><rect x="270.3" y="453" width="8.8" height="15.0" fill="rgb(101,212,212)" rx="2" ry="2" />
<text  x="273.25" y="463.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (1 samples, 0.25%)</title><rect x="882.4" y="485" width="3.0" height="15.0" fill="rgb(76,188,188)" rx="2" ry="2" />
<text  x="885.43" y="495.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (1 samples, 0.25%)</title><rect x="722.7" y="581" width="3.0" height="15.0" fill="rgb(54,169,169)" rx="2" ry="2" />
<text  x="725.73" y="591.5" ></text>
</g>
<g >
<title>do_futex (4 samples, 1.00%)</title><rect x="104.6" y="789" width="11.9" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="107.64" y="799.5" ></text>
</g>
<g >
<title>THD::convert_string(MYSQL_LEX_STRING*, CHARSET_INFO const*, char const*, unsigned long, CHARSET_INFO const*, bool) (1 samples, 0.25%)</title><rect x="1181.1" y="709" width="3.0" height="15.0" fill="rgb(65,179,179)" rx="2" ry="2" />
<text  x="1184.13" y="719.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(Clone_persist_gtid*), Clone_persist_gtid*&gt; &gt; &gt;::_M_run() (1 samples, 0.25%)</title><rect x="181.5" y="837" width="3.0" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="184.53" y="847.5" ></text>
</g>
<g >
<title>Query_log_event::write(Basic_ostream*) (1 samples, 0.25%)</title><rect x="613.3" y="613" width="3.0" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="616.31" y="623.5" ></text>
</g>
<g >
<title>page_cur_search_with_match_bytes(buf_block_t const*, dict_index_t const*, dtuple_t const*, page_cur_mode_t, unsigned long*, unsigned long*, unsigned long*, unsigned long*, page_cur_t*) (3 samples, 0.75%)</title><rect x="702.0" y="581" width="8.9" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="705.03" y="591.5" ></text>
</g>
<g >
<title>Log_event::Log_event(THD*, unsigned short, Log_event::enum_event_cache_type, Log_event::enum_event_logging_type, binary_log::Log_event_header*, binary_log::Log_event_footer*) (1 samples, 0.25%)</title><rect x="580.8" y="645" width="2.9" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="583.78" y="655.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (3 samples, 0.75%)</title><rect x="92.8" y="725" width="8.9" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="95.81" y="735.5" ></text>
</g>
<g >
<title>exit_to_user_mode_loop (1 samples, 0.25%)</title><rect x="477.3" y="501" width="2.9" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="480.27" y="511.5" ></text>
</g>
<g >
<title>locksys::Global_shared_latch_guard::Global_shared_latch_guard(ut::Location) (1 samples, 0.25%)</title><rect x="852.9" y="533" width="2.9" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="855.86" y="543.5" ></text>
</g>
<g >
<title>ktime_get_ts64 (1 samples, 0.25%)</title><rect x="329.4" y="613" width="3.0" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="332.40" y="623.5" ></text>
</g>
<g >
<title>Query_log_event::get_post_header_size_for_derived() (1 samples, 0.25%)</title><rect x="610.4" y="613" width="2.9" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="613.35" y="623.5" ></text>
</g>
<g >
<title>__skb_datagram_iter (1 samples, 0.25%)</title><rect x="273.2" y="357" width="3.0" height="15.0" fill="rgb(93,205,205)" rx="2" ry="2" />
<text  x="276.21" y="367.5" ></text>
</g>
<g >
<title>trx_purge_add_update_undo_to_history(trx_t*, trx_undo_ptr_t*, unsigned char*, bool, unsigned long, mtr_t*) (1 samples, 0.25%)</title><rect x="855.8" y="549" width="3.0" height="15.0" fill="rgb(67,180,180)" rx="2" ry="2" />
<text  x="858.81" y="559.5" ></text>
</g>
<g >
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (1 samples, 0.25%)</title><rect x="539.4" y="629" width="2.9" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="542.37" y="639.5" ></text>
</g>
<g >
<title>binary_log::transaction::compression::Zstd_comp::close() (20 samples, 5.01%)</title><rect x="932.7" y="661" width="59.2" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="935.71" y="671.5" >binary..</text>
</g>
<g >
<title>tcp_ack (3 samples, 0.75%)</title><rect x="444.7" y="101" width="8.9" height="15.0" fill="rgb(92,203,203)" rx="2" ry="2" />
<text  x="447.74" y="111.5" ></text>
</g>
<g >
<title>iomap_dio_rw (11 samples, 2.76%)</title><rect x="131.3" y="517" width="32.5" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="134.25" y="527.5" >io..</text>
</g>
<g >
<title>vp_notify (9 samples, 2.26%)</title><rect x="131.3" y="293" width="26.6" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="134.25" y="303.5" >v..</text>
</g>
<g >
<title>vfs_read (5 samples, 1.25%)</title><rect x="270.3" y="469" width="14.7" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="273.25" y="479.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.25%)</title><rect x="858.8" y="517" width="2.9" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="861.77" y="527.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::_M_run() (16 samples, 4.01%)</title><rect x="184.5" y="837" width="47.3" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="187.49" y="847.5" >std:..</text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (1 samples, 0.25%)</title><rect x="882.4" y="517" width="3.0" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="885.43" y="527.5" ></text>
</g>
<g >
<title>submit_bio_noacct (1 samples, 0.25%)</title><rect x="237.7" y="597" width="3.0" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="240.72" y="607.5" ></text>
</g>
<g >
<title>void ut_list_remove&lt;ut_list_base&lt;ib_lock_t, ib_lock_t_trx_locks_node_getter&gt; &gt;(ut_list_base&lt;ib_lock_t, ib_lock_t_trx_locks_node_getter&gt;&amp;, ut_list_base&lt;ib_lock_t, ib_lock_t_trx_locks_node_getter&gt;::elem_type*) (1 samples, 0.25%)</title><rect x="849.9" y="517" width="3.0" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="852.90" y="527.5" ></text>
</g>
<g >
<title>os_file_write_retry(IORequest&amp;, char const*, pfs_os_file_t, void const*, unsigned long, unsigned long) (11 samples, 2.76%)</title><rect x="131.3" y="677" width="32.5" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="134.25" y="687.5" >os..</text>
</g>
<g >
<title>wake_up_q (3 samples, 0.75%)</title><rect x="92.8" y="757" width="8.9" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="95.81" y="767.5" ></text>
</g>
<g >
<title>__pthread_rwlock_rdlock (1 samples, 0.25%)</title><rect x="784.8" y="645" width="3.0" height="15.0" fill="rgb(59,174,174)" rx="2" ry="2" />
<text  x="787.84" y="655.5" ></text>
</g>
<g >
<title>innobase_xa_prepare(handlerton*, THD*, bool) (7 samples, 1.75%)</title><rect x="1056.9" y="693" width="20.7" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="1059.92" y="703.5" ></text>
</g>
<g >
<title>__audit_syscall_exit (1 samples, 0.25%)</title><rect x="474.3" y="453" width="3.0" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="477.31" y="463.5" ></text>
</g>
<g >
<title>Item_ident::walk(bool (Item::*)(unsigned char*), enum_walk, unsigned char*) (1 samples, 0.25%)</title><rect x="527.5" y="661" width="3.0" height="15.0" fill="rgb(78,191,191)" rx="2" ry="2" />
<text  x="530.54" y="671.5" ></text>
</g>
<g >
<title>do_command(THD*) (318 samples, 79.70%)</title><rect x="246.6" y="805" width="940.4" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="249.59" y="815.5" >do_command(THD*)</text>
</g>
<g >
<title>binlog_cache_data::write_event(Log_event*) (1 samples, 0.25%)</title><rect x="563.0" y="677" width="3.0" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="566.03" y="687.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.25%)</title><rect x="175.6" y="741" width="3.0" height="15.0" fill="rgb(71,185,185)" rx="2" ry="2" />
<text  x="178.61" y="751.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 1.00%)</title><rect x="89.8" y="837" width="11.9" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="92.85" y="847.5" ></text>
</g>
<g >
<title>unroll_tree_refs (1 samples, 0.25%)</title><rect x="474.3" y="421" width="3.0" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="477.31" y="431.5" ></text>
</g>
<g >
<title>copy_user_generic_string (1 samples, 0.25%)</title><rect x="465.4" y="341" width="3.0" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="468.44" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, long&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, long&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, long&gt; &gt; &gt;::_M_erase(std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, long&gt; &gt;*) (1 samples, 0.25%)</title><rect x="912.0" y="501" width="3.0" height="15.0" fill="rgb(106,217,217)" rx="2" ry="2" />
<text  x="915.01" y="511.5" ></text>
</g>
<g >
<title>wbt_wait (1 samples, 0.25%)</title><rect x="237.7" y="517" width="3.0" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="240.72" y="527.5" ></text>
</g>
<g >
<title>rec_get_offsets_func(unsigned char const*, dict_index_t const*, unsigned long*, unsigned long, mem_block_info_t**) (2 samples, 0.50%)</title><rect x="654.7" y="549" width="5.9" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="657.71" y="559.5" ></text>
</g>
<g >
<title>ext4_fill_raw_inode (1 samples, 0.25%)</title><rect x="211.1" y="501" width="3.0" height="15.0" fill="rgb(82,195,195)" rx="2" ry="2" />
<text  x="214.10" y="511.5" ></text>
</g>
<g >
<title>trx_undo_insert_header_reuse(unsigned char*, unsigned long, mtr_t*) (1 samples, 0.25%)</title><rect x="675.4" y="565" width="3.0" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="678.41" y="575.5" ></text>
</g>
<g >
<title>ZSTD_compressStream2 (20 samples, 5.01%)</title><rect x="932.7" y="629" width="59.2" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="935.71" y="639.5" >ZSTD_c..</text>
</g>
<g >
<title>fil_io(IORequest const&amp;, bool, page_id_t const&amp;, page_size_t const&amp;, unsigned long, unsigned long, void*, void*) (1 samples, 0.25%)</title><rect x="169.7" y="677" width="3.0" height="15.0" fill="rgb(54,168,168)" rx="2" ry="2" />
<text  x="172.70" y="687.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.25%)</title><rect x="858.8" y="501" width="2.9" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="861.77" y="511.5" ></text>
</g>
<g >
<title>do_get_write_access (1 samples, 0.25%)</title><rect x="799.6" y="373" width="3.0" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="802.62" y="383.5" ></text>
</g>
<g >
<title>trx_prepare_low(trx_t*, trx_undo_ptr_t*, bool) (1 samples, 0.25%)</title><rect x="1074.7" y="677" width="2.9" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="1077.66" y="687.5" ></text>
</g>
<g >
<title>__GI___pwrite (8 samples, 2.01%)</title><rect x="202.2" y="725" width="23.7" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="205.23" y="735.5" >_..</text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, long&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, long&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, long&gt; &gt; &gt;::_M_erase(std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, long&gt; &gt;*) (1 samples, 0.25%)</title><rect x="912.0" y="581" width="3.0" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="915.01" y="591.5" ></text>
</g>
<g >
<title>vio_timeout(Vio*, unsigned int, int) (1 samples, 0.25%)</title><rect x="1187.0" y="805" width="3.0" height="15.0" fill="rgb(56,171,171)" rx="2" ry="2" />
<text  x="1190.04" y="815.5" ></text>
</g>
<g >
<title>rec_init_offsets_comp_ordinary(unsigned char const*, bool, dict_index_t const*, unsigned long*) (1 samples, 0.25%)</title><rect x="678.4" y="517" width="2.9" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="681.37" y="527.5" ></text>
</g>
<g >
<title>__schedule (3 samples, 0.75%)</title><rect x="107.6" y="725" width="8.9" height="15.0" fill="rgb(78,190,190)" rx="2" ry="2" />
<text  x="110.59" y="735.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (3 samples, 0.75%)</title><rect x="92.8" y="709" width="8.9" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="95.81" y="719.5" ></text>
</g>
<g >
<title>__blk_mq_sched_dispatch_requests (2 samples, 0.50%)</title><rect x="187.4" y="501" width="6.0" height="15.0" fill="rgb(78,190,190)" rx="2" ry="2" />
<text  x="190.44" y="511.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.25%)</title><rect x="876.5" y="549" width="3.0" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="879.52" y="559.5" ></text>
</g>
<g >
<title>mark_buffer_dirty (1 samples, 0.25%)</title><rect x="811.5" y="437" width="2.9" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="814.45" y="447.5" ></text>
</g>
<g >
<title>innobase_commit_low(trx_t*) (23 samples, 5.76%)</title><rect x="829.2" y="629" width="68.0" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="832.20" y="639.5" >innobas..</text>
</g>
<g >
<title>lock_trx_release_locks(trx_t*) (1 samples, 0.25%)</title><rect x="835.1" y="565" width="3.0" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="838.11" y="575.5" ></text>
</g>
<g >
<title>read (8 samples, 2.01%)</title><rect x="267.3" y="533" width="23.7" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="270.29" y="543.5" >r..</text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, long&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, long&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, long&gt; &gt; &gt;::_M_erase(std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, long&gt; &gt;*) (1 samples, 0.25%)</title><rect x="912.0" y="517" width="3.0" height="15.0" fill="rgb(94,206,206)" rx="2" ry="2" />
<text  x="915.01" y="527.5" ></text>
</g>
<g >
<title>down_write (1 samples, 0.25%)</title><rect x="205.2" y="597" width="2.9" height="15.0" fill="rgb(103,214,214)" rx="2" ry="2" />
<text  x="208.19" y="607.5" ></text>
</g>
<g >
<title>__hrtimer_init (1 samples, 0.25%)</title><rect x="311.7" y="565" width="2.9" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="314.65" y="575.5" ></text>
</g>
<g >
<title>unroll_tree_refs (1 samples, 0.25%)</title><rect x="285.0" y="421" width="3.0" height="15.0" fill="rgb(93,205,205)" rx="2" ry="2" />
<text  x="288.04" y="431.5" ></text>
</g>
<g >
<title>out_of_line_wait_on_bit (1 samples, 0.25%)</title><rect x="799.6" y="357" width="3.0" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="802.62" y="367.5" ></text>
</g>
<g >
<title>Item_field::set_field(Field*) (1 samples, 0.25%)</title><rect x="518.7" y="645" width="2.9" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="521.67" y="655.5" ></text>
</g>
<g >
<title>open_table(THD*, TABLE_LIST*, Open_table_context*) (4 samples, 1.00%)</title><rect x="548.2" y="677" width="11.9" height="15.0" fill="rgb(72,186,186)" rx="2" ry="2" />
<text  x="551.25" y="687.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::process_flush_stage_queue(unsigned long long*, bool*, THD**) (8 samples, 2.01%)</title><rect x="900.2" y="677" width="23.6" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="903.18" y="687.5" >M..</text>
</g>
<g >
<title>HUF_compress_internal (12 samples, 3.01%)</title><rect x="956.4" y="533" width="35.5" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="959.37" y="543.5" >HUF..</text>
</g>
<g >
<title>row_ins_step(que_thr_t*) (27 samples, 6.77%)</title><rect x="639.9" y="645" width="79.9" height="15.0" fill="rgb(56,170,170)" rx="2" ry="2" />
<text  x="642.92" y="655.5" >row_ins_s..</text>
</g>
<g >
<title>__softirqentry_text_start (24 samples, 6.02%)</title><rect x="385.6" y="261" width="71.0" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="388.59" y="271.5" >__softir..</text>
</g>
<g >
<title>trx_commit_low(trx_t*, mtr_t*) (14 samples, 3.51%)</title><rect x="832.2" y="581" width="41.4" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="835.16" y="591.5" >trx..</text>
</g>
<g >
<title>fil_aio_wait(unsigned long) (5 samples, 1.25%)</title><rect x="231.8" y="805" width="14.8" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="234.80" y="815.5" ></text>
</g>
<g >
<title>vio_socket_io_wait(Vio*, enum_vio_io_event) (11 samples, 2.76%)</title><rect x="302.8" y="693" width="32.5" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="305.78" y="703.5" >vi..</text>
</g>
<g >
<title>Table_map_log_event::save_field_metadata() (1 samples, 0.25%)</title><rect x="598.5" y="645" width="3.0" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="601.52" y="655.5" ></text>
</g>
<g >
<title>__x64_sys_fsync (1 samples, 0.25%)</title><rect x="237.7" y="661" width="3.0" height="15.0" fill="rgb(103,213,213)" rx="2" ry="2" />
<text  x="240.72" y="671.5" ></text>
</g>
<g >
<title>net_send_ok(THD*, unsigned int, unsigned int, unsigned long long, unsigned long long, char const*, bool) (48 samples, 12.03%)</title><rect x="341.2" y="741" width="142.0" height="15.0" fill="rgb(79,191,191)" rx="2" ry="2" />
<text  x="344.23" y="751.5" >net_send_ok(THD*, ..</text>
</g>
<g >
<title>mlog_log_string(unsigned char*, unsigned long, mtr_t*) (1 samples, 0.25%)</title><rect x="1065.8" y="629" width="2.9" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="1068.79" y="639.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (1 samples, 0.25%)</title><rect x="1048.0" y="501" width="3.0" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="1051.05" y="511.5" ></text>
</g>
<g >
<title>__kfree_skb (1 samples, 0.25%)</title><rect x="270.3" y="373" width="2.9" height="15.0" fill="rgb(102,212,212)" rx="2" ry="2" />
<text  x="273.25" y="383.5" ></text>
</g>
<g >
<title>sk_stream_alloc_skb (1 samples, 0.25%)</title><rect x="459.5" y="373" width="3.0" height="15.0" fill="rgb(79,192,192)" rx="2" ry="2" />
<text  x="462.52" y="383.5" ></text>
</g>
<g >
<title>write_record(THD*, TABLE*, COPY_INFO*, COPY_INFO*) (53 samples, 13.28%)</title><rect x="577.8" y="709" width="156.8" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="580.82" y="719.5" >write_record(THD*, T..</text>
</g>
<g >
<title>unroll_tree_refs (1 samples, 0.25%)</title><rect x="285.0" y="437" width="3.0" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="288.04" y="447.5" ></text>
</g>
<g >
<title>virtqueue_notify (9 samples, 2.26%)</title><rect x="131.3" y="309" width="26.6" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="134.25" y="319.5" >v..</text>
</g>
<g >
<title>__mark_inode_dirty (3 samples, 0.75%)</title><rect x="208.1" y="581" width="8.9" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="211.15" y="591.5" ></text>
</g>
<g >
<title>__blk_mq_delay_run_hw_queue (2 samples, 0.50%)</title><rect x="187.4" y="549" width="6.0" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="190.44" y="559.5" ></text>
</g>
<g >
<title>trx_undo_report_row_operation(unsigned long, unsigned long, que_thr_t*, dict_index_t*, dtuple_t const*, upd_t const*, unsigned long, unsigned char const*, unsigned long const*, unsigned long*) (1 samples, 0.25%)</title><rect x="713.9" y="597" width="2.9" height="15.0" fill="rgb(68,182,182)" rx="2" ry="2" />
<text  x="716.86" y="607.5" ></text>
</g>
<g >
<title>Protocol_classic::send_ok(unsigned int, unsigned int, unsigned long long, unsigned long long, char const*) (48 samples, 12.03%)</title><rect x="341.2" y="757" width="142.0" height="15.0" fill="rgb(64,177,177)" rx="2" ry="2" />
<text  x="344.23" y="767.5" >Protocol_classic::..</text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, long&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, long&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, long&gt; &gt; &gt;::_M_erase(std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, long&gt; &gt;*) (1 samples, 0.25%)</title><rect x="912.0" y="421" width="3.0" height="15.0" fill="rgb(68,181,181)" rx="2" ry="2" />
<text  x="915.01" y="431.5" ></text>
</g>
<g >
<title>ssl3_read (14 samples, 3.51%)</title><rect x="258.4" y="661" width="41.4" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="261.42" y="671.5" >ssl..</text>
</g>
<g >
<title>net_read_raw_loop(NET*, unsigned long) (28 samples, 7.02%)</title><rect x="252.5" y="725" width="82.8" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="255.51" y="735.5" >net_read_..</text>
</g>
<g >
<title>EVP_CIPHER_CTX_iv_length (1 samples, 0.25%)</title><rect x="258.4" y="597" width="3.0" height="15.0" fill="rgb(51,165,165)" rx="2" ry="2" />
<text  x="261.42" y="607.5" ></text>
</g>
<g >
<title>Field_str::repertoire() const (1 samples, 0.25%)</title><rect x="515.7" y="645" width="3.0" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="518.71" y="655.5" ></text>
</g>
<g >
<title>my_timer_cycles() (1 samples, 0.25%)</title><rect x="891.3" y="565" width="3.0" height="15.0" fill="rgb(101,212,212)" rx="2" ry="2" />
<text  x="894.30" y="575.5" ></text>
</g>
<g >
<title>__audit_syscall_exit (1 samples, 0.25%)</title><rect x="719.8" y="549" width="2.9" height="15.0" fill="rgb(54,168,168)" rx="2" ry="2" />
<text  x="722.77" y="559.5" ></text>
</g>
<g >
<title>mtr_t::commit() (3 samples, 0.75%)</title><rect x="882.4" y="565" width="8.9" height="15.0" fill="rgb(82,195,195)" rx="2" ry="2" />
<text  x="885.43" y="575.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core.constprop.0 (1 samples, 0.25%)</title><rect x="388.5" y="165" width="3.0" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="391.55" y="175.5" ></text>
</g>
<g >
<title>__GI___pwrite (11 samples, 2.76%)</title><rect x="131.3" y="629" width="32.5" height="15.0" fill="rgb(92,203,203)" rx="2" ry="2" />
<text  x="134.25" y="639.5" >__..</text>
</g>
<g >
<title>handler::ha_write_row(unsigned char*) (53 samples, 13.28%)</title><rect x="577.8" y="693" width="156.8" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="580.82" y="703.5" >handler::ha_write_ro..</text>
</g>
<g >
<title>mlog_catenate_string(mtr_t*, unsigned char const*, unsigned long) (1 samples, 0.25%)</title><rect x="1062.8" y="629" width="3.0" height="15.0" fill="rgb(68,182,182)" rx="2" ry="2" />
<text  x="1065.83" y="639.5" ></text>
</g>
<g >
<title>blk_mq_flush_plug_list (2 samples, 0.50%)</title><rect x="187.4" y="581" width="6.0" height="15.0" fill="rgb(68,181,181)" rx="2" ry="2" />
<text  x="190.44" y="591.5" ></text>
</g>
<g >
<title>get_lock_data(THD*, TABLE**, unsigned long, unsigned int) (2 samples, 0.50%)</title><rect x="740.5" y="693" width="5.9" height="15.0" fill="rgb(80,192,192)" rx="2" ry="2" />
<text  x="743.48" y="703.5" ></text>
</g>
<g >
<title>fsp_reserve_free_extents(unsigned long*, unsigned int, unsigned long, fsp_reserve_t, mtr_t*, unsigned int) (1 samples, 0.25%)</title><rect x="879.5" y="565" width="2.9" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="882.47" y="575.5" ></text>
</g>
<g >
<title>Protocol_classic::parse_packet(COM_DATA*, enum_server_command) (1 samples, 0.25%)</title><rect x="249.5" y="773" width="3.0" height="15.0" fill="rgb(54,169,169)" rx="2" ry="2" />
<text  x="252.55" y="783.5" ></text>
</g>
<g >
<title>page_cur_search_with_match(buf_block_t const*, dict_index_t const*, dtuple_t const*, page_cur_mode_t, unsigned long*, unsigned long*, page_cur_t*, rtr_info*) (6 samples, 1.50%)</title><rect x="684.3" y="581" width="17.7" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="687.29" y="591.5" ></text>
</g>
<g >
<title>schedule (3 samples, 0.75%)</title><rect x="107.6" y="741" width="8.9" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="110.59" y="751.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (2 samples, 0.50%)</title><rect x="861.7" y="517" width="5.9" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="864.73" y="527.5" ></text>
</g>
<g >
<title>__alloc_skb (1 samples, 0.25%)</title><rect x="459.5" y="357" width="3.0" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="462.52" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, long&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, long&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, long&gt; &gt; &gt;::_M_erase(std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, long&gt; &gt;*) (1 samples, 0.25%)</title><rect x="912.0" y="597" width="3.0" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="915.01" y="607.5" ></text>
</g>
<g >
<title>__strcpy_avx2 (1 samples, 0.25%)</title><rect x="917.9" y="661" width="3.0" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="920.92" y="671.5" ></text>
</g>
<g >
<title>buf_page_hash_get_low(buf_pool_t*, page_id_t const&amp;) (1 samples, 0.25%)</title><rect x="861.7" y="469" width="3.0" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="864.73" y="479.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (4 samples, 1.00%)</title><rect x="104.6" y="757" width="11.9" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="107.64" y="767.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (1 samples, 0.25%)</title><rect x="474.3" y="485" width="3.0" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="477.31" y="495.5" ></text>
</g>
<g >
<title>syscall_exit_work (2 samples, 0.50%)</title><rect x="285.0" y="469" width="6.0" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="288.04" y="479.5" ></text>
</g>
<g >
<title>balance_dirty_pages_ratelimited (1 samples, 0.25%)</title><rect x="805.5" y="469" width="3.0" height="15.0" fill="rgb(56,170,170)" rx="2" ry="2" />
<text  x="808.54" y="479.5" ></text>
</g>
<g >
<title>cubictcp_acked (1 samples, 0.25%)</title><rect x="447.7" y="53" width="3.0" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="450.69" y="63.5" ></text>
</g>
<g >
<title>new_sync_write (7 samples, 1.75%)</title><rect x="796.7" y="533" width="20.7" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="799.67" y="543.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.25%)</title><rect x="104.6" y="725" width="3.0" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="107.64" y="735.5" ></text>
</g>
<g >
<title>page_cur_insert_rec_write_log(unsigned char*, unsigned long, unsigned char*, dict_index_t*, mtr_t*) (3 samples, 0.75%)</title><rect x="651.8" y="565" width="8.8" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="654.75" y="575.5" ></text>
</g>
<g >
<title>ksys_read (5 samples, 1.25%)</title><rect x="270.3" y="485" width="14.7" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="273.25" y="495.5" ></text>
</g>
<g >
<title>EVP_CIPHER_CTX_ctrl (1 samples, 0.25%)</title><rect x="293.9" y="565" width="3.0" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="296.91" y="575.5" ></text>
</g>
<g >
<title>ssl_read_internal (15 samples, 3.76%)</title><rect x="255.5" y="677" width="44.3" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="258.46" y="687.5" >ssl_..</text>
</g>
<g >
<title>BIO_write (36 samples, 9.02%)</title><rect x="370.8" y="581" width="106.5" height="15.0" fill="rgb(69,182,182)" rx="2" ry="2" />
<text  x="373.80" y="591.5" >BIO_write</text>
</g>
<g >
<title>__blk_mq_sched_dispatch_requests (19 samples, 4.76%)</title><rect x="27.7" y="581" width="56.2" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="30.74" y="591.5" >__blk..</text>
</g>
<g >
<title>cubictcp_acked (1 samples, 0.25%)</title><rect x="447.7" y="69" width="3.0" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="450.69" y="79.5" ></text>
</g>
<g >
<title>Field::pack_int32(unsigned char*, unsigned char const*, unsigned long) const (1 samples, 0.25%)</title><rect x="622.2" y="629" width="2.9" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="625.18" y="639.5" ></text>
</g>
<g >
<title>alloc_buffer_head (1 samples, 0.25%)</title><rect x="217.0" y="517" width="3.0" height="15.0" fill="rgb(84,197,197)" rx="2" ry="2" />
<text  x="220.02" y="527.5" ></text>
</g>
<g >
<title>page_cur_insert_rec_low(unsigned char*, dict_index_t*, unsigned char const*, unsigned long*, mtr_t*) (3 samples, 0.75%)</title><rect x="651.8" y="581" width="8.8" height="15.0" fill="rgb(103,214,214)" rx="2" ry="2" />
<text  x="654.75" y="591.5" ></text>
</g>
<g >
<title>gtid_reacquire_ownership_if_anonymous(THD*) (1 samples, 0.25%)</title><rect x="761.2" y="741" width="2.9" height="15.0" fill="rgb(100,210,210)" rx="2" ry="2" />
<text  x="764.18" y="751.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (2 samples, 0.50%)</title><rect x="285.0" y="485" width="6.0" height="15.0" fill="rgb(99,209,209)" rx="2" ry="2" />
<text  x="288.04" y="495.5" ></text>
</g>
<g >
<title>ext4_inode_csum_set (1 samples, 0.25%)</title><rect x="211.1" y="485" width="3.0" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="214.10" y="495.5" ></text>
</g>
<g >
<title>my_b_flush_io_cache(IO_CACHE*, int) (8 samples, 2.01%)</title><rect x="793.7" y="645" width="23.7" height="15.0" fill="rgb(91,202,202)" rx="2" ry="2" />
<text  x="796.71" y="655.5" >m..</text>
</g>
<g >
<title>balance_dirty_pages_ratelimited (1 samples, 0.25%)</title><rect x="805.5" y="485" width="3.0" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="808.54" y="495.5" ></text>
</g>
<g >
<title>net_read_packet(NET*, unsigned long*) (28 samples, 7.02%)</title><rect x="252.5" y="741" width="82.8" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="255.51" y="751.5" >net_read_..</text>
</g>
<g >
<title>Security_context::is_access_restricted_on_db(unsigned long, std::string const&amp;) const (1 samples, 0.25%)</title><rect x="533.5" y="645" width="2.9" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="536.46" y="655.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.25%)</title><rect x="1048.0" y="469" width="3.0" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="1051.05" y="479.5" ></text>
</g>
<g >
<title>ssl3_get_record (14 samples, 3.51%)</title><rect x="258.4" y="613" width="41.4" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="261.42" y="623.5" >ssl..</text>
</g>
<g >
<title>MYSQL_BIN_LOG::commit(THD*, bool) (93 samples, 23.31%)</title><rect x="781.9" y="709" width="275.0" height="15.0" fill="rgb(64,177,177)" rx="2" ry="2" />
<text  x="784.88" y="719.5" >MYSQL_BIN_LOG::commit(THD*, bool)</text>
</g>
<g >
<title>tcp_sendmsg_locked (32 samples, 8.02%)</title><rect x="376.7" y="389" width="94.7" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="379.72" y="399.5" >tcp_sendmsg..</text>
</g>
<g >
<title>flst_insert_before(unsigned char*, unsigned char*, unsigned char*, mtr_t*) (1 samples, 0.25%)</title><rect x="867.6" y="501" width="3.0" height="15.0" fill="rgb(106,217,217)" rx="2" ry="2" />
<text  x="870.64" y="511.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (3 samples, 0.75%)</title><rect x="796.7" y="453" width="8.8" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="799.67" y="463.5" ></text>
</g>
<g >
<title>__rq_qos_throttle (1 samples, 0.25%)</title><rect x="237.7" y="549" width="3.0" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="240.72" y="559.5" ></text>
</g>
<g >
<title>Commit_stage_manager::Mutex_queue::fetch_and_empty_acquire_lock() (1 samples, 0.25%)</title><rect x="790.8" y="677" width="2.9" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="793.75" y="687.5" ></text>
</g>
<g >
<title>tcp_recvmsg (3 samples, 0.75%)</title><rect x="270.3" y="405" width="8.8" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="273.25" y="415.5" ></text>
</g>
<g >
<title>vp_notify (2 samples, 0.50%)</title><rect x="187.4" y="421" width="6.0" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="190.44" y="431.5" ></text>
</g>
<g >
<title>file_update_time (1 samples, 0.25%)</title><rect x="24.8" y="725" width="2.9" height="15.0" fill="rgb(94,206,206)" rx="2" ry="2" />
<text  x="27.79" y="735.5" ></text>
</g>
<g >
<title>pfs_rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (2 samples, 0.50%)</title><rect x="669.5" y="517" width="5.9" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="672.50" y="527.5" ></text>
</g>
<g >
<title>ha_commit_trans(THD*, bool, bool) (5 samples, 1.25%)</title><rect x="1083.5" y="725" width="14.8" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="1086.53" y="735.5" ></text>
</g>
<g >
<title>do_syscall_64 (7 samples, 1.75%)</title><rect x="796.7" y="581" width="20.7" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="799.67" y="591.5" ></text>
</g>
<g >
<title>ZSTD_CCtx_init_compressStream2 (1 samples, 0.25%)</title><rect x="997.8" y="613" width="2.9" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="1000.77" y="623.5" ></text>
</g>
<g >
<title>hash_lock_s_confirm(rw_lock_t*, hash_table_t*, unsigned long) (1 samples, 0.25%)</title><rect x="681.3" y="517" width="3.0" height="15.0" fill="rgb(67,181,181)" rx="2" ry="2" />
<text  x="684.33" y="527.5" ></text>
</g>
<g >
<title>rec_convert_dtuple_to_rec(unsigned char*, dict_index_t const*, dtuple_t const*) (1 samples, 0.25%)</title><rect x="660.6" y="565" width="3.0" height="15.0" fill="rgb(54,169,169)" rx="2" ry="2" />
<text  x="663.63" y="575.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::flush_thread_caches(THD*) (5 samples, 1.25%)</title><rect x="903.1" y="661" width="14.8" height="15.0" fill="rgb(54,169,169)" rx="2" ry="2" />
<text  x="906.13" y="671.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::flush_and_set_pending_rows_event(THD*, Rows_log_event*, bool) (1 samples, 0.25%)</title><rect x="563.0" y="693" width="3.0" height="15.0" fill="rgb(78,191,191)" rx="2" ry="2" />
<text  x="566.03" y="703.5" ></text>
</g>
<g >
<title>row_ins_index_entry_set_vals(dict_index_t const*, dtuple_t*, dtuple_t const*) (1 samples, 0.25%)</title><rect x="716.8" y="629" width="3.0" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="719.82" y="639.5" ></text>
</g>
<g >
<title>fsnotify (1 samples, 0.25%)</title><rect x="279.1" y="421" width="3.0" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="282.12" y="431.5" ></text>
</g>
<g >
<title>bio_call_callback (1 samples, 0.25%)</title><rect x="264.3" y="549" width="3.0" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="267.34" y="559.5" ></text>
</g>
<g >
<title>Item_field::itemize(Parse_context*, Item**) (1 samples, 0.25%)</title><rect x="1110.2" y="677" width="2.9" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="1113.15" y="687.5" ></text>
</g>
<g >
<title>FSE_buildCTable_wksp (1 samples, 0.25%)</title><rect x="953.4" y="533" width="3.0" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="956.41" y="543.5" ></text>
</g>
<g >
<title>mtr_t::commit() (2 samples, 0.50%)</title><rect x="838.1" y="565" width="5.9" height="15.0" fill="rgb(82,194,194)" rx="2" ry="2" />
<text  x="841.07" y="575.5" ></text>
</g>
<g >
<title>mtr_t::Command::release_all() (1 samples, 0.25%)</title><rect x="888.3" y="549" width="3.0" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="891.35" y="559.5" ></text>
</g>
<g >
<title>buf_flush_page_coordinator_thread() (16 samples, 4.01%)</title><rect x="125.3" y="821" width="47.4" height="15.0" fill="rgb(102,213,213)" rx="2" ry="2" />
<text  x="128.34" y="831.5" >buf_..</text>
</g>
<g >
<title>ut_delay(unsigned long) (1 samples, 0.25%)</title><rect x="864.7" y="469" width="2.9" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="867.69" y="479.5" ></text>
</g>
<g >
<title>ZSTD_compressBlock_doubleFast (4 samples, 1.00%)</title><rect x="935.7" y="549" width="11.8" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="938.66" y="559.5" ></text>
</g>
<g >
<title>selinux_file_permission (1 samples, 0.25%)</title><rect x="282.1" y="421" width="2.9" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="285.08" y="431.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.25%)</title><rect x="175.6" y="757" width="3.0" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="178.61" y="767.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (1 samples, 0.25%)</title><rect x="252.5" y="661" width="3.0" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="255.51" y="671.5" ></text>
</g>
<g >
<title>dblwr::write(buf_flush_t, buf_page_t*, bool) (15 samples, 3.76%)</title><rect x="128.3" y="741" width="44.4" height="15.0" fill="rgb(79,192,192)" rx="2" ry="2" />
<text  x="131.30" y="751.5" >dblw..</text>
</g>
<g >
<title>bio_iov_iter_get_pages (1 samples, 0.25%)</title><rect x="83.9" y="661" width="3.0" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="86.93" y="671.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.25%)</title><rect x="394.5" y="53" width="2.9" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="397.46" y="63.5" ></text>
</g>
<g >
<title>blk_finish_plug (2 samples, 0.50%)</title><rect x="187.4" y="613" width="6.0" height="15.0" fill="rgb(65,179,179)" rx="2" ry="2" />
<text  x="190.44" y="623.5" ></text>
</g>
<g >
<title>find_field_in_tables(THD*, Item_ident*, TABLE_LIST*, TABLE_LIST*, Item**, find_item_error_report_type, unsigned long, bool) (1 samples, 0.25%)</title><rect x="521.6" y="645" width="3.0" height="15.0" fill="rgb(65,178,178)" rx="2" ry="2" />
<text  x="524.63" y="655.5" ></text>
</g>
<g >
<title>binlog_log_row(TABLE*, unsigned char const*, unsigned char const*, bool (*)(THD*, TABLE*, bool, unsigned char const*, unsigned char const*)) (20 samples, 5.01%)</title><rect x="577.8" y="677" width="59.2" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="580.82" y="687.5" >binlog..</text>
</g>
<g >
<title>ssl3_write (45 samples, 11.28%)</title><rect x="350.1" y="645" width="133.1" height="15.0" fill="rgb(103,214,214)" rx="2" ry="2" />
<text  x="353.10" y="655.5" >ssl3_write</text>
</g>
<g >
<title>__futex_abstimed_wait_common (6 samples, 1.50%)</title><rect x="101.7" y="853" width="17.7" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="104.68" y="863.5" ></text>
</g>
<g >
<title>COPY_INFO::get_function_default_columns(TABLE*) (1 samples, 0.25%)</title><rect x="560.1" y="709" width="2.9" height="15.0" fill="rgb(104,215,215)" rx="2" ry="2" />
<text  x="563.08" y="719.5" ></text>
</g>
<g >
<title>do_syscall_64 (10 samples, 2.51%)</title><rect x="302.8" y="645" width="29.6" height="15.0" fill="rgb(67,180,180)" rx="2" ry="2" />
<text  x="305.78" y="655.5" >do..</text>
</g>
<g >
<title>do_writepages (2 samples, 0.50%)</title><rect x="187.4" y="645" width="6.0" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="190.44" y="655.5" ></text>
</g>
<g >
<title>_copy_from_iter (1 samples, 0.25%)</title><rect x="465.4" y="357" width="3.0" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="468.44" y="367.5" ></text>
</g>
<g >
<title>virtqueue_notify (2 samples, 0.50%)</title><rect x="187.4" y="437" width="6.0" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="190.44" y="447.5" ></text>
</g>
<g >
<title>trx_prepare_low(trx_t*, trx_undo_ptr_t*, bool) (5 samples, 1.25%)</title><rect x="1056.9" y="661" width="14.8" height="15.0" fill="rgb(81,194,194)" rx="2" ry="2" />
<text  x="1059.92" y="671.5" ></text>
</g>
<g >
<title>log_write_notifier(log_t*) (1 samples, 0.25%)</title><rect x="193.4" y="821" width="2.9" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="196.36" y="831.5" ></text>
</g>
<g >
<title>sock_poll (1 samples, 0.25%)</title><rect x="323.5" y="565" width="2.9" height="15.0" fill="rgb(100,210,210)" rx="2" ry="2" />
<text  x="326.48" y="575.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (8 samples, 2.01%)</title><rect x="202.2" y="709" width="23.7" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="205.23" y="719.5" >e..</text>
</g>
<g >
<title>do_sys_poll (9 samples, 2.26%)</title><rect x="302.8" y="613" width="26.6" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="305.78" y="623.5" >d..</text>
</g>
<g >
<title>Item_field::fix_fields(THD*, Item**) (4 samples, 1.00%)</title><rect x="512.8" y="661" width="11.8" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="515.76" y="671.5" ></text>
</g>
<g >
<title>THD::rollback_item_tree_changes() (1 samples, 0.25%)</title><rect x="486.1" y="757" width="3.0" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="489.14" y="767.5" ></text>
</g>
<g >
<title>EVP_CIPHER_CTX_ctrl (1 samples, 0.25%)</title><rect x="477.3" y="581" width="2.9" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="480.27" y="591.5" ></text>
</g>
<g >
<title>Rows_log_event::get_data_size() (1 samples, 0.25%)</title><rect x="563.0" y="645" width="3.0" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="566.03" y="655.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (1 samples, 0.25%)</title><rect x="252.5" y="677" width="3.0" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="255.51" y="687.5" ></text>
</g>
<g >
<title>blk_mq_flush_plug_list (9 samples, 2.26%)</title><rect x="131.3" y="453" width="26.6" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="134.25" y="463.5" >b..</text>
</g>
<g >
<title>log_writer_write_buffer(log_t&amp;, unsigned long) (11 samples, 2.76%)</title><rect x="196.3" y="805" width="32.5" height="15.0" fill="rgb(67,181,181)" rx="2" ry="2" />
<text  x="199.32" y="815.5" >lo..</text>
</g>
<g >
<title>PT_item_list::contextualize(Parse_context*) (1 samples, 0.25%)</title><rect x="1110.2" y="693" width="2.9" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="1113.15" y="703.5" ></text>
</g>
<g >
<title>iowrite16 (2 samples, 0.50%)</title><rect x="187.4" y="405" width="6.0" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="190.44" y="415.5" ></text>
</g>
<g >
<title>ext4_sync_file (2 samples, 0.50%)</title><rect x="187.4" y="693" width="6.0" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="190.44" y="703.5" ></text>
</g>
<g >
<title>ext4_do_update_inode.isra.0 (2 samples, 0.50%)</title><rect x="208.1" y="517" width="6.0" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="211.15" y="527.5" ></text>
</g>
<g >
<title>Lex_hash::get_hash_symbol(char const*, unsigned int) const (2 samples, 0.50%)</title><rect x="1172.3" y="661" width="5.9" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="1175.26" y="671.5" ></text>
</g>
<g >
<title>page_simple_validate_new(unsigned char const*) (1 samples, 0.25%)</title><rect x="163.8" y="645" width="2.9" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="166.78" y="655.5" ></text>
</g>
<g >
<title>__hrtimer_init (1 samples, 0.25%)</title><rect x="311.7" y="549" width="2.9" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="314.65" y="559.5" ></text>
</g>
<g >
<title>WPACKET_init_static_len (1 samples, 0.25%)</title><rect x="296.9" y="581" width="2.9" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="299.87" y="591.5" ></text>
</g>
<g >
<title>jbd2__journal_start (1 samples, 0.25%)</title><rect x="796.7" y="421" width="2.9" height="15.0" fill="rgb(104,215,215)" rx="2" ry="2" />
<text  x="799.67" y="431.5" ></text>
</g>
<g >
<title>my_convert(char*, unsigned long, CHARSET_INFO const*, char const*, unsigned long, CHARSET_INFO const*, unsigned int*) (1 samples, 0.25%)</title><rect x="1181.1" y="693" width="3.0" height="15.0" fill="rgb(78,191,191)" rx="2" ry="2" />
<text  x="1184.13" y="703.5" ></text>
</g>
<g >
<title>remove_wait_queue (1 samples, 0.25%)</title><rect x="326.4" y="565" width="3.0" height="15.0" fill="rgb(90,201,201)" rx="2" ry="2" />
<text  x="329.44" y="575.5" ></text>
</g>
<g >
<title>ha_innobase::external_lock(THD*, int) (1 samples, 0.25%)</title><rect x="746.4" y="693" width="2.9" height="15.0" fill="rgb(78,191,191)" rx="2" ry="2" />
<text  x="749.39" y="703.5" ></text>
</g>
<g >
<title>plugin_foreach_with_mask(THD*, bool (**)(THD*, st_plugin_int*, void*), int, unsigned int, void*) (1 samples, 0.25%)</title><rect x="817.4" y="629" width="2.9" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="820.37" y="639.5" ></text>
</g>
<g >
<title>ha_commit_low(THD*, bool, bool) (23 samples, 5.76%)</title><rect x="829.2" y="661" width="68.0" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="832.20" y="671.5" >ha_comm..</text>
</g>
<g >
<title>net_write_packet(NET*, unsigned char const*, unsigned long) (47 samples, 11.78%)</title><rect x="344.2" y="709" width="139.0" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="347.19" y="719.5" >net_write_packet(..</text>
</g>
<g >
<title>ossl_statem_check_finish_init (1 samples, 0.25%)</title><rect x="344.2" y="661" width="2.9" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="347.19" y="671.5" ></text>
</g>
<g >
<title>__netif_receive_skb_one_core (23 samples, 5.76%)</title><rect x="388.5" y="197" width="68.1" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="391.55" y="207.5" >__netif..</text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.25%)</title><rect x="169.7" y="645" width="3.0" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="172.70" y="655.5" ></text>
</g>
<g >
<title>ssl3_read_bytes (14 samples, 3.51%)</title><rect x="258.4" y="629" width="41.4" height="15.0" fill="rgb(91,202,202)" rx="2" ry="2" />
<text  x="261.42" y="639.5" >ssl..</text>
</g>
<g >
<title>rec_convert_dtuple_to_rec_comp(unsigned char*, dict_index_t const*, dfield_t const*, unsigned long, dtuple_t const*, unsigned long, bool, unsigned char) (1 samples, 0.25%)</title><rect x="660.6" y="549" width="3.0" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="663.63" y="559.5" ></text>
</g>
<g >
<title>run_before_dml_hook(THD*) (1 samples, 0.25%)</title><rect x="749.3" y="725" width="3.0" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="752.35" y="735.5" ></text>
</g>
<g >
<title>srv_worker_thread() (1 samples, 0.25%)</title><rect x="178.6" y="821" width="2.9" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="181.57" y="831.5" ></text>
</g>
<g >
<title>ZSTD_CCtx_init_compressStream2 (17 samples, 4.26%)</title><rect x="1000.7" y="597" width="50.3" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="1003.73" y="607.5" >ZSTD_..</text>
</g>
<g >
<title>page_cur_insert_rec_write_log(unsigned char*, unsigned long, unsigned char*, dict_index_t*, mtr_t*) (1 samples, 0.25%)</title><rect x="678.4" y="549" width="2.9" height="15.0" fill="rgb(69,182,182)" rx="2" ry="2" />
<text  x="681.37" y="559.5" ></text>
</g>
<g >
<title>io_schedule (1 samples, 0.25%)</title><rect x="799.6" y="309" width="3.0" height="15.0" fill="rgb(79,192,192)" rx="2" ry="2" />
<text  x="802.62" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;dict_table_t*, dict_table_t*, std::_Identity&lt;dict_table_t*&gt;, std::less&lt;dict_table_t*&gt;, ut::allocator&lt;dict_table_t*, ut::detail::allocator_base_pfs&lt;dict_table_t*&gt; &gt; &gt;::_M_erase(std::_Rb_tree_node&lt;dict_table_t*&gt;*) (1 samples, 0.25%)</title><rect x="829.2" y="597" width="3.0" height="15.0" fill="rgb(78,191,191)" rx="2" ry="2" />
<text  x="832.20" y="607.5" ></text>
</g>
<g >
<title>__x64_sys_futex (4 samples, 1.00%)</title><rect x="89.8" y="805" width="11.9" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="92.85" y="815.5" ></text>
</g>
<g >
<title>pfs_rw_lock_x_lock_func(rw_lock_t*, unsigned long, ut::Location) (1 samples, 0.25%)</title><rect x="175.6" y="725" width="3.0" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="178.61" y="735.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (34 samples, 8.52%)</title><rect x="376.7" y="517" width="100.6" height="15.0" fill="rgb(78,190,190)" rx="2" ry="2" />
<text  x="379.72" y="527.5" >entry_SYSCAL..</text>
</g>
<g >
<title>btr_cur_optimistic_insert(unsigned long, btr_cur_t*, unsigned long**, mem_block_info_t**, dtuple_t*, unsigned char**, big_rec_t**, que_thr_t*, mtr_t*) (10 samples, 2.51%)</title><rect x="648.8" y="597" width="29.6" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="651.80" y="607.5" >bt..</text>
</g>
<g >
<title>alloc_page_buffers (1 samples, 0.25%)</title><rect x="217.0" y="533" width="3.0" height="15.0" fill="rgb(78,191,191)" rx="2" ry="2" />
<text  x="220.02" y="543.5" ></text>
</g>
<g >
<title>ut_delay(unsigned long) (1 samples, 0.25%)</title><rect x="178.6" y="789" width="2.9" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="181.57" y="799.5" ></text>
</g>
<g >
<title>invalidate_inode_pages2_range (1 samples, 0.25%)</title><rect x="157.9" y="485" width="2.9" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="160.87" y="495.5" ></text>
</g>
<g >
<title>SSL_read (1 samples, 0.25%)</title><rect x="252.5" y="709" width="3.0" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="255.51" y="719.5" ></text>
</g>
<g >
<title>Query_block::apply_local_transforms(THD*, bool) (2 samples, 0.50%)</title><rect x="506.8" y="693" width="6.0" height="15.0" fill="rgb(58,173,173)" rx="2" ry="2" />
<text  x="509.84" y="703.5" ></text>
</g>
<g >
<title>MDL_context::find_ticket(MDL_request*, enum_mdl_duration*) (2 samples, 0.50%)</title><rect x="773.0" y="693" width="5.9" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="776.01" y="703.5" ></text>
</g>
<g >
<title>__block_commit_write.constprop.0.isra.0 (2 samples, 0.50%)</title><rect x="808.5" y="469" width="5.9" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="811.50" y="479.5" ></text>
</g>
<g >
<title>Commit_order_trx_dependency_tracker::update_max_committed(long) (1 samples, 0.25%)</title><rect x="823.3" y="661" width="2.9" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="826.28" y="671.5" ></text>
</g>
<g >
<title>find_temporary_table(THD*, TABLE_LIST const*) (1 samples, 0.25%)</title><rect x="770.1" y="725" width="2.9" height="15.0" fill="rgb(75,187,187)" rx="2" ry="2" />
<text  x="773.05" y="735.5" ></text>
</g>
<g >
<title>WPACKET_put_bytes__ (1 samples, 0.25%)</title><rect x="364.9" y="597" width="2.9" height="15.0" fill="rgb(67,180,180)" rx="2" ry="2" />
<text  x="367.89" y="607.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.25%)</title><rect x="385.6" y="245" width="2.9" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="388.59" y="255.5" ></text>
</g>
<g >
<title>plugin_lock(THD*, st_plugin_int**) (1 samples, 0.25%)</title><rect x="749.3" y="709" width="3.0" height="15.0" fill="rgb(69,183,183)" rx="2" ry="2" />
<text  x="752.35" y="719.5" ></text>
</g>
<g >
<title>iov_iter_fault_in_readable (1 samples, 0.25%)</title><rect x="814.4" y="469" width="3.0" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="817.41" y="479.5" ></text>
</g>
<g >
<title>os_file_write_page(IORequest&amp;, char const*, int, unsigned char const*, unsigned long, unsigned long, file::Block const*) (11 samples, 2.76%)</title><rect x="131.3" y="645" width="32.5" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="134.25" y="655.5" >os..</text>
</g>
<g >
<title>blk_mq_sched_dispatch_requests (19 samples, 4.76%)</title><rect x="27.7" y="597" width="56.2" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="30.74" y="607.5" >blk_m..</text>
</g>
<g >
<title>ext4_sync_file (1 samples, 0.25%)</title><rect x="237.7" y="645" width="3.0" height="15.0" fill="rgb(101,212,212)" rx="2" ry="2" />
<text  x="240.72" y="655.5" ></text>
</g>
<g >
<title>dirname_length(char const*) (1 samples, 0.25%)</title><rect x="920.9" y="661" width="2.9" height="15.0" fill="rgb(93,205,205)" rx="2" ry="2" />
<text  x="923.88" y="671.5" ></text>
</g>
<g >
<title>THD::cleanup_after_query() (1 samples, 0.25%)</title><rect x="483.2" y="757" width="2.9" height="15.0" fill="rgb(79,191,191)" rx="2" ry="2" />
<text  x="486.18" y="767.5" ></text>
</g>
<g >
<title>submit_bio_noacct (1 samples, 0.25%)</title><rect x="86.9" y="661" width="2.9" height="15.0" fill="rgb(65,178,178)" rx="2" ry="2" />
<text  x="89.89" y="671.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (2 samples, 0.50%)</title><rect x="376.7" y="277" width="5.9" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="379.72" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (8 samples, 2.01%)</title><rect x="267.3" y="517" width="23.7" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="270.29" y="527.5" >e..</text>
</g>
<g >
<title>create_page_buffers (1 samples, 0.25%)</title><rect x="217.0" y="565" width="3.0" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="220.02" y="575.5" ></text>
</g>
<g >
<title>ZSTD_compressBlock_internal (19 samples, 4.76%)</title><rect x="935.7" y="581" width="56.2" height="15.0" fill="rgb(80,192,192)" rx="2" ry="2" />
<text  x="938.66" y="591.5" >ZSTD_..</text>
</g>
<g >
<title>string2decimal(char const*, decimal_t*, char const**) (1 samples, 0.25%)</title><rect x="1148.6" y="693" width="3.0" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="1151.60" y="703.5" ></text>
</g>
<g >
<title>row_ins_clust_index_entry(dict_index_t*, dtuple_t*, que_thr_t*, bool) (25 samples, 6.27%)</title><rect x="642.9" y="629" width="73.9" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="645.88" y="639.5" >row_ins_..</text>
</g>
<g >
<title>ksys_write (33 samples, 8.27%)</title><rect x="376.7" y="485" width="97.6" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="379.72" y="495.5" >ksys_write</text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.25%)</title><rect x="1048.0" y="485" width="3.0" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="1051.05" y="495.5" ></text>
</g>
<g >
<title>__blk_mq_delay_run_hw_queue (9 samples, 2.26%)</title><rect x="131.3" y="421" width="26.6" height="15.0" fill="rgb(78,190,190)" rx="2" ry="2" />
<text  x="134.25" y="431.5" >_..</text>
</g>
<g >
<title>trx_prepare_for_mysql(trx_t*) (6 samples, 1.50%)</title><rect x="1056.9" y="677" width="17.8" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="1059.92" y="687.5" ></text>
</g>
<g >
<title>parse_sql(THD*, Parser_state*, Object_creation_ctx*) (28 samples, 7.02%)</title><rect x="1101.3" y="757" width="82.8" height="15.0" fill="rgb(71,185,185)" rx="2" ry="2" />
<text  x="1104.28" y="767.5" >parse_sql..</text>
</g>
<g >
<title>common_interrupt (1 samples, 0.25%)</title><rect x="1048.0" y="517" width="3.0" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="1051.05" y="527.5" ></text>
</g>
<g >
<title>ZSTD_compressBegin_internal (16 samples, 4.01%)</title><rect x="1003.7" y="581" width="47.3" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="1006.68" y="591.5" >ZSTD..</text>
</g>
<g >
<title>setup_fields(THD*, unsigned long, bool, bool, bool, mem_root_deque&lt;Item*&gt; const*, mem_root_deque&lt;Item*&gt;*, Bounds_checked_array&lt;Item*&gt;) (6 samples, 1.50%)</title><rect x="512.8" y="677" width="17.7" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="515.76" y="687.5" ></text>
</g>
<g >
<title>jbd2_journal_get_write_access (1 samples, 0.25%)</title><rect x="802.6" y="373" width="2.9" height="15.0" fill="rgb(54,169,169)" rx="2" ry="2" />
<text  x="805.58" y="383.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (4 samples, 1.00%)</title><rect x="311.7" y="581" width="11.8" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="314.65" y="591.5" ></text>
</g>
<g >
<title>plugin_foreach_with_mask(THD*, bool (*)(THD*, st_plugin_int*, void*), int, unsigned int, void*) (1 samples, 0.25%)</title><rect x="900.2" y="629" width="2.9" height="15.0" fill="rgb(82,195,195)" rx="2" ry="2" />
<text  x="903.18" y="639.5" ></text>
</g>
<g >
<title>sock_write_iter (32 samples, 8.02%)</title><rect x="376.7" y="437" width="94.7" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="379.72" y="447.5" >sock_write_..</text>
</g>
<g >
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(char const*, std::allocator&lt;char&gt; const&amp;) (1 samples, 0.25%)</title><rect x="539.4" y="661" width="2.9" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="542.37" y="671.5" ></text>
</g>
<g >
<title>mysqld (399 samples, 100.00%)</title><rect x="10.0" y="869" width="1180.0" height="15.0" fill="rgb(100,210,210)" rx="2" ry="2" />
<text  x="13.00" y="879.5" >mysqld</text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.25%)</title><rect x="722.7" y="613" width="3.0" height="15.0" fill="rgb(92,204,204)" rx="2" ry="2" />
<text  x="725.73" y="623.5" ></text>
</g>
<g >
<title>__futex_abstimed_wait_common (1 samples, 0.25%)</title><rect x="15.9" y="837" width="3.0" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="18.91" y="847.5" ></text>
</g>
<g >
<title>os_file_write_func(IORequest&amp;, char const*, int, void const*, unsigned long, unsigned long) (8 samples, 2.01%)</title><rect x="202.2" y="757" width="23.7" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="205.23" y="767.5" >o..</text>
</g>
<g >
<title>lock_rec_insert_check_and_lock(unsigned long, unsigned char const*, buf_block_t*, dict_index_t*, que_thr_t*, mtr_t*, bool*) (1 samples, 0.25%)</title><rect x="648.8" y="581" width="3.0" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="651.80" y="591.5" ></text>
</g>
<g >
<title>check_trx_exists(THD*) (1 samples, 0.25%)</title><rect x="557.1" y="629" width="3.0" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="560.12" y="639.5" ></text>
</g>
<g >
<title>Double_write::check_block(buf_block_t const*) (1 samples, 0.25%)</title><rect x="163.8" y="661" width="2.9" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="166.78" y="671.5" ></text>
</g>
<g >
<title>read_events (1 samples, 0.25%)</title><rect x="21.8" y="741" width="3.0" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="24.83" y="751.5" ></text>
</g>
<g >
<title>internal_get_user_pages_fast (1 samples, 0.25%)</title><rect x="83.9" y="613" width="3.0" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="86.93" y="623.5" ></text>
</g>
<g >
<title>ksys_write (7 samples, 1.75%)</title><rect x="796.7" y="565" width="20.7" height="15.0" fill="rgb(104,215,215)" rx="2" ry="2" />
<text  x="799.67" y="575.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.25%)</title><rect x="719.8" y="613" width="2.9" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="722.77" y="623.5" ></text>
</g>
<g >
<title>trx_purge_rseg_get_next_history_log(trx_rseg_t*, unsigned long*) (1 samples, 0.25%)</title><rect x="172.7" y="773" width="2.9" height="15.0" fill="rgb(105,216,216)" rx="2" ry="2" />
<text  x="175.66" y="783.5" ></text>
</g>
<g >
<title>iov_iter_get_pages (1 samples, 0.25%)</title><rect x="83.9" y="629" width="3.0" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="86.93" y="639.5" ></text>
</g>
<g >
<title>bio_read_intern (9 samples, 2.26%)</title><rect x="264.3" y="565" width="26.7" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="267.34" y="575.5" >b..</text>
</g>
<g >
<title>do_syscall_64 (8 samples, 2.01%)</title><rect x="202.2" y="693" width="23.7" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="205.23" y="703.5" >d..</text>
</g>
<g >
<title>THD::binlog_query(THD::enum_binlog_query_type, char const*, unsigned long, bool, bool, bool, int) (1 samples, 0.25%)</title><rect x="563.0" y="709" width="3.0" height="15.0" fill="rgb(81,194,194)" rx="2" ry="2" />
<text  x="566.03" y="719.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 0.25%)</title><rect x="217.0" y="485" width="3.0" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="220.02" y="495.5" ></text>
</g>
<g >
<title>ext4_dio_write_iter (11 samples, 2.76%)</title><rect x="131.3" y="533" width="32.5" height="15.0" fill="rgb(103,213,213)" rx="2" ry="2" />
<text  x="134.25" y="543.5" >ex..</text>
</g>
<g >
<title>Compressed_ostream::write(unsigned char const*, unsigned long long) (19 samples, 4.76%)</title><rect x="997.8" y="645" width="56.2" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="1000.77" y="655.5" >Compr..</text>
</g>
<g >
<title>__x64_sys_pwrite64 (8 samples, 2.01%)</title><rect x="202.2" y="677" width="23.7" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="205.23" y="687.5" >_..</text>
</g>
<g >
<title>__memmove_sse2_unaligned_erms (1 samples, 0.25%)</title><rect x="1051.0" y="613" width="3.0" height="15.0" fill="rgb(90,201,201)" rx="2" ry="2" />
<text  x="1054.00" y="623.5" ></text>
</g>
<g >
<title>tls13_enc (1 samples, 0.25%)</title><rect x="480.2" y="613" width="3.0" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="483.23" y="623.5" ></text>
</g>
<g >
<title>Double_write::write_pages(buf_flush_t) (14 samples, 3.51%)</title><rect x="131.3" y="709" width="41.4" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="134.25" y="719.5" >Dou..</text>
</g>
<g >
<title>Batch_segment::write(dblwr::Buffer const&amp;) (11 samples, 2.76%)</title><rect x="131.3" y="693" width="32.5" height="15.0" fill="rgb(82,194,194)" rx="2" ry="2" />
<text  x="134.25" y="703.5" >Ba..</text>
</g>
<g >
<title>btr_cur_pessimistic_insert(unsigned int, btr_cur_t*, unsigned long**, mem_block_info_t**, dtuple_t*, unsigned char**, big_rec_t**, que_thr_t*, mtr_t*) (1 samples, 0.25%)</title><rect x="678.4" y="597" width="2.9" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="681.37" y="607.5" ></text>
</g>
<g >
<title>_IO_no_init (1 samples, 0.25%)</title><rect x="10.0" y="821" width="3.0" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="13.00" y="831.5" ></text>
</g>
<g >
<title>Item_field::set_field(Field*) (1 samples, 0.25%)</title><rect x="524.6" y="661" width="2.9" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="527.59" y="671.5" ></text>
</g>
<g >
<title>__fget_light (1 samples, 0.25%)</title><rect x="305.7" y="581" width="3.0" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="308.74" y="591.5" ></text>
</g>
<g >
<title>read_events (1 samples, 0.25%)</title><rect x="21.8" y="757" width="3.0" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="24.83" y="767.5" ></text>
</g>
<g >
<title>os_event::wait_time_low(std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, long) (1 samples, 0.25%)</title><rect x="193.4" y="805" width="2.9" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="196.36" y="815.5" ></text>
</g>
<g >
<title>trans_commit_stmt(THD*, bool) (8 samples, 2.01%)</title><rect x="1077.6" y="741" width="23.7" height="15.0" fill="rgb(93,205,205)" rx="2" ry="2" />
<text  x="1080.62" y="751.5" >t..</text>
</g>
<g >
<title>mlog_open_and_write_index(mtr_t*, unsigned char const*, dict_index_t const*, mlog_id_t, unsigned long, unsigned char*&amp;) (1 samples, 0.25%)</title><rect x="651.8" y="549" width="2.9" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="654.75" y="559.5" ></text>
</g>
<g >
<title>__clock_gettime (1 samples, 0.25%)</title><rect x="551.2" y="645" width="3.0" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="554.20" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, long&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, long&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, long&gt; &gt; &gt;::_M_erase(std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, long&gt; &gt;*) (1 samples, 0.25%)</title><rect x="912.0" y="485" width="3.0" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="915.01" y="495.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (1 samples, 0.25%)</title><rect x="320.5" y="565" width="3.0" height="15.0" fill="rgb(93,205,205)" rx="2" ry="2" />
<text  x="323.53" y="575.5" ></text>
</g>
<g >
<title>trx_init(trx_t*) (1 samples, 0.25%)</title><rect x="844.0" y="565" width="2.9" height="15.0" fill="rgb(82,195,195)" rx="2" ry="2" />
<text  x="846.98" y="575.5" ></text>
</g>
</g>
</svg>
