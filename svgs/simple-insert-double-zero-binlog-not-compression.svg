<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#f8f8f8" offset="5%" />
		<stop stop-color="#e8e8e8" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="934.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >simple-insert-double-zero-binlog-not-compression</text>
<text id="details" x="10.00" y="917" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="917" > </text>
<g id="frames">
<g >
<title>ha_innobase::external_lock(THD*, int) (1 samples, 0.45%)</title><rect x="863.4" y="677" width="5.3" height="15.0" fill="rgb(58,173,173)" rx="2" ry="2" />
<text  x="866.39" y="687.5" ></text>
</g>
<g >
<title>__x64_sys_fsync (2 samples, 0.89%)</title><rect x="147.0" y="709" width="10.5" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="149.96" y="719.5" ></text>
</g>
<g >
<title>bitmap_is_overlapping(MY_BITMAP const*, MY_BITMAP const*) (1 samples, 0.45%)</title><rect x="679.0" y="709" width="5.3" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="682.02" y="719.5" ></text>
</g>
<g >
<title>__x64_sys_futex (4 samples, 1.79%)</title><rect x="67.9" y="805" width="21.1" height="15.0" fill="rgb(53,167,167)" rx="2" ry="2" />
<text  x="70.95" y="815.5" ></text>
</g>
<g >
<title>queue_work_on (1 samples, 0.45%)</title><rect x="515.7" y="181" width="5.3" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="518.71" y="191.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info() (2 samples, 0.89%)</title><rect x="36.3" y="837" width="10.6" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="39.34" y="847.5" ></text>
</g>
<g >
<title>MYSQLparse(THD*, Parse_tree_root**) (19 samples, 8.48%)</title><rect x="1089.9" y="725" width="100.1" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="1092.91" y="735.5" >MYSQLparse(T..</text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.45%)</title><rect x="963.5" y="533" width="5.3" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="966.48" y="543.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.45%)</title><rect x="25.8" y="773" width="5.3" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="28.80" y="783.5" ></text>
</g>
<g >
<title>ssl_read_internal (13 samples, 5.80%)</title><rect x="210.2" y="677" width="68.5" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="213.18" y="687.5" >ssl_rea..</text>
</g>
<g >
<title>Write_rows_log_event::binlog_row_logging_function(THD*, TABLE*, bool, unsigned char const*, unsigned char const*) (1 samples, 0.45%)</title><rect x="731.7" y="661" width="5.3" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="734.70" y="671.5" ></text>
</g>
<g >
<title>std::string::_Rep::_M_clone(std::allocator&lt;char&gt; const&amp;, unsigned long) (1 samples, 0.45%)</title><rect x="742.2" y="629" width="5.3" height="15.0" fill="rgb(69,182,182)" rx="2" ry="2" />
<text  x="745.23" y="639.5" ></text>
</g>
<g >
<title>trx_undo_set_state_at_finish(trx_undo_t*, mtr_t*) (1 samples, 0.45%)</title><rect x="979.3" y="549" width="5.3" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="982.29" y="559.5" ></text>
</g>
<g >
<title>trx_commit(trx_t*) (6 samples, 2.68%)</title><rect x="958.2" y="597" width="31.6" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="961.21" y="607.5" >tr..</text>
</g>
<g >
<title>Gtid_state::update_commit_group(THD*) (2 samples, 0.89%)</title><rect x="942.4" y="661" width="10.5" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="945.41" y="671.5" ></text>
</g>
<g >
<title>fil_space_t::get_current_version() const (1 samples, 0.45%)</title><rect x="1042.5" y="581" width="5.3" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="1045.50" y="591.5" ></text>
</g>
<g >
<title>SSL_read (13 samples, 5.80%)</title><rect x="210.2" y="693" width="68.5" height="15.0" fill="rgb(103,213,213)" rx="2" ry="2" />
<text  x="213.18" y="703.5" >SSL_read</text>
</g>
<g >
<title>kmalloc_reserve (1 samples, 0.45%)</title><rect x="521.0" y="341" width="5.2" height="15.0" fill="rgb(64,178,178)" rx="2" ry="2" />
<text  x="523.98" y="351.5" ></text>
</g>
<g >
<title>__napi_poll (21 samples, 9.38%)</title><rect x="384.0" y="229" width="110.6" height="15.0" fill="rgb(71,185,185)" rx="2" ry="2" />
<text  x="387.02" y="239.5" >__napi_poll</text>
</g>
<g >
<title>selinux_ip_postroute (1 samples, 0.45%)</title><rect x="505.2" y="277" width="5.2" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="508.18" y="287.5" ></text>
</g>
<g >
<title>pvclock_clocksource_read (2 samples, 0.89%)</title><rect x="373.5" y="165" width="10.5" height="15.0" fill="rgb(94,206,206)" rx="2" ry="2" />
<text  x="376.48" y="175.5" ></text>
</g>
<g >
<title>binlog_cache_data::flush(THD*, unsigned long long*, bool*) (3 samples, 1.34%)</title><rect x="1000.4" y="645" width="15.8" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="1003.36" y="655.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.45%)</title><rect x="73.2" y="757" width="5.3" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="76.21" y="767.5" ></text>
</g>
<g >
<title>mlog_write_ulint(unsigned char*, unsigned long, mlog_id_t, mtr_t*) (1 samples, 0.45%)</title><rect x="984.6" y="485" width="5.2" height="15.0" fill="rgb(94,206,206)" rx="2" ry="2" />
<text  x="987.55" y="495.5" ></text>
</g>
<g >
<title>__blk_mq_sched_dispatch_requests (2 samples, 0.89%)</title><rect x="46.9" y="581" width="10.5" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="49.88" y="591.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.89%)</title><rect x="57.4" y="821" width="10.5" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="60.41" y="831.5" ></text>
</g>
<g >
<title>rw_lock_s_unlock_gen(rw_lock_t*, unsigned long) [clone .isra.0] (1 samples, 0.45%)</title><rect x="773.8" y="501" width="5.3" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="776.84" y="511.5" ></text>
</g>
<g >
<title>mysql_audit_notify(THD*, mysql_event_query_subclass_t, char const*) (1 samples, 0.45%)</title><rect x="900.3" y="741" width="5.2" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="903.27" y="751.5" ></text>
</g>
<g >
<title>THD::binlog_write_row(TABLE*, bool, unsigned char const*, unsigned char const*) (1 samples, 0.45%)</title><rect x="731.7" y="645" width="5.3" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="734.70" y="655.5" ></text>
</g>
<g >
<title>__x64_sys_futex (1 samples, 0.45%)</title><rect x="162.8" y="757" width="5.2" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="165.77" y="767.5" ></text>
</g>
<g >
<title>kmem_cache_free (1 samples, 0.45%)</title><rect x="921.3" y="405" width="5.3" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="924.34" y="415.5" ></text>
</g>
<g >
<title>syscall_exit_work (1 samples, 0.45%)</title><rect x="536.8" y="453" width="5.3" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="539.79" y="463.5" ></text>
</g>
<g >
<title>ppoll (5 samples, 2.23%)</title><rect x="283.9" y="677" width="26.4" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="286.93" y="687.5" >p..</text>
</g>
<g >
<title>MYSQL_BIN_LOG::flush_thread_caches(THD*) (3 samples, 1.34%)</title><rect x="1000.4" y="661" width="15.8" height="15.0" fill="rgb(70,184,184)" rx="2" ry="2" />
<text  x="1003.36" y="671.5" ></text>
</g>
<g >
<title>__kmalloc_node_track_caller (1 samples, 0.45%)</title><rect x="521.0" y="325" width="5.2" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="523.98" y="335.5" ></text>
</g>
<g >
<title>Trans_delegate::before_commit(THD*, bool, Binlog_cache_storage*, Binlog_cache_storage*, unsigned long long, bool) (1 samples, 0.45%)</title><rect x="1021.4" y="693" width="5.3" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="1024.43" y="703.5" ></text>
</g>
<g >
<title>os_event::wait_time_low(std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, long) (1 samples, 0.45%)</title><rect x="199.6" y="805" width="5.3" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="202.64" y="815.5" ></text>
</g>
<g >
<title>iowrite16 (2 samples, 0.89%)</title><rect x="46.9" y="469" width="10.5" height="15.0" fill="rgb(81,194,194)" rx="2" ry="2" />
<text  x="49.88" y="479.5" ></text>
</g>
<g >
<title>IO_CACHE_ostream::flush() (5 samples, 2.23%)</title><rect x="916.1" y="661" width="26.3" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="919.07" y="671.5" >I..</text>
</g>
<g >
<title>syscall_exit_to_user_mode (1 samples, 0.45%)</title><rect x="536.8" y="485" width="5.3" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="539.79" y="495.5" ></text>
</g>
<g >
<title>XID_STATE::xa_trans_rolled_back() (1 samples, 0.45%)</title><rect x="642.1" y="693" width="5.3" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="645.14" y="703.5" ></text>
</g>
<g >
<title>blk_mq_dispatch_rq_list (1 samples, 0.45%)</title><rect x="94.3" y="341" width="5.3" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="97.29" y="351.5" ></text>
</g>
<g >
<title>PTI_text_literal_text_string::itemize(Parse_context*, Item**) (1 samples, 0.45%)</title><rect x="1079.4" y="677" width="5.2" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="1082.38" y="687.5" ></text>
</g>
<g >
<title>__futex_abstimed_wait_common (4 samples, 1.79%)</title><rect x="67.9" y="853" width="21.1" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="70.95" y="863.5" ></text>
</g>
<g >
<title>Item_field::fix_fields(THD*, Item**) (1 samples, 0.45%)</title><rect x="600.0" y="677" width="5.3" height="15.0" fill="rgb(79,191,191)" rx="2" ry="2" />
<text  x="603.00" y="687.5" ></text>
</g>
<g >
<title>dblwr::write(buf_flush_t, buf_page_t*, bool) (1 samples, 0.45%)</title><rect x="94.3" y="741" width="5.3" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="97.29" y="751.5" ></text>
</g>
<g >
<title>tcp_rate_skb_sent (1 samples, 0.45%)</title><rect x="515.7" y="325" width="5.3" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="518.71" y="335.5" ></text>
</g>
<g >
<title>net_flush(NET*) (40 samples, 17.86%)</title><rect x="341.9" y="725" width="210.7" height="15.0" fill="rgb(54,169,169)" rx="2" ry="2" />
<text  x="344.88" y="735.5" >net_flush(NET*)</text>
</g>
<g >
<title>ssl3_read (13 samples, 5.80%)</title><rect x="210.2" y="661" width="68.5" height="15.0" fill="rgb(68,182,182)" rx="2" ry="2" />
<text  x="213.18" y="671.5" >ssl3_read</text>
</g>
<g >
<title>log_writer(log_t*) (9 samples, 4.02%)</title><rect x="157.5" y="821" width="47.4" height="15.0" fill="rgb(65,179,179)" rx="2" ry="2" />
<text  x="160.50" y="831.5" >log_..</text>
</g>
<g >
<title>fil_redo_io(IORequest const&amp;, page_id_t const&amp;, page_size_t const&amp;, unsigned long, unsigned long, void*) (6 samples, 2.68%)</title><rect x="168.0" y="789" width="31.6" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="171.04" y="799.5" >fi..</text>
</g>
<g >
<title>trx_purge_add_update_undo_to_history(trx_t*, trx_undo_ptr_t*, unsigned char*, bool, unsigned long, mtr_t*) (1 samples, 0.45%)</title><rect x="984.6" y="533" width="5.2" height="15.0" fill="rgb(71,185,185)" rx="2" ry="2" />
<text  x="987.55" y="543.5" ></text>
</g>
<g >
<title>iowrite16 (1 samples, 0.45%)</title><rect x="94.3" y="261" width="5.3" height="15.0" fill="rgb(101,212,212)" rx="2" ry="2" />
<text  x="97.29" y="271.5" ></text>
</g>
<g >
<title>__GI___pthread_cond_broadcast (2 samples, 0.89%)</title><rect x="57.4" y="853" width="10.5" height="15.0" fill="rgb(105,216,216)" rx="2" ry="2" />
<text  x="60.41" y="863.5" ></text>
</g>
<g >
<title>futex_wake (1 samples, 0.45%)</title><rect x="162.8" y="725" width="5.2" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="165.77" y="735.5" ></text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (1 samples, 0.45%)</title><rect x="952.9" y="613" width="5.3" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="955.95" y="623.5" ></text>
</g>
<g >
<title>tcp_clean_rtx_queue.constprop.0 (3 samples, 1.34%)</title><rect x="468.3" y="85" width="15.8" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="471.30" y="95.5" ></text>
</g>
<g >
<title>file_update_time (2 samples, 0.89%)</title><rect x="921.3" y="501" width="10.6" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="924.34" y="511.5" ></text>
</g>
<g >
<title>open_tables(THD*, TABLE_LIST**, unsigned int*, unsigned int, Prelocking_strategy*) (4 samples, 1.79%)</title><rect x="647.4" y="693" width="21.1" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="650.41" y="703.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.89%)</title><rect x="57.4" y="837" width="10.5" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="60.41" y="847.5" ></text>
</g>
<g >
<title>copy_user_generic_string (1 samples, 0.45%)</title><rect x="183.8" y="565" width="5.3" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="186.84" y="575.5" ></text>
</g>
<g >
<title>copy_page_from_iter_atomic (1 samples, 0.45%)</title><rect x="183.8" y="597" width="5.3" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="186.84" y="607.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 1.79%)</title><rect x="67.9" y="837" width="21.1" height="15.0" fill="rgb(92,204,204)" rx="2" ry="2" />
<text  x="70.95" y="847.5" ></text>
</g>
<g >
<title>Name_string::copy(char const*, unsigned long, CHARSET_INFO const*) (1 samples, 0.45%)</title><rect x="1079.4" y="661" width="5.2" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="1082.38" y="671.5" ></text>
</g>
<g >
<title>Sql_cmd_dml::execute(THD*) (54 samples, 24.11%)</title><rect x="589.5" y="741" width="284.4" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="592.46" y="751.5" >Sql_cmd_dml::execute(THD*)</text>
</g>
<g >
<title>lock_table_names(THD*, TABLE_LIST*, TABLE_LIST*, unsigned long, unsigned int, Prealloced_array&lt;MDL_request*, 1ul&gt;*) (1 samples, 0.45%)</title><rect x="652.7" y="677" width="5.2" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="655.68" y="687.5" ></text>
</g>
<g >
<title>page_cur_tuple_insert(page_cur_t*, dtuple_t const*, dict_index_t*, unsigned long**, mem_block_info_t**, mtr_t*) (1 samples, 0.45%)</title><rect x="763.3" y="581" width="5.3" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="766.30" y="591.5" ></text>
</g>
<g >
<title>[unknown] (9 samples, 4.02%)</title><rect x="10.0" y="853" width="47.4" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="13.00" y="863.5" >[unk..</text>
</g>
<g >
<title>do_futex (1 samples, 0.45%)</title><rect x="162.8" y="741" width="5.2" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="165.77" y="751.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.45%)</title><rect x="78.5" y="725" width="5.3" height="15.0" fill="rgb(103,214,214)" rx="2" ry="2" />
<text  x="81.48" y="735.5" ></text>
</g>
<g >
<title>blk_mq_sched_dispatch_requests (2 samples, 0.89%)</title><rect x="46.9" y="597" width="10.5" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="49.88" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, trx_t*&gt;, std::allocator&lt;std::pair&lt;unsigned long const, trx_t*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, Trx_by_id_with_min::Trx_track_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node(unsigned long, unsigned long const&amp;, unsigned long) const (1 samples, 0.45%)</title><rect x="847.6" y="645" width="5.3" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="850.59" y="655.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.45%)</title><rect x="120.6" y="725" width="5.3" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="123.63" y="735.5" ></text>
</g>
<g >
<title>__block_write_begin_int (1 samples, 0.45%)</title><rect x="931.9" y="469" width="5.2" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="934.88" y="479.5" ></text>
</g>
<g >
<title>bread_conv (6 samples, 2.68%)</title><rect x="236.5" y="549" width="31.6" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="239.52" y="559.5" >br..</text>
</g>
<g >
<title>[unknown] (2 samples, 0.89%)</title><rect x="36.3" y="821" width="10.6" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="39.34" y="831.5" ></text>
</g>
<g >
<title>ha_innobase::update_thd(THD*) (1 samples, 0.45%)</title><rect x="863.4" y="661" width="5.3" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="866.39" y="671.5" ></text>
</g>
<g >
<title>find_keyword(Lex_input_stream*, unsigned int, bool) (2 samples, 0.89%)</title><rect x="1174.2" y="677" width="10.5" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="1177.20" y="687.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5 samples, 2.23%)</title><rect x="916.1" y="597" width="26.3" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="919.07" y="607.5" >e..</text>
</g>
<g >
<title>check_stack_object (1 samples, 0.45%)</title><rect x="257.6" y="293" width="5.3" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="260.59" y="303.5" ></text>
</g>
<g >
<title>hash_futex (1 samples, 0.45%)</title><rect x="162.8" y="693" width="5.2" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="165.77" y="703.5" ></text>
</g>
<g >
<title>vfs_write (34 samples, 15.18%)</title><rect x="357.7" y="469" width="179.1" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="360.68" y="479.5" >vfs_write</text>
</g>
<g >
<title>wake_up_q (2 samples, 0.89%)</title><rect x="57.4" y="757" width="10.5" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="60.41" y="767.5" ></text>
</g>
<g >
<title>__blk_mq_sched_dispatch_requests (1 samples, 0.45%)</title><rect x="94.3" y="373" width="5.3" height="15.0" fill="rgb(67,180,180)" rx="2" ry="2" />
<text  x="97.29" y="383.5" ></text>
</g>
<g >
<title>trx_prepare_low(trx_t*, trx_undo_ptr_t*, bool) (3 samples, 1.34%)</title><rect x="1037.2" y="661" width="15.8" height="15.0" fill="rgb(79,191,191)" rx="2" ry="2" />
<text  x="1040.23" y="671.5" ></text>
</g>
<g >
<title>trx_purge(unsigned long, unsigned long, bool) (6 samples, 2.68%)</title><rect x="104.8" y="805" width="31.6" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="107.82" y="815.5" >tr..</text>
</g>
<g >
<title>__ext4_journal_stop (1 samples, 0.45%)</title><rect x="178.6" y="565" width="5.2" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="181.57" y="575.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5 samples, 2.23%)</title><rect x="173.3" y="709" width="26.3" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="176.30" y="719.5" >e..</text>
</g>
<g >
<title>_copy_from_user (1 samples, 0.45%)</title><rect x="305.0" y="597" width="5.3" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="308.00" y="607.5" ></text>
</g>
<g >
<title>Item::save_in_field(Field*, bool) (2 samples, 0.89%)</title><rect x="689.6" y="677" width="10.5" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="692.55" y="687.5" ></text>
</g>
<g >
<title>ssl3_write_pending (36 samples, 16.07%)</title><rect x="357.7" y="597" width="189.6" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="360.68" y="607.5" >ssl3_write_pending</text>
</g>
<g >
<title>Writeset_trx_dependency_tracker::get_dependency(THD*, long&amp;, long&amp;) (2 samples, 0.89%)</title><rect x="1005.6" y="613" width="10.6" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="1008.63" y="623.5" ></text>
</g>
<g >
<title>generic_perform_write (2 samples, 0.89%)</title><rect x="183.8" y="613" width="10.6" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="186.84" y="623.5" ></text>
</g>
<g >
<title>__clock_gettime (1 samples, 0.45%)</title><rect x="141.7" y="789" width="5.3" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="144.70" y="799.5" ></text>
</g>
<g >
<title>Fil_shard::flush_file_redo() (2 samples, 0.89%)</title><rect x="147.0" y="789" width="10.5" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="149.96" y="799.5" ></text>
</g>
<g >
<title>iomap_dio_bio_end_io (1 samples, 0.45%)</title><rect x="515.7" y="197" width="5.3" height="15.0" fill="rgb(80,193,193)" rx="2" ry="2" />
<text  x="518.71" y="207.5" ></text>
</g>
<g >
<title>ksys_read (1 samples, 0.45%)</title><rect x="241.8" y="469" width="5.3" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="244.79" y="479.5" ></text>
</g>
<g >
<title>binlog_log_row(TABLE*, unsigned char const*, unsigned char const*, bool (*)(THD*, TABLE*, bool, unsigned char const*, unsigned char const*)) (8 samples, 3.57%)</title><rect x="705.4" y="677" width="42.1" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="708.36" y="687.5" >bin..</text>
</g>
<g >
<title>futex_wait_queue_me (1 samples, 0.45%)</title><rect x="78.5" y="757" width="5.3" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="81.48" y="767.5" ></text>
</g>
<g >
<title>check_trx_exists(THD*) (1 samples, 0.45%)</title><rect x="663.2" y="629" width="5.3" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="666.21" y="639.5" ></text>
</g>
<g >
<title>LEX::make_sql_cmd(Parse_tree_root*) (1 samples, 0.45%)</title><rect x="1074.1" y="741" width="5.3" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="1077.11" y="751.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (1 samples, 0.45%)</title><rect x="921.3" y="453" width="5.3" height="15.0" fill="rgb(107,218,218)" rx="2" ry="2" />
<text  x="924.34" y="463.5" ></text>
</g>
<g >
<title>netif_rx_internal (3 samples, 1.34%)</title><rect x="368.2" y="229" width="15.8" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="371.21" y="239.5" ></text>
</g>
<g >
<title>kvm_clock_get_cycles (2 samples, 0.89%)</title><rect x="373.5" y="197" width="10.5" height="15.0" fill="rgb(57,172,172)" rx="2" ry="2" />
<text  x="376.48" y="207.5" ></text>
</g>
<g >
<title>avc_has_perm (1 samples, 0.45%)</title><rect x="531.5" y="421" width="5.3" height="15.0" fill="rgb(101,212,212)" rx="2" ry="2" />
<text  x="534.52" y="431.5" ></text>
</g>
<g >
<title>Opt_trace_start::Opt_trace_start(THD*, TABLE_LIST*, enum_sql_command, List&lt;set_var_base&gt;*, char const*, unsigned long, sp_printable*, CHARSET_INFO const*) (1 samples, 0.45%)</title><rect x="584.2" y="741" width="5.3" height="15.0" fill="rgb(68,182,182)" rx="2" ry="2" />
<text  x="587.20" y="751.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 0.45%)</title><rect x="247.1" y="373" width="5.2" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="250.05" y="383.5" ></text>
</g>
<g >
<title>mpage_prepare_extent_to_map (2 samples, 0.89%)</title><rect x="147.0" y="613" width="10.5" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="149.96" y="623.5" ></text>
</g>
<g >
<title>se_before_commit(THD*, st_plugin_int*, void*) (1 samples, 0.45%)</title><rect x="1021.4" y="661" width="5.3" height="15.0" fill="rgb(83,196,196)" rx="2" ry="2" />
<text  x="1024.43" y="671.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.89%)</title><rect x="147.0" y="725" width="10.5" height="15.0" fill="rgb(91,202,202)" rx="2" ry="2" />
<text  x="149.96" y="735.5" ></text>
</g>
<g >
<title>CRYPTO_malloc (1 samples, 0.45%)</title><rect x="341.9" y="549" width="5.2" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="344.88" y="559.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (35 samples, 15.62%)</title><rect x="357.7" y="517" width="184.4" height="15.0" fill="rgb(55,170,170)" rx="2" ry="2" />
<text  x="360.68" y="527.5" >entry_SYSCALL_64_after_h..</text>
</g>
<g >
<title>do_poll.constprop.0 (3 samples, 1.34%)</title><rect x="289.2" y="597" width="15.8" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="292.20" y="607.5" ></text>
</g>
<g >
<title>__blk_mq_run_hw_queue (2 samples, 0.89%)</title><rect x="46.9" y="613" width="10.5" height="15.0" fill="rgb(107,218,218)" rx="2" ry="2" />
<text  x="49.88" y="623.5" ></text>
</g>
<g >
<title>tcp_queue_rcv (1 samples, 0.45%)</title><rect x="489.4" y="101" width="5.2" height="15.0" fill="rgb(56,170,170)" rx="2" ry="2" />
<text  x="492.38" y="111.5" ></text>
</g>
<g >
<title>trx_prepare_for_mysql(trx_t*) (5 samples, 2.23%)</title><rect x="1026.7" y="677" width="26.3" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="1029.70" y="687.5" >t..</text>
</g>
<g >
<title>ksys_write (34 samples, 15.18%)</title><rect x="357.7" y="485" width="179.1" height="15.0" fill="rgb(52,166,166)" rx="2" ry="2" />
<text  x="360.68" y="495.5" >ksys_write</text>
</g>
<g >
<title>file_write_and_wait_range (2 samples, 0.89%)</title><rect x="147.0" y="677" width="10.5" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="149.96" y="687.5" ></text>
</g>
<g >
<title>Query_block::setup_tables(THD*, TABLE_LIST*, bool) (1 samples, 0.45%)</title><rect x="594.7" y="693" width="5.3" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="597.73" y="703.5" ></text>
</g>
<g >
<title>_int_malloc (2 samples, 0.89%)</title><rect x="15.3" y="821" width="10.5" height="15.0" fill="rgb(93,205,205)" rx="2" ry="2" />
<text  x="18.27" y="831.5" ></text>
</g>
<g >
<title>os_file_write_page(IORequest&amp;, char const*, int, unsigned char const*, unsigned long, unsigned long, file::Block const*) (5 samples, 2.23%)</title><rect x="173.3" y="741" width="26.3" height="15.0" fill="rgb(69,183,183)" rx="2" ry="2" />
<text  x="176.30" y="751.5" >o..</text>
</g>
<g >
<title>__ip_queue_xmit (28 samples, 12.50%)</title><rect x="362.9" y="325" width="147.5" height="15.0" fill="rgb(106,217,217)" rx="2" ry="2" />
<text  x="365.95" y="335.5" >__ip_queue_xmit</text>
</g>
<g >
<title>tcp_ack_update_rtt (2 samples, 0.89%)</title><rect x="473.6" y="69" width="10.5" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="476.57" y="79.5" ></text>
</g>
<g >
<title>execute_native_thread_routine (21 samples, 9.38%)</title><rect x="94.3" y="853" width="110.6" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="97.29" y="863.5" >execute_nativ..</text>
</g>
<g >
<title>__do_softirq (1 samples, 0.45%)</title><rect x="515.7" y="261" width="5.3" height="15.0" fill="rgb(89,200,200)" rx="2" ry="2" />
<text  x="518.71" y="271.5" ></text>
</g>
<g >
<title>Query_block::setup_tables(THD*, TABLE_LIST*, bool) (1 samples, 0.45%)</title><rect x="589.5" y="709" width="5.2" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="592.46" y="719.5" ></text>
</g>
<g >
<title>Lex_hash::get_hash_symbol(char const*, unsigned int) const (2 samples, 0.89%)</title><rect x="1174.2" y="661" width="10.5" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="1177.20" y="671.5" ></text>
</g>
<g >
<title>net_rx_action (21 samples, 9.38%)</title><rect x="384.0" y="245" width="110.6" height="15.0" fill="rgb(94,206,206)" rx="2" ry="2" />
<text  x="387.02" y="255.5" >net_rx_action</text>
</g>
<g >
<title>avc_lookup (1 samples, 0.45%)</title><rect x="531.5" y="405" width="5.3" height="15.0" fill="rgb(80,193,193)" rx="2" ry="2" />
<text  x="534.52" y="415.5" ></text>
</g>
<g >
<title>[unknown] (2 samples, 0.89%)</title><rect x="15.3" y="837" width="10.5" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="18.27" y="847.5" ></text>
</g>
<g >
<title>new_sync_write (32 samples, 14.29%)</title><rect x="362.9" y="453" width="168.6" height="15.0" fill="rgb(75,187,187)" rx="2" ry="2" />
<text  x="365.95" y="463.5" >new_sync_write</text>
</g>
<g >
<title>__local_bh_enable_ip (21 samples, 9.38%)</title><rect x="384.0" y="293" width="110.6" height="15.0" fill="rgb(65,179,179)" rx="2" ry="2" />
<text  x="387.02" y="303.5" >__local_bh_en..</text>
</g>
<g >
<title>buf_flush_page_and_try_neighbors(buf_page_t*, buf_flush_t, unsigned long, unsigned long*) (1 samples, 0.45%)</title><rect x="94.3" y="773" width="5.3" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="97.29" y="783.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 1.79%)</title><rect x="67.9" y="821" width="21.1" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="70.95" y="831.5" ></text>
</g>
<g >
<title>tcp_recvmsg_locked (1 samples, 0.45%)</title><rect x="257.6" y="389" width="5.3" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="260.59" y="399.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.45%)</title><rect x="515.7" y="293" width="5.3" height="15.0" fill="rgb(91,203,203)" rx="2" ry="2" />
<text  x="518.71" y="303.5" ></text>
</g>
<g >
<title>pvclock_clocksource_read (2 samples, 0.89%)</title><rect x="373.5" y="181" width="10.5" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="376.48" y="191.5" ></text>
</g>
<g >
<title>do_futex (2 samples, 0.89%)</title><rect x="57.4" y="789" width="10.5" height="15.0" fill="rgb(102,213,213)" rx="2" ry="2" />
<text  x="60.41" y="799.5" ></text>
</g>
<g >
<title>ext4_generic_write_checks (1 samples, 0.45%)</title><rect x="916.1" y="501" width="5.2" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="919.07" y="511.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (30 samples, 13.39%)</title><rect x="362.9" y="373" width="158.1" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="365.95" y="383.5" >__tcp_push_pending_f..</text>
</g>
<g >
<title>__netif_receive_skb_one_core (21 samples, 9.38%)</title><rect x="384.0" y="197" width="110.6" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="387.02" y="207.5" >__netif_recei..</text>
</g>
<g >
<title>trx_purge_truncate_rseg_history(trx_rseg_t*, purge_iter_t const*) (1 samples, 0.45%)</title><rect x="131.2" y="773" width="5.2" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="134.16" y="783.5" ></text>
</g>
<g >
<title>vfs_write (1 samples, 0.45%)</title><rect x="937.1" y="533" width="5.3" height="15.0" fill="rgb(65,178,178)" rx="2" ry="2" />
<text  x="940.14" y="543.5" ></text>
</g>
<g >
<title>lock_tables(THD*, TABLE_LIST*, unsigned int, unsigned int) (2 samples, 0.89%)</title><rect x="863.4" y="725" width="10.5" height="15.0" fill="rgb(94,206,206)" rx="2" ry="2" />
<text  x="866.39" y="735.5" ></text>
</g>
<g >
<title>do_syscall_64 (35 samples, 15.62%)</title><rect x="357.7" y="501" width="184.4" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="360.68" y="511.5" >do_syscall_64</text>
</g>
<g >
<title>PTI_simple_ident_nospvar_ident::itemize(Parse_context*, Item**) (1 samples, 0.45%)</title><rect x="1084.6" y="677" width="5.3" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="1087.64" y="687.5" ></text>
</g>
<g >
<title>vfs_read (4 samples, 1.79%)</title><rect x="247.1" y="469" width="21.0" height="15.0" fill="rgb(92,203,203)" rx="2" ry="2" />
<text  x="250.05" y="479.5" ></text>
</g>
<g >
<title>do_softirq (21 samples, 9.38%)</title><rect x="384.0" y="277" width="110.6" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="387.02" y="287.5" >do_softirq</text>
</g>
<g >
<title>do_command(THD*) (187 samples, 83.48%)</title><rect x="204.9" y="805" width="985.1" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="207.91" y="815.5" >do_command(THD*)</text>
</g>
<g >
<title>netif_rx (3 samples, 1.34%)</title><rect x="368.2" y="245" width="15.8" height="15.0" fill="rgb(66,179,179)" rx="2" ry="2" />
<text  x="371.21" y="255.5" ></text>
</g>
<g >
<title>__filemap_fdatawrite_range (2 samples, 0.89%)</title><rect x="147.0" y="661" width="10.5" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="149.96" y="671.5" ></text>
</g>
<g >
<title>tls13_enc (2 samples, 0.89%)</title><rect x="268.1" y="597" width="10.6" height="15.0" fill="rgb(103,214,214)" rx="2" ry="2" />
<text  x="271.12" y="607.5" ></text>
</g>
<g >
<title>Binlog_storage_delegate::after_sync(THD*, char const*, unsigned long long) (1 samples, 0.45%)</title><rect x="910.8" y="677" width="5.3" height="15.0" fill="rgb(103,214,214)" rx="2" ry="2" />
<text  x="913.80" y="687.5" ></text>
</g>
<g >
<title>trx_undo_insert_header_reuse(unsigned char*, unsigned long, mtr_t*) (1 samples, 0.45%)</title><rect x="779.1" y="549" width="5.3" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="782.11" y="559.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (1 samples, 0.45%)</title><rect x="921.3" y="437" width="5.3" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="924.34" y="447.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::process_commit_stage_queue(THD*, THD*) (11 samples, 4.91%)</title><rect x="942.4" y="677" width="58.0" height="15.0" fill="rgb(92,204,204)" rx="2" ry="2" />
<text  x="945.41" y="687.5" >MYSQL_..</text>
</g>
<g >
<title>IO_CACHE_binlog_cache_storage::length() const (1 samples, 0.45%)</title><rect x="1000.4" y="629" width="5.2" height="15.0" fill="rgb(55,170,170)" rx="2" ry="2" />
<text  x="1003.36" y="639.5" ></text>
</g>
<g >
<title>__x64_sys_futex (2 samples, 0.89%)</title><rect x="57.4" y="805" width="10.5" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="60.41" y="815.5" ></text>
</g>
<g >
<title>vio_ssl_read(Vio*, unsigned char*, unsigned long) (20 samples, 8.93%)</title><rect x="210.2" y="709" width="105.3" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="213.18" y="719.5" >vio_ssl_read..</text>
</g>
<g >
<title>WPACKET_init_static_len (1 samples, 0.45%)</title><rect x="341.9" y="597" width="5.2" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="344.88" y="607.5" ></text>
</g>
<g >
<title>__block_commit_write.constprop.0.isra.0 (1 samples, 0.45%)</title><rect x="189.1" y="565" width="5.3" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="192.11" y="575.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.45%)</title><rect x="120.6" y="757" width="5.3" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="123.63" y="767.5" ></text>
</g>
<g >
<title>simple_copy_to_iter (1 samples, 0.45%)</title><rect x="257.6" y="341" width="5.3" height="15.0" fill="rgb(76,188,188)" rx="2" ry="2" />
<text  x="260.59" y="351.5" ></text>
</g>
<g >
<title>row_insert_for_mysql_using_ins_graph(unsigned char const*, row_prebuilt_t*) (20 samples, 8.93%)</title><rect x="752.8" y="661" width="105.3" height="15.0" fill="rgb(92,204,204)" rx="2" ry="2" />
<text  x="755.77" y="671.5" >row_insert_f..</text>
</g>
<g >
<title>jbd2_journal_stop (1 samples, 0.45%)</title><rect x="178.6" y="549" width="5.2" height="15.0" fill="rgb(84,197,197)" rx="2" ry="2" />
<text  x="181.57" y="559.5" ></text>
</g>
<g >
<title>Binlog_storage_delegate::after_sync(THD*, char const*, unsigned long long) (1 samples, 0.45%)</title><rect x="1016.2" y="661" width="5.2" height="15.0" fill="rgb(82,194,194)" rx="2" ry="2" />
<text  x="1019.16" y="671.5" ></text>
</g>
<g >
<title>mpage_submit_page (1 samples, 0.45%)</title><rect x="152.2" y="581" width="5.3" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="155.23" y="591.5" ></text>
</g>
<g >
<title>__write (5 samples, 2.23%)</title><rect x="916.1" y="613" width="26.3" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="919.07" y="623.5" >_..</text>
</g>
<g >
<title>mysql_lock_tables(THD*, TABLE**, unsigned long, unsigned int) (2 samples, 0.89%)</title><rect x="863.4" y="709" width="10.5" height="15.0" fill="rgb(82,195,195)" rx="2" ry="2" />
<text  x="866.39" y="719.5" ></text>
</g>
<g >
<title>MDL_context::release_locks_stored_before(enum_mdl_duration, MDL_ticket*) (1 samples, 0.45%)</title><rect x="578.9" y="741" width="5.3" height="15.0" fill="rgb(71,185,185)" rx="2" ry="2" />
<text  x="581.93" y="751.5" ></text>
</g>
<g >
<title>mlog_write_ulint(unsigned char*, unsigned long, mlog_id_t, mtr_t*) (1 samples, 0.45%)</title><rect x="1047.8" y="629" width="5.2" height="15.0" fill="rgb(68,181,181)" rx="2" ry="2" />
<text  x="1050.77" y="639.5" ></text>
</g>
<g >
<title>do_futex (4 samples, 1.79%)</title><rect x="67.9" y="789" width="21.1" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="70.95" y="799.5" ></text>
</g>
<g >
<title>security_file_permission (1 samples, 0.45%)</title><rect x="531.5" y="453" width="5.3" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="534.52" y="463.5" ></text>
</g>
<g >
<title>ssl3_get_record (11 samples, 4.91%)</title><rect x="220.7" y="613" width="58.0" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="223.71" y="623.5" >ssl3_g..</text>
</g>
<g >
<title>log_buffer_write(log_t&amp;, unsigned char const*, unsigned long, unsigned long) (1 samples, 0.45%)</title><rect x="826.5" y="565" width="5.3" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="829.52" y="575.5" ></text>
</g>
<g >
<title>Gtid_state::update_gtids_impl_broadcast_and_unlock_sidno(int) (1 samples, 0.45%)</title><rect x="947.7" y="629" width="5.2" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="950.68" y="639.5" ></text>
</g>
<g >
<title>PT_insert_values_list::contextualize(Parse_context*) (1 samples, 0.45%)</title><rect x="1079.4" y="693" width="5.2" height="15.0" fill="rgb(92,204,204)" rx="2" ry="2" />
<text  x="1082.38" y="703.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::exit() (1 samples, 0.45%)</title><rect x="974.0" y="549" width="5.3" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="977.02" y="559.5" ></text>
</g>
<g >
<title>get_timespec64 (1 samples, 0.45%)</title><rect x="305.0" y="613" width="5.3" height="15.0" fill="rgb(77,189,189)" rx="2" ry="2" />
<text  x="308.00" y="623.5" ></text>
</g>
<g >
<title>mtr_t::Command::execute() (1 samples, 0.45%)</title><rect x="1037.2" y="629" width="5.3" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="1040.23" y="639.5" ></text>
</g>
<g >
<title>decimal2double(decimal_t const*, double*) (2 samples, 0.89%)</title><rect x="689.6" y="645" width="10.5" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="692.55" y="655.5" ></text>
</g>
<g >
<title>ext4_da_get_block_prep (1 samples, 0.45%)</title><rect x="931.9" y="453" width="5.2" height="15.0" fill="rgb(56,171,171)" rx="2" ry="2" />
<text  x="934.88" y="463.5" ></text>
</g>
<g >
<title>rec_get_offsets_func(unsigned char const*, dict_index_t const*, unsigned long*, unsigned long, mem_block_info_t**) (1 samples, 0.45%)</title><rect x="821.3" y="565" width="5.2" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="824.25" y="575.5" ></text>
</g>
<g >
<title>vfs_write (1 samples, 0.45%)</title><rect x="94.3" y="565" width="5.3" height="15.0" fill="rgb(66,179,179)" rx="2" ry="2" />
<text  x="97.29" y="575.5" ></text>
</g>
<g >
<title>__x64_sys_pwrite64 (1 samples, 0.45%)</title><rect x="94.3" y="581" width="5.3" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="97.29" y="591.5" ></text>
</g>
<g >
<title>__sk_dst_check (1 samples, 0.45%)</title><rect x="362.9" y="309" width="5.3" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="365.95" y="319.5" ></text>
</g>
<g >
<title>CRYPTO_zalloc (1 samples, 0.45%)</title><rect x="341.9" y="565" width="5.2" height="15.0" fill="rgb(68,182,182)" rx="2" ry="2" />
<text  x="344.88" y="575.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool (TABLE const*, unsigned long), Replicated_columns_view::Replicated_columns_view(TABLE const*, Replicated_columns_view::enum_replication_flow, THD const*)::{lambda(TABLE const*, unsigned long)#1}&gt;::_M_invoke(std::_Any_data const&amp;, TABLE const*&amp;&amp;, unsigned long&amp;&amp;) (1 samples, 0.45%)</title><rect x="705.4" y="613" width="5.2" height="15.0" fill="rgb(68,181,181)" rx="2" ry="2" />
<text  x="708.36" y="623.5" ></text>
</g>
<g >
<title>__es_tree_search.isra.0 (1 samples, 0.45%)</title><rect x="931.9" y="389" width="5.2" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="934.88" y="399.5" ></text>
</g>
<g >
<title>sock_poll (1 samples, 0.45%)</title><rect x="299.7" y="581" width="5.3" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="302.73" y="591.5" ></text>
</g>
<g >
<title>call_after_sync_hook(THD*) (1 samples, 0.45%)</title><rect x="1016.2" y="677" width="5.2" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="1019.16" y="687.5" ></text>
</g>
<g >
<title>ipv4_dst_check (1 samples, 0.45%)</title><rect x="362.9" y="293" width="5.3" height="15.0" fill="rgb(79,191,191)" rx="2" ry="2" />
<text  x="365.95" y="303.5" ></text>
</g>
<g >
<title>mpage_process_page_bufs (2 samples, 0.89%)</title><rect x="147.0" y="597" width="10.5" height="15.0" fill="rgb(95,207,207)" rx="2" ry="2" />
<text  x="149.96" y="607.5" ></text>
</g>
<g >
<title>Batch_segment::write(dblwr::Buffer const&amp;) (1 samples, 0.45%)</title><rect x="94.3" y="693" width="5.3" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="97.29" y="703.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (1 samples, 0.45%)</title><rect x="178.6" y="581" width="5.2" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="181.57" y="591.5" ></text>
</g>
<g >
<title>sock_sendmsg (32 samples, 14.29%)</title><rect x="362.9" y="421" width="168.6" height="15.0" fill="rgb(58,173,173)" rx="2" ry="2" />
<text  x="365.95" y="431.5" >sock_sendmsg</text>
</g>
<g >
<title>enqueue_to_backlog (1 samples, 0.45%)</title><rect x="368.2" y="197" width="5.3" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="371.21" y="207.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (21 samples, 9.38%)</title><rect x="384.0" y="149" width="110.6" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="387.02" y="159.5" >tcp_v4_rcv</text>
</g>
<g >
<title>exit_to_user_mode_prepare (1 samples, 0.45%)</title><rect x="952.9" y="581" width="5.3" height="15.0" fill="rgb(101,211,211)" rx="2" ry="2" />
<text  x="955.95" y="591.5" ></text>
</g>
<g >
<title>mem_root_deque&lt;mem_root_deque&lt;Item*&gt;*&gt;::push_back(mem_root_deque&lt;Item*&gt;* const&amp;) (1 samples, 0.45%)</title><rect x="1184.7" y="709" width="5.3" height="15.0" fill="rgb(103,214,214)" rx="2" ry="2" />
<text  x="1187.73" y="719.5" ></text>
</g>
<g >
<title>Query_log_event::ends_group() const (1 samples, 0.45%)</title><rect x="726.4" y="613" width="5.3" height="15.0" fill="rgb(56,170,170)" rx="2" ry="2" />
<text  x="729.43" y="623.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (1 samples, 0.45%)</title><rect x="952.9" y="597" width="5.3" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="955.95" y="607.5" ></text>
</g>
<g >
<title>ssl3_read_internal (13 samples, 5.80%)</title><rect x="210.2" y="645" width="68.5" height="15.0" fill="rgb(67,181,181)" rx="2" ry="2" />
<text  x="213.18" y="655.5" >ssl3_re..</text>
</g>
<g >
<title>mysql_execute_command(THD*, bool) (95 samples, 42.41%)</title><rect x="568.4" y="757" width="500.4" height="15.0" fill="rgb(54,168,168)" rx="2" ry="2" />
<text  x="571.39" y="767.5" >mysql_execute_command(THD*, bool)</text>
</g>
<g >
<title>ip_finish_output2 (1 samples, 0.45%)</title><rect x="494.6" y="293" width="5.3" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="497.64" y="303.5" ></text>
</g>
<g >
<title>ha_prepare_low(THD*, bool) (2 samples, 0.89%)</title><rect x="1058.3" y="709" width="10.5" height="15.0" fill="rgb(100,210,210)" rx="2" ry="2" />
<text  x="1061.30" y="719.5" ></text>
</g>
<g >
<title>generic_update_time (1 samples, 0.45%)</title><rect x="178.6" y="597" width="5.2" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="181.57" y="607.5" ></text>
</g>
<g >
<title>__iomap_dio_rw (2 samples, 0.89%)</title><rect x="46.9" y="709" width="10.5" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="49.88" y="719.5" ></text>
</g>
<g >
<title>__blk_mq_do_dispatch_sched (2 samples, 0.89%)</title><rect x="46.9" y="565" width="10.5" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="49.88" y="575.5" ></text>
</g>
<g >
<title>sock_write (1 samples, 0.45%)</title><rect x="542.1" y="549" width="5.2" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="545.05" y="559.5" ></text>
</g>
<g >
<title>vfs_write (5 samples, 2.23%)</title><rect x="916.1" y="549" width="26.3" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="919.07" y="559.5" >v..</text>
</g>
<g >
<title>sk_stream_alloc_skb (1 samples, 0.45%)</title><rect x="521.0" y="373" width="5.2" height="15.0" fill="rgb(67,181,181)" rx="2" ry="2" />
<text  x="523.98" y="383.5" ></text>
</g>
<g >
<title>futex_wait (3 samples, 1.34%)</title><rect x="73.2" y="773" width="15.8" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="76.21" y="783.5" ></text>
</g>
<g >
<title>futex_wake (2 samples, 0.89%)</title><rect x="57.4" y="773" width="10.5" height="15.0" fill="rgb(79,191,191)" rx="2" ry="2" />
<text  x="60.41" y="783.5" ></text>
</g>
<g >
<title>fsnotify (1 samples, 0.45%)</title><rect x="262.9" y="421" width="5.2" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="265.86" y="431.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.89%)</title><rect x="46.9" y="805" width="10.5" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="49.88" y="815.5" ></text>
</g>
<g >
<title>lock_trx_release_locks(trx_t*) (1 samples, 0.45%)</title><rect x="963.5" y="549" width="5.3" height="15.0" fill="rgb(96,208,208)" rx="2" ry="2" />
<text  x="966.48" y="559.5" ></text>
</g>
<g >
<title>do_writepages (2 samples, 0.89%)</title><rect x="147.0" y="645" width="10.5" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="149.96" y="655.5" ></text>
</g>
<g >
<title>do_ssl3_write (40 samples, 17.86%)</title><rect x="341.9" y="613" width="210.7" height="15.0" fill="rgb(107,218,218)" rx="2" ry="2" />
<text  x="344.88" y="623.5" >do_ssl3_write</text>
</g>
<g >
<title>MYSQL_BIN_LOG::flush_cache_to_file(unsigned long long*) (5 samples, 2.23%)</title><rect x="916.1" y="677" width="26.3" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="919.07" y="687.5" >M..</text>
</g>
<g >
<title>__libc_malloc (1 samples, 0.45%)</title><rect x="89.0" y="853" width="5.3" height="15.0" fill="rgb(77,189,189)" rx="2" ry="2" />
<text  x="92.02" y="863.5" ></text>
</g>
<g >
<title>generic_update_time (2 samples, 0.89%)</title><rect x="921.3" y="485" width="10.6" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="924.34" y="495.5" ></text>
</g>
<g >
<title>Sql_cmd_insert_base::prepare_inner(THD*) (9 samples, 4.02%)</title><rect x="594.7" y="709" width="47.4" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="597.73" y="719.5" >Sql_..</text>
</g>
<g >
<title>convert_error_code_to_mysql(dberr_t, unsigned int, THD*) (1 samples, 0.45%)</title><rect x="747.5" y="677" width="5.3" height="15.0" fill="rgb(91,203,203)" rx="2" ry="2" />
<text  x="750.50" y="687.5" ></text>
</g>
<g >
<title>trx_write_serialisation_history(trx_t*, mtr_t*) (3 samples, 1.34%)</title><rect x="974.0" y="565" width="15.8" height="15.0" fill="rgb(92,203,203)" rx="2" ry="2" />
<text  x="977.02" y="575.5" ></text>
</g>
<g >
<title>string2decimal(char const*, decimal_t*, char const**) (1 samples, 0.45%)</title><rect x="1163.7" y="677" width="5.2" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="1166.66" y="687.5" ></text>
</g>
<g >
<title>bio_read_intern (7 samples, 3.12%)</title><rect x="231.3" y="565" width="36.8" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="234.25" y="575.5" >bio..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.45%)</title><rect x="83.8" y="709" width="5.2" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="86.75" y="719.5" ></text>
</g>
<g >
<title>buf_flush_do_batch(buf_pool_t*, buf_flush_t, unsigned long, unsigned long, unsigned long*) (1 samples, 0.45%)</title><rect x="94.3" y="789" width="5.3" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="97.29" y="799.5" ></text>
</g>
<g >
<title>validate_default_values_of_unset_fields(THD*, TABLE*) (1 samples, 0.45%)</title><rect x="700.1" y="709" width="5.3" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="703.09" y="719.5" ></text>
</g>
<g >
<title>net_write_packet(NET*, unsigned char const*, unsigned long) (40 samples, 17.86%)</title><rect x="341.9" y="709" width="210.7" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="344.88" y="719.5" >net_write_packet(NET*, unsi..</text>
</g>
<g >
<title>do_syscall_64 (5 samples, 2.23%)</title><rect x="916.1" y="581" width="26.3" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="919.07" y="591.5" >d..</text>
</g>
<g >
<title>__usecs_to_jiffies (1 samples, 0.45%)</title><rect x="473.6" y="37" width="5.2" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="476.57" y="47.5" ></text>
</g>
<g >
<title>tcp_event_data_recv (1 samples, 0.45%)</title><rect x="484.1" y="85" width="5.3" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="487.11" y="95.5" ></text>
</g>
<g >
<title>do_syscall_64 (5 samples, 2.23%)</title><rect x="173.3" y="693" width="26.3" height="15.0" fill="rgb(64,178,178)" rx="2" ry="2" />
<text  x="176.30" y="703.5" >d..</text>
</g>
<g >
<title>net_read_raw_loop(NET*, unsigned long) (21 samples, 9.38%)</title><rect x="204.9" y="725" width="110.6" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="207.91" y="735.5" >net_read_raw_..</text>
</g>
<g >
<title>Item_field::fix_fields(THD*, Item**) (2 samples, 0.89%)</title><rect x="615.8" y="661" width="10.5" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="618.80" y="671.5" ></text>
</g>
<g >
<title>ssl3_get_record (1 samples, 0.45%)</title><rect x="210.2" y="629" width="5.2" height="15.0" fill="rgb(79,192,192)" rx="2" ry="2" />
<text  x="213.18" y="639.5" ></text>
</g>
<g >
<title>generic_perform_write (1 samples, 0.45%)</title><rect x="931.9" y="501" width="5.2" height="15.0" fill="rgb(80,193,193)" rx="2" ry="2" />
<text  x="934.88" y="511.5" ></text>
</g>
<g >
<title>blk_mq_flush_plug_list (2 samples, 0.89%)</title><rect x="46.9" y="661" width="10.5" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="49.88" y="671.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (1 samples, 0.45%)</title><rect x="510.4" y="325" width="5.3" height="15.0" fill="rgb(103,213,213)" rx="2" ry="2" />
<text  x="513.45" y="335.5" ></text>
</g>
<g >
<title>THD::binlog_flush_pending_rows_event(bool, bool) (1 samples, 0.45%)</title><rect x="879.2" y="725" width="5.3" height="15.0" fill="rgb(56,170,170)" rx="2" ry="2" />
<text  x="882.20" y="735.5" ></text>
</g>
<g >
<title>__GI___lll_lock_wait (1 samples, 0.45%)</title><rect x="25.8" y="837" width="5.3" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="28.80" y="847.5" ></text>
</g>
<g >
<title>iowrite16 (1 samples, 0.45%)</title><rect x="94.3" y="277" width="5.3" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="97.29" y="287.5" ></text>
</g>
<g >
<title>trx_commit_for_mysql(trx_t*) (7 samples, 3.12%)</title><rect x="958.2" y="613" width="36.9" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="961.21" y="623.5" >trx..</text>
</g>
<g >
<title>os_event::wait_time_low(std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000l&gt; &gt;, long) (1 samples, 0.45%)</title><rect x="141.7" y="805" width="5.3" height="15.0" fill="rgb(91,203,203)" rx="2" ry="2" />
<text  x="144.70" y="815.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::commit(THD*, bool) (22 samples, 9.82%)</title><rect x="910.8" y="709" width="115.9" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="913.80" y="719.5" >MYSQL_BIN_LOG:..</text>
</g>
<g >
<title>binlog_start_trans_and_stmt(THD*, Log_event*) (2 samples, 0.89%)</title><rect x="721.2" y="645" width="10.5" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="724.16" y="655.5" ></text>
</g>
<g >
<title>virtio_queue_rq (1 samples, 0.45%)</title><rect x="94.3" y="325" width="5.3" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="97.29" y="335.5" ></text>
</g>
<g >
<title>tcp_recvmsg (1 samples, 0.45%)</title><rect x="252.3" y="389" width="5.3" height="15.0" fill="rgb(78,190,190)" rx="2" ry="2" />
<text  x="255.32" y="399.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (21 samples, 9.38%)</title><rect x="384.0" y="133" width="110.6" height="15.0" fill="rgb(102,212,212)" rx="2" ry="2" />
<text  x="387.02" y="143.5" >tcp_v4_do_rcv</text>
</g>
<g >
<title>do_futex (1 samples, 0.45%)</title><rect x="67.9" y="773" width="5.3" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="70.95" y="783.5" ></text>
</g>
<g >
<title>rec_get_converted_size_comp(dict_index_t const*, unsigned long, dfield_t const*, unsigned long, unsigned long*) (1 samples, 0.45%)</title><rect x="768.6" y="581" width="5.2" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="771.57" y="591.5" ></text>
</g>
<g >
<title>row_ins_step(que_thr_t*) (17 samples, 7.59%)</title><rect x="758.0" y="645" width="89.6" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="761.04" y="655.5" >row_ins_st..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2 samples, 0.89%)</title><rect x="57.4" y="725" width="10.5" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="60.41" y="735.5" ></text>
</g>
<g >
<title>THD::sql_parser() (21 samples, 9.38%)</title><rect x="1079.4" y="741" width="110.6" height="15.0" fill="rgb(88,199,199)" rx="2" ry="2" />
<text  x="1082.38" y="751.5" >THD::sql_pars..</text>
</g>
<g >
<title>MYSQLlex(YYSTYPE*, YYLTYPE*, THD*) (3 samples, 1.34%)</title><rect x="1168.9" y="709" width="15.8" height="15.0" fill="rgb(64,177,177)" rx="2" ry="2" />
<text  x="1171.93" y="719.5" ></text>
</g>
<g >
<title>__write (35 samples, 15.62%)</title><rect x="357.7" y="533" width="184.4" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="360.68" y="543.5" >__write</text>
</g>
<g >
<title>ha_commit_trans(THD*, bool, bool) (27 samples, 12.05%)</title><rect x="910.8" y="725" width="142.2" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="913.80" y="735.5" >ha_commit_trans(TH..</text>
</g>
<g >
<title>handle_connection (187 samples, 83.48%)</title><rect x="204.9" y="821" width="985.1" height="15.0" fill="rgb(92,204,204)" rx="2" ry="2" />
<text  x="207.91" y="831.5" >handle_connection</text>
</g>
<g >
<title>thd_is_dd_update_stmt(THD const*) (1 samples, 0.45%)</title><rect x="989.8" y="581" width="5.3" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="992.82" y="591.5" ></text>
</g>
<g >
<title>close_thread_tables(THD*) (3 samples, 1.34%)</title><rect x="879.2" y="741" width="15.8" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="882.20" y="751.5" ></text>
</g>
<g >
<title>THD::cleanup_after_query() (1 samples, 0.45%)</title><rect x="557.9" y="757" width="5.2" height="15.0" fill="rgb(53,167,167)" rx="2" ry="2" />
<text  x="560.86" y="767.5" ></text>
</g>
<g >
<title>virtqueue_notify (1 samples, 0.45%)</title><rect x="94.3" y="309" width="5.3" height="15.0" fill="rgb(55,170,170)" rx="2" ry="2" />
<text  x="97.29" y="319.5" ></text>
</g>
<g >
<title>__blk_mq_do_dispatch_sched (1 samples, 0.45%)</title><rect x="94.3" y="357" width="5.3" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="97.29" y="367.5" ></text>
</g>
<g >
<title>trx_undo_set_state_at_prepare(trx_t*, trx_undo_t*, bool, mtr_t*) (2 samples, 0.89%)</title><rect x="1042.5" y="645" width="10.5" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="1045.50" y="655.5" ></text>
</g>
<g >
<title>__GI_fsync (2 samples, 0.89%)</title><rect x="147.0" y="757" width="10.5" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="149.96" y="767.5" ></text>
</g>
<g >
<title>vio_io_wait(Vio*, enum_vio_io_event, int) (1 samples, 0.45%)</title><rect x="310.3" y="677" width="5.2" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="313.27" y="687.5" ></text>
</g>
<g >
<title>blk_finish_plug (1 samples, 0.45%)</title><rect x="94.3" y="485" width="5.3" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="97.29" y="495.5" ></text>
</g>
<g >
<title>new_sync_write (4 samples, 1.79%)</title><rect x="916.1" y="533" width="21.0" height="15.0" fill="rgb(69,183,183)" rx="2" ry="2" />
<text  x="919.07" y="543.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (2 samples, 0.89%)</title><rect x="800.2" y="581" width="10.5" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="803.18" y="591.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)(log_t*), log_t*&gt; &gt; &gt;::_M_run() (12 samples, 5.36%)</title><rect x="141.7" y="837" width="63.2" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="144.70" y="847.5" >std::t..</text>
</g>
<g >
<title>blk_mq_flush_plug_list (1 samples, 0.45%)</title><rect x="94.3" y="453" width="5.3" height="15.0" fill="rgb(94,206,206)" rx="2" ry="2" />
<text  x="97.29" y="463.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (2 samples, 0.89%)</title><rect x="57.4" y="709" width="10.5" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="60.41" y="719.5" ></text>
</g>
<g >
<title>dict_index_node_ptr_max_size(dict_index_t const*) (1 samples, 0.45%)</title><rect x="810.7" y="581" width="5.3" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="813.71" y="591.5" ></text>
</g>
<g >
<title>find_field_in_table_ref(THD*, TABLE_LIST*, char const*, unsigned long, char const*, char const*, char const*, Item**, unsigned long, bool, unsigned int*, bool, TABLE_LIST**) [clone .localalias.550] (1 samples, 0.45%)</title><rect x="621.1" y="629" width="5.2" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="624.07" y="639.5" ></text>
</g>
<g >
<title>all (224 samples, 100%)</title><rect x="10.0" y="885" width="1180.0" height="15.0" fill="rgb(76,188,188)" rx="2" ry="2" />
<text  x="13.00" y="895.5" ></text>
</g>
<g >
<title>add_pke(TABLE*, THD*, unsigned char const*) (1 samples, 0.45%)</title><rect x="742.2" y="661" width="5.3" height="15.0" fill="rgb(80,193,193)" rx="2" ry="2" />
<text  x="745.23" y="671.5" ></text>
</g>
<g >
<title>row_ins_clust_index_entry_low(unsigned int, unsigned long, dict_index_t*, unsigned long, dtuple_t*, que_thr_t*, bool) (17 samples, 7.59%)</title><rect x="758.0" y="613" width="89.6" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="761.04" y="623.5" >row_ins_cl..</text>
</g>
<g >
<title>Query_arena::add_item(Item*) (1 samples, 0.45%)</title><rect x="1084.6" y="629" width="5.3" height="15.0" fill="rgb(69,183,183)" rx="2" ry="2" />
<text  x="1087.64" y="639.5" ></text>
</g>
<g >
<title>thd_binlog_pos (1 samples, 0.45%)</title><rect x="995.1" y="645" width="5.3" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="998.09" y="655.5" ></text>
</g>
<g >
<title>thd_trx_is_read_only(THD*) (1 samples, 0.45%)</title><rect x="852.9" y="645" width="5.2" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="855.86" y="655.5" ></text>
</g>
<g >
<title>__mod_timer (1 samples, 0.45%)</title><rect x="384.0" y="85" width="5.3" height="15.0" fill="rgb(71,185,185)" rx="2" ry="2" />
<text  x="387.02" y="95.5" ></text>
</g>
<g >
<title>nf_hook_slow (1 samples, 0.45%)</title><rect x="505.2" y="293" width="5.2" height="15.0" fill="rgb(68,182,182)" rx="2" ry="2" />
<text  x="508.18" y="303.5" ></text>
</g>
<g >
<title>fsnotify (1 samples, 0.45%)</title><rect x="357.7" y="453" width="5.2" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="360.68" y="463.5" ></text>
</g>
<g >
<title>ktime_get_with_offset (2 samples, 0.89%)</title><rect x="373.5" y="213" width="10.5" height="15.0" fill="rgb(93,205,205)" rx="2" ry="2" />
<text  x="376.48" y="223.5" ></text>
</g>
<g >
<title>BIO_read (7 samples, 3.12%)</title><rect x="231.3" y="581" width="36.8" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="234.25" y="591.5" >BIO..</text>
</g>
<g >
<title>__es_remove_extent (1 samples, 0.45%)</title><rect x="931.9" y="405" width="5.2" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="934.88" y="415.5" ></text>
</g>
<g >
<title>THD::push_internal_handler(Internal_error_handler*) (1 samples, 0.45%)</title><rect x="647.4" y="677" width="5.3" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="650.41" y="687.5" ></text>
</g>
<g >
<title>Sql_cmd_dml::prepare(THD*) (15 samples, 6.70%)</title><rect x="589.5" y="725" width="79.0" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="592.46" y="735.5" >Sql_cmd_d..</text>
</g>
<g >
<title>dev_hard_start_xmit (3 samples, 1.34%)</title><rect x="368.2" y="277" width="15.8" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="371.21" y="287.5" ></text>
</g>
<g >
<title>buf_flush_page_coordinator_thread() (1 samples, 0.45%)</title><rect x="94.3" y="821" width="5.3" height="15.0" fill="rgb(64,178,178)" rx="2" ry="2" />
<text  x="97.29" y="831.5" ></text>
</g>
<g >
<title>__alloc_skb (1 samples, 0.45%)</title><rect x="521.0" y="357" width="5.2" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="523.98" y="367.5" ></text>
</g>
<g >
<title>__GI___pthread_cond_timedwait (1 samples, 0.45%)</title><rect x="31.1" y="837" width="5.2" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="34.07" y="847.5" ></text>
</g>
<g >
<title>cmp_dtuple_rec_with_match_low(dtuple_t const*, unsigned char const*, dict_index_t const*, unsigned long const*, unsigned long, unsigned long*) (1 samples, 0.45%)</title><rect x="816.0" y="565" width="5.3" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="818.98" y="575.5" ></text>
</g>
<g >
<title>__GI___pwrite (1 samples, 0.45%)</title><rect x="94.3" y="629" width="5.3" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="97.29" y="639.5" ></text>
</g>
<g >
<title>sock_read_iter (3 samples, 1.34%)</title><rect x="247.1" y="437" width="15.8" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="250.05" y="447.5" ></text>
</g>
<g >
<title>tcp_recvmsg (3 samples, 1.34%)</title><rect x="247.1" y="405" width="15.8" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="250.05" y="415.5" ></text>
</g>
<g >
<title>ext4_dio_write_iter (2 samples, 0.89%)</title><rect x="46.9" y="741" width="10.5" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="49.88" y="751.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (2 samples, 0.89%)</title><rect x="921.3" y="469" width="10.6" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="924.34" y="479.5" ></text>
</g>
<g >
<title>ssl3_read_n (7 samples, 3.12%)</title><rect x="231.3" y="597" width="36.8" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="234.25" y="607.5" >ssl..</text>
</g>
<g >
<title>new_sync_write (5 samples, 2.23%)</title><rect x="173.3" y="645" width="26.3" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="176.30" y="655.5" >n..</text>
</g>
<g >
<title>handler::ha_release_auto_increment() (1 samples, 0.45%)</title><rect x="858.1" y="725" width="5.3" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="861.13" y="735.5" ></text>
</g>
<g >
<title>rec_get_offsets_func(unsigned char const*, dict_index_t const*, unsigned long*, unsigned long, mem_block_info_t**) (1 samples, 0.45%)</title><rect x="763.3" y="565" width="5.3" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="766.30" y="575.5" ></text>
</g>
<g >
<title>hrtimer_cancel (1 samples, 0.45%)</title><rect x="83.8" y="757" width="5.2" height="15.0" fill="rgb(79,192,192)" rx="2" ry="2" />
<text  x="86.75" y="767.5" ></text>
</g>
<g >
<title>handler::ha_external_lock(THD*, int) (2 samples, 0.89%)</title><rect x="863.4" y="693" width="10.5" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="866.39" y="703.5" ></text>
</g>
<g >
<title>operator new(unsigned long) (1 samples, 0.45%)</title><rect x="742.2" y="613" width="5.3" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="745.23" y="623.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (1 samples, 0.45%)</title><rect x="78.5" y="693" width="5.3" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="81.48" y="703.5" ></text>
</g>
<g >
<title>ip_protocol_deliver_rcu (21 samples, 9.38%)</title><rect x="384.0" y="165" width="110.6" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="387.02" y="175.5" >ip_protocol_d..</text>
</g>
<g >
<title>Rpl_thd_context::set_tx_rpl_delegate_stage_status(Rpl_thd_context::enum_transaction_rpl_delegate_status) (1 samples, 0.45%)</title><rect x="721.2" y="629" width="5.2" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="724.16" y="639.5" ></text>
</g>
<g >
<title>trx_purge_attach_undo_recs(unsigned long, unsigned long) (2 samples, 0.89%)</title><rect x="120.6" y="789" width="10.6" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="123.63" y="799.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (4 samples, 1.79%)</title><rect x="916.1" y="517" width="21.0" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="919.07" y="527.5" ></text>
</g>
<g >
<title>__x64_sys_pwrite64 (5 samples, 2.23%)</title><rect x="173.3" y="677" width="26.3" height="15.0" fill="rgb(90,201,201)" rx="2" ry="2" />
<text  x="176.30" y="687.5" >_..</text>
</g>
<g >
<title>Protocol_classic::get_command(COM_DATA*, enum_server_command*) (21 samples, 9.38%)</title><rect x="204.9" y="789" width="110.6" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="207.91" y="799.5" >Protocol_clas..</text>
</g>
<g >
<title>generic_write_end (1 samples, 0.45%)</title><rect x="189.1" y="597" width="5.3" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="192.11" y="607.5" ></text>
</g>
<g >
<title>mtr_t::Command::execute() (3 samples, 1.34%)</title><rect x="826.5" y="581" width="15.8" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="829.52" y="591.5" ></text>
</g>
<g >
<title>innobase_xa_prepare(handlerton*, THD*, bool) (1 samples, 0.45%)</title><rect x="1063.6" y="693" width="5.2" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="1066.57" y="703.5" ></text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.45%)</title><rect x="515.7" y="309" width="5.3" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="518.71" y="319.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.45%)</title><rect x="199.6" y="789" width="5.3" height="15.0" fill="rgb(55,170,170)" rx="2" ry="2" />
<text  x="202.64" y="799.5" ></text>
</g>
<g >
<title>vfs_write (5 samples, 2.23%)</title><rect x="173.3" y="661" width="26.3" height="15.0" fill="rgb(102,213,213)" rx="2" ry="2" />
<text  x="176.30" y="671.5" >v..</text>
</g>
<g >
<title>copy_user_generic_string (1 samples, 0.45%)</title><rect x="183.8" y="581" width="5.3" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="186.84" y="591.5" ></text>
</g>
<g >
<title>blk_mq_sched_dispatch_requests (1 samples, 0.45%)</title><rect x="94.3" y="389" width="5.3" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="97.29" y="399.5" ></text>
</g>
<g >
<title>btr_cur_pessimistic_insert(unsigned int, btr_cur_t*, unsigned long**, mem_block_info_t**, dtuple_t*, unsigned char**, big_rec_t**, que_thr_t*, mtr_t*) (2 samples, 0.89%)</title><rect x="784.4" y="597" width="10.5" height="15.0" fill="rgb(103,214,214)" rx="2" ry="2" />
<text  x="787.38" y="607.5" ></text>
</g>
<g >
<title>ext4_es_insert_delayed_block (1 samples, 0.45%)</title><rect x="931.9" y="421" width="5.2" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="934.88" y="431.5" ></text>
</g>
<g >
<title>Gtid_state::update_gtids_impl_broadcast_and_unlock_sidnos() (2 samples, 0.89%)</title><rect x="942.4" y="645" width="10.5" height="15.0" fill="rgb(64,178,178)" rx="2" ry="2" />
<text  x="945.41" y="655.5" ></text>
</g>
<g >
<title>check_stack_object (1 samples, 0.45%)</title><rect x="257.6" y="309" width="5.3" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="260.59" y="319.5" ></text>
</g>
<g >
<title>avc_lookup (1 samples, 0.45%)</title><rect x="531.5" y="389" width="5.3" height="15.0" fill="rgb(65,178,178)" rx="2" ry="2" />
<text  x="534.52" y="399.5" ></text>
</g>
<g >
<title>aio_write (2 samples, 0.89%)</title><rect x="46.9" y="757" width="10.5" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="49.88" y="767.5" ></text>
</g>
<g >
<title>lex_one_token(Lexer_yystype*, THD*) (3 samples, 1.34%)</title><rect x="1168.9" y="693" width="15.8" height="15.0" fill="rgb(78,190,190)" rx="2" ry="2" />
<text  x="1171.93" y="703.5" ></text>
</g>
<g >
<title>ip_finish_output2 (25 samples, 11.16%)</title><rect x="368.2" y="309" width="131.7" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="371.21" y="319.5" >ip_finish_output2</text>
</g>
<g >
<title>tcp_event_data_recv (1 samples, 0.45%)</title><rect x="484.1" y="101" width="5.3" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="487.11" y="111.5" ></text>
</g>
<g >
<title>THD::send_statement_status() (41 samples, 18.30%)</title><rect x="336.6" y="773" width="216.0" height="15.0" fill="rgb(107,218,218)" rx="2" ry="2" />
<text  x="339.61" y="783.5" >THD::send_statement_status()</text>
</g>
<g >
<title>exit_to_user_mode_loop (1 samples, 0.45%)</title><rect x="952.9" y="565" width="5.3" height="15.0" fill="rgb(64,178,178)" rx="2" ry="2" />
<text  x="955.95" y="575.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 1.79%)</title><rect x="289.2" y="645" width="21.1" height="15.0" fill="rgb(64,178,178)" rx="2" ry="2" />
<text  x="292.20" y="655.5" ></text>
</g>
<g >
<title>Table_map_log_event::init_metadata_fields() (1 samples, 0.45%)</title><rect x="715.9" y="629" width="5.3" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="718.89" y="639.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.45%)</title><rect x="78.5" y="741" width="5.3" height="15.0" fill="rgb(92,204,204)" rx="2" ry="2" />
<text  x="81.48" y="751.5" ></text>
</g>
<g >
<title>tcp_sendmsg_locked (1 samples, 0.45%)</title><rect x="526.2" y="373" width="5.3" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="529.25" y="383.5" ></text>
</g>
<g >
<title>trx_undo_report_row_operation(unsigned long, unsigned long, que_thr_t*, dict_index_t*, dtuple_t const*, upd_t const*, unsigned long, unsigned char const*, unsigned long const*, unsigned long*) (2 samples, 0.89%)</title><rect x="773.8" y="581" width="10.6" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="776.84" y="591.5" ></text>
</g>
<g >
<title>Trans_delegate::trans_begin(THD*, int&amp;) (1 samples, 0.45%)</title><rect x="895.0" y="725" width="5.3" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="898.00" y="735.5" ></text>
</g>
<g >
<title>__skb_datagram_iter (1 samples, 0.45%)</title><rect x="257.6" y="357" width="5.3" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="260.59" y="367.5" ></text>
</g>
<g >
<title>TrxInInnoDB::enter(trx_t*, bool) (1 samples, 0.45%)</title><rect x="952.9" y="629" width="5.3" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="955.95" y="639.5" ></text>
</g>
<g >
<title>ksys_read (5 samples, 2.23%)</title><rect x="241.8" y="485" width="26.3" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="244.79" y="495.5" >k..</text>
</g>
<g >
<title>fsnotify (1 samples, 0.45%)</title><rect x="357.7" y="437" width="5.2" height="15.0" fill="rgb(64,178,178)" rx="2" ry="2" />
<text  x="360.68" y="447.5" ></text>
</g>
<g >
<title>trx_undo_update_cleanup(trx_t*, trx_undo_ptr_t*, unsigned char*, bool, unsigned long, mtr_t*) (1 samples, 0.45%)</title><rect x="984.6" y="549" width="5.2" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="987.55" y="559.5" ></text>
</g>
<g >
<title>fsnotify (1 samples, 0.45%)</title><rect x="262.9" y="437" width="5.2" height="15.0" fill="rgb(106,217,217)" rx="2" ry="2" />
<text  x="265.86" y="447.5" ></text>
</g>
<g >
<title>dd::cache::Dictionary_client::commit_modified_objects() (1 samples, 0.45%)</title><rect x="905.5" y="725" width="5.3" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="908.54" y="735.5" ></text>
</g>
<g >
<title>iomap_dio_rw (1 samples, 0.45%)</title><rect x="94.3" y="517" width="5.3" height="15.0" fill="rgb(54,168,168)" rx="2" ry="2" />
<text  x="97.29" y="527.5" ></text>
</g>
<g >
<title>__blk_mq_delay_run_hw_queue (1 samples, 0.45%)</title><rect x="94.3" y="421" width="5.3" height="15.0" fill="rgb(81,194,194)" rx="2" ry="2" />
<text  x="97.29" y="431.5" ></text>
</g>
<g >
<title>__check_object_size.part.0 (1 samples, 0.45%)</title><rect x="257.6" y="325" width="5.3" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="260.59" y="335.5" ></text>
</g>
<g >
<title>kmem_cache_free (1 samples, 0.45%)</title><rect x="468.3" y="69" width="5.3" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="471.30" y="79.5" ></text>
</g>
<g >
<title>open_tables_for_query(THD*, TABLE_LIST*, unsigned int) (5 samples, 2.23%)</title><rect x="642.1" y="709" width="26.4" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="645.14" y="719.5" >o..</text>
</g>
<g >
<title>down_write (1 samples, 0.45%)</title><rect x="173.3" y="597" width="5.3" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="176.30" y="607.5" ></text>
</g>
<g >
<title>blk_mq_sched_insert_requests (1 samples, 0.45%)</title><rect x="94.3" y="437" width="5.3" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="97.29" y="447.5" ></text>
</g>
<g >
<title>vio_socket_io_wait(Vio*, enum_vio_io_event) (6 samples, 2.68%)</title><rect x="283.9" y="693" width="31.6" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="286.93" y="703.5" >vi..</text>
</g>
<g >
<title>__local_bh_enable_ip (1 samples, 0.45%)</title><rect x="247.1" y="389" width="5.2" height="15.0" fill="rgb(67,180,180)" rx="2" ry="2" />
<text  x="250.05" y="399.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (1 samples, 0.45%)</title><rect x="194.4" y="613" width="5.2" height="15.0" fill="rgb(68,182,182)" rx="2" ry="2" />
<text  x="197.38" y="623.5" ></text>
</g>
<g >
<title>MEM_ROOT::FreeBlocks(MEM_ROOT::Block*) (1 samples, 0.45%)</title><rect x="331.3" y="773" width="5.3" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="334.34" y="783.5" ></text>
</g>
<g >
<title>pc_flush_slot() (1 samples, 0.45%)</title><rect x="94.3" y="805" width="5.3" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="97.29" y="815.5" ></text>
</g>
<g >
<title>parse_sql(THD*, Parser_state*, Object_creation_ctx*) (23 samples, 10.27%)</title><rect x="1068.8" y="757" width="121.2" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="1071.84" y="767.5" >parse_sql(THD*,..</text>
</g>
<g >
<title>PT_insert::make_cmd(THD*) (2 samples, 0.89%)</title><rect x="1079.4" y="709" width="10.5" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="1082.38" y="719.5" ></text>
</g>
<g >
<title>Table_map_log_event::Table_map_log_event(THD*, TABLE*, Table_id const&amp;, bool) (3 samples, 1.34%)</title><rect x="705.4" y="645" width="15.8" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="708.36" y="655.5" ></text>
</g>
<g >
<title>os_file_write_page(IORequest&amp;, char const*, int, unsigned char const*, unsigned long, unsigned long, file::Block const*) (1 samples, 0.45%)</title><rect x="94.3" y="645" width="5.3" height="15.0" fill="rgb(56,170,170)" rx="2" ry="2" />
<text  x="97.29" y="655.5" ></text>
</g>
<g >
<title>[unknown] (1 samples, 0.45%)</title><rect x="737.0" y="661" width="5.2" height="15.0" fill="rgb(78,190,190)" rx="2" ry="2" />
<text  x="739.96" y="671.5" ></text>
</g>
<g >
<title>ext4_da_map_blocks.constprop.0 (1 samples, 0.45%)</title><rect x="931.9" y="437" width="5.2" height="15.0" fill="rgb(103,213,213)" rx="2" ry="2" />
<text  x="934.88" y="447.5" ></text>
</g>
<g >
<title>file_update_time (1 samples, 0.45%)</title><rect x="178.6" y="613" width="5.2" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="181.57" y="623.5" ></text>
</g>
<g >
<title>TABLE::mark_column_used(Field*, enum_mark_columns) (1 samples, 0.45%)</title><rect x="631.6" y="661" width="5.3" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="634.61" y="671.5" ></text>
</g>
<g >
<title>my_net_read(NET*) (21 samples, 9.38%)</title><rect x="204.9" y="757" width="110.6" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="207.91" y="767.5" >my_net_read(N..</text>
</g>
<g >
<title>__x64_sys_io_submit (2 samples, 0.89%)</title><rect x="46.9" y="789" width="10.5" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="49.88" y="799.5" ></text>
</g>
<g >
<title>free_blob_buffers_and_reset(TABLE*, unsigned int) (1 samples, 0.45%)</title><rect x="889.7" y="725" width="5.3" height="15.0" fill="rgb(70,184,184)" rx="2" ry="2" />
<text  x="892.73" y="735.5" ></text>
</g>
<g >
<title>Replicated_columns_view::Replicated_columns_view(TABLE const*, Replicated_columns_view::enum_replication_flow, THD const*) (1 samples, 0.45%)</title><rect x="705.4" y="629" width="5.2" height="15.0" fill="rgb(80,193,193)" rx="2" ry="2" />
<text  x="708.36" y="639.5" ></text>
</g>
<g >
<title>page_cur_search_with_match(buf_block_t const*, dict_index_t const*, dtuple_t const*, page_cur_mode_t, unsigned long*, unsigned long*, page_cur_t*, rtr_info*) (1 samples, 0.45%)</title><rect x="816.0" y="581" width="5.3" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="818.98" y="591.5" ></text>
</g>
<g >
<title>Table_map_log_event::init_charset_field(std::function&lt;bool (Field const*)&gt;, binary_log::Table_map_event::Optional_metadata_field_type, binary_log::Table_map_event::Optional_metadata_field_type) (1 samples, 0.45%)</title><rect x="715.9" y="613" width="5.3" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="718.89" y="623.5" ></text>
</g>
<g >
<title>mtr_t::commit() (3 samples, 1.34%)</title><rect x="826.5" y="597" width="15.8" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="829.52" y="607.5" ></text>
</g>
<g >
<title>EVP_CipherFinal_ex (1 samples, 0.45%)</title><rect x="226.0" y="597" width="5.3" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="228.98" y="607.5" ></text>
</g>
<g >
<title>__kmalloc_node_track_caller (1 samples, 0.45%)</title><rect x="521.0" y="309" width="5.2" height="15.0" fill="rgb(82,194,194)" rx="2" ry="2" />
<text  x="523.98" y="319.5" ></text>
</g>
<g >
<title>blk_flush_plug (1 samples, 0.45%)</title><rect x="94.3" y="469" width="5.3" height="15.0" fill="rgb(78,191,191)" rx="2" ry="2" />
<text  x="97.29" y="479.5" ></text>
</g>
<g >
<title>iowrite16 (2 samples, 0.89%)</title><rect x="46.9" y="485" width="10.5" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="49.88" y="495.5" ></text>
</g>
<g >
<title>write_record(THD*, TABLE*, COPY_INFO*, COPY_INFO*) (29 samples, 12.95%)</title><rect x="705.4" y="709" width="152.7" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="708.36" y="719.5" >write_record(THD*, ..</text>
</g>
<g >
<title>io_submit_one (2 samples, 0.89%)</title><rect x="46.9" y="773" width="10.5" height="15.0" fill="rgb(56,170,170)" rx="2" ry="2" />
<text  x="49.88" y="783.5" ></text>
</g>
<g >
<title>skb_copy_datagram_iter (1 samples, 0.45%)</title><rect x="257.6" y="373" width="5.3" height="15.0" fill="rgb(104,215,215)" rx="2" ry="2" />
<text  x="260.59" y="383.5" ></text>
</g>
<g >
<title>Item_field::set_field(Field*) (1 samples, 0.45%)</title><rect x="615.8" y="645" width="5.3" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="618.80" y="655.5" ></text>
</g>
<g >
<title>Table_columns_view&lt;std::function&lt;bool (TABLE const*, unsigned long)&gt; &gt;::iterator::operator++() (1 samples, 0.45%)</title><rect x="710.6" y="629" width="5.3" height="15.0" fill="rgb(80,193,193)" rx="2" ry="2" />
<text  x="713.62" y="639.5" ></text>
</g>
<g >
<title>ha_innobase::update_thd(THD*) (1 samples, 0.45%)</title><rect x="663.2" y="645" width="5.3" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="666.21" y="655.5" ></text>
</g>
<g >
<title>__es_tree_search.isra.0 (1 samples, 0.45%)</title><rect x="931.9" y="373" width="5.2" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="934.88" y="383.5" ></text>
</g>
<g >
<title>setup_fields(THD*, unsigned long, bool, bool, bool, mem_root_deque&lt;Item*&gt; const*, mem_root_deque&lt;Item*&gt;*, Bounds_checked_array&lt;Item*&gt;) (7 samples, 3.12%)</title><rect x="605.3" y="677" width="36.8" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="608.27" y="687.5" >set..</text>
</g>
<g >
<title>vio_ssl_write(Vio*, unsigned char const*, unsigned long) (40 samples, 17.86%)</title><rect x="341.9" y="693" width="210.7" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="344.88" y="703.5" >vio_ssl_write(Vio*, unsigne..</text>
</g>
<g >
<title>ssl3_write_bytes (40 samples, 17.86%)</title><rect x="341.9" y="629" width="210.7" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="344.88" y="639.5" >ssl3_write_bytes</text>
</g>
<g >
<title>trans_commit(THD*, bool) (28 samples, 12.50%)</title><rect x="905.5" y="741" width="147.5" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="908.54" y="751.5" >trans_commit(THD*,..</text>
</g>
<g >
<title>ext4_da_write_begin (1 samples, 0.45%)</title><rect x="931.9" y="485" width="5.2" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="934.88" y="495.5" ></text>
</g>
<g >
<title>Double_write::enqueue(buf_flush_t, buf_page_t*, file::Block const*) (1 samples, 0.45%)</title><rect x="94.3" y="725" width="5.3" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="97.29" y="735.5" ></text>
</g>
<g >
<title>btr_cur_search_to_nth_level(dict_index_t*, unsigned long, dtuple_t const*, page_cur_mode_t, unsigned long, btr_cur_t*, unsigned long, char const*, unsigned long, mtr_t*) (6 samples, 2.68%)</title><rect x="794.9" y="597" width="31.6" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="797.91" y="607.5" >bt..</text>
</g>
<g >
<title>__tcp_transmit_skb (30 samples, 13.39%)</title><rect x="362.9" y="341" width="158.1" height="15.0" fill="rgb(80,192,192)" rx="2" ry="2" />
<text  x="365.95" y="351.5" >__tcp_transmit_skb</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.45%)</title><rect x="162.8" y="789" width="5.2" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="165.77" y="799.5" ></text>
</g>
<g >
<title>TABLE_SHARE::usable_indexes(THD const*) const (1 samples, 0.45%)</title><rect x="594.7" y="677" width="5.3" height="15.0" fill="rgb(66,179,179)" rx="2" ry="2" />
<text  x="597.73" y="687.5" ></text>
</g>
<g >
<title>my_timer_cycles() (1 samples, 0.45%)</title><rect x="752.8" y="645" width="5.2" height="15.0" fill="rgb(95,207,207)" rx="2" ry="2" />
<text  x="755.77" y="655.5" ></text>
</g>
<g >
<title>Item_field::itemize(Parse_context*, Item**) (1 samples, 0.45%)</title><rect x="1084.6" y="661" width="5.3" height="15.0" fill="rgb(71,185,185)" rx="2" ry="2" />
<text  x="1087.64" y="671.5" ></text>
</g>
<g >
<title>find_field_in_tables(THD*, Item_ident*, TABLE_LIST*, TABLE_LIST*, Item**, find_item_error_report_type, unsigned long, bool) (1 samples, 0.45%)</title><rect x="621.1" y="645" width="5.2" height="15.0" fill="rgb(58,173,173)" rx="2" ry="2" />
<text  x="624.07" y="655.5" ></text>
</g>
<g >
<title>log_flush_low(log_t&amp;) (2 samples, 0.89%)</title><rect x="147.0" y="805" width="10.5" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="149.96" y="815.5" ></text>
</g>
<g >
<title>queue_work_on (1 samples, 0.45%)</title><rect x="515.7" y="165" width="5.3" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="518.71" y="175.5" ></text>
</g>
<g >
<title>rec_init_offsets_comp_ordinary(unsigned char const*, bool, dict_index_t const*, unsigned long*) (1 samples, 0.45%)</title><rect x="763.3" y="549" width="5.3" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="766.30" y="559.5" ></text>
</g>
<g >
<title>wpacket_intern_init_len (1 samples, 0.45%)</title><rect x="341.9" y="581" width="5.2" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="344.88" y="591.5" ></text>
</g>
<g >
<title>__do_softirq (21 samples, 9.38%)</title><rect x="384.0" y="261" width="110.6" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="387.02" y="271.5" >__do_softirq</text>
</g>
<g >
<title>__test_set_page_writeback (1 samples, 0.45%)</title><rect x="152.2" y="549" width="5.3" height="15.0" fill="rgb(81,194,194)" rx="2" ry="2" />
<text  x="155.23" y="559.5" ></text>
</g>
<g >
<title>virtqueue_notify (2 samples, 0.89%)</title><rect x="46.9" y="517" width="10.5" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="49.88" y="527.5" ></text>
</g>
<g >
<title>SSL_read (1 samples, 0.45%)</title><rect x="204.9" y="709" width="5.3" height="15.0" fill="rgb(64,178,178)" rx="2" ry="2" />
<text  x="207.91" y="719.5" ></text>
</g>
<g >
<title>THD::set_query(MYSQL_LEX_CSTRING) (1 samples, 0.45%)</title><rect x="552.6" y="773" width="5.3" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="555.59" y="783.5" ></text>
</g>
<g >
<title>ha_prepare_low(THD*, bool) (5 samples, 2.23%)</title><rect x="1026.7" y="709" width="26.3" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="1029.70" y="719.5" >h..</text>
</g>
<g >
<title>vp_notify (2 samples, 0.89%)</title><rect x="46.9" y="501" width="10.5" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="49.88" y="511.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (2 samples, 0.89%)</title><rect x="800.2" y="565" width="10.5" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="803.18" y="575.5" ></text>
</g>
<g >
<title>kmem_cache_free (1 samples, 0.45%)</title><rect x="178.6" y="517" width="5.2" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="181.57" y="527.5" ></text>
</g>
<g >
<title>dispatch_command(THD*, COM_DATA const*, enum_server_command) (166 samples, 74.11%)</title><rect x="315.5" y="789" width="874.5" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="318.54" y="799.5" >dispatch_command(THD*, COM_DATA const*, enum_server_command)</text>
</g>
<g >
<title>fil_space_release_free_extents(unsigned int, unsigned long) (1 samples, 0.45%)</title><rect x="789.6" y="581" width="5.3" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="792.64" y="591.5" ></text>
</g>
<g >
<title>tcp_ack (4 samples, 1.79%)</title><rect x="463.0" y="101" width="21.1" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="466.04" y="111.5" ></text>
</g>
<g >
<title>bwrite_conv (35 samples, 15.62%)</title><rect x="357.7" y="549" width="184.4" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="360.68" y="559.5" >bwrite_conv</text>
</g>
<g >
<title>log_buffer_write(log_t&amp;, unsigned char const*, unsigned long, unsigned long) (1 samples, 0.45%)</title><rect x="1037.2" y="613" width="5.3" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="1040.23" y="623.5" ></text>
</g>
<g >
<title>launch_hook_trans_begin(THD*, TABLE_LIST*) (1 samples, 0.45%)</title><rect x="895.0" y="741" width="5.3" height="15.0" fill="rgb(52,166,166)" rx="2" ry="2" />
<text  x="898.00" y="751.5" ></text>
</g>
<g >
<title>Double_write::write_pages(buf_flush_t) (1 samples, 0.45%)</title><rect x="94.3" y="709" width="5.3" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="97.29" y="719.5" ></text>
</g>
<g >
<title>srv_purge_coordinator_thread() (7 samples, 3.12%)</title><rect x="99.6" y="821" width="36.8" height="15.0" fill="rgb(108,218,218)" rx="2" ry="2" />
<text  x="102.55" y="831.5" >srv..</text>
</g>
<g >
<title>inet6_recvmsg (3 samples, 1.34%)</title><rect x="247.1" y="421" width="15.8" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="250.05" y="431.5" ></text>
</g>
<g >
<title>ip_local_out (1 samples, 0.45%)</title><rect x="499.9" y="293" width="5.3" height="15.0" fill="rgb(92,204,204)" rx="2" ry="2" />
<text  x="502.91" y="303.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.45%)</title><rect x="120.6" y="741" width="5.3" height="15.0" fill="rgb(82,194,194)" rx="2" ry="2" />
<text  x="123.63" y="751.5" ></text>
</g>
<g >
<title>mysql_encryption_file_write(IO_CACHE*, unsigned char const*, unsigned long, int) (5 samples, 2.23%)</title><rect x="916.1" y="629" width="26.3" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="919.07" y="639.5" >m..</text>
</g>
<g >
<title>flst_add_to_empty(unsigned char*, unsigned char*, mtr_t*) (1 samples, 0.45%)</title><rect x="984.6" y="501" width="5.2" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="987.55" y="511.5" ></text>
</g>
<g >
<title>__blk_mq_run_hw_queue (1 samples, 0.45%)</title><rect x="94.3" y="405" width="5.3" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="97.29" y="415.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.45%)</title><rect x="73.2" y="741" width="5.3" height="15.0" fill="rgb(87,199,199)" rx="2" ry="2" />
<text  x="76.21" y="751.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Detached_thread, void (*)()&gt; &gt; &gt;::_M_run() (9 samples, 4.02%)</title><rect x="94.3" y="837" width="47.4" height="15.0" fill="rgb(75,187,187)" rx="2" ry="2" />
<text  x="97.29" y="847.5" >std:..</text>
</g>
<g >
<title>fill_record(THD*, TABLE*, mem_root_deque&lt;Item*&gt; const&amp;, mem_root_deque&lt;Item*&gt; const&amp;, MY_BITMAP*, MY_BITMAP*, bool) (2 samples, 0.89%)</title><rect x="689.6" y="693" width="10.5" height="15.0" fill="rgb(55,170,170)" rx="2" ry="2" />
<text  x="692.55" y="703.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (14 samples, 6.25%)</title><rect x="389.3" y="85" width="73.7" height="15.0" fill="rgb(70,184,184)" rx="2" ry="2" />
<text  x="392.29" y="95.5" >__wake_u..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.45%)</title><rect x="25.8" y="821" width="5.3" height="15.0" fill="rgb(80,193,193)" rx="2" ry="2" />
<text  x="28.80" y="831.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (1 samples, 0.45%)</title><rect x="515.7" y="277" width="5.3" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="518.71" y="287.5" ></text>
</g>
<g >
<title>ext4_dio_write_iter (1 samples, 0.45%)</title><rect x="94.3" y="533" width="5.3" height="15.0" fill="rgb(103,213,213)" rx="2" ry="2" />
<text  x="97.29" y="543.5" ></text>
</g>
<g >
<title>plugin_foreach_with_mask(THD*, bool (*)(THD*, st_plugin_int*, void*), int, unsigned int, void*) (1 samples, 0.45%)</title><rect x="1021.4" y="677" width="5.3" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="1024.43" y="687.5" ></text>
</g>
<g >
<title>Item_decimal::Item_decimal(YYLTYPE const&amp;, char const*, unsigned int, CHARSET_INFO const*) (1 samples, 0.45%)</title><rect x="1163.7" y="709" width="5.2" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="1166.66" y="719.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.45%)</title><rect x="94.3" y="597" width="5.3" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="97.29" y="607.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (1 samples, 0.45%)</title><rect x="78.5" y="709" width="5.3" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="81.48" y="719.5" ></text>
</g>
<g >
<title>trx_purge_truncate_history(purge_iter_t*, ReadView const*) (1 samples, 0.45%)</title><rect x="131.2" y="789" width="5.2" height="15.0" fill="rgb(91,203,203)" rx="2" ry="2" />
<text  x="134.16" y="799.5" ></text>
</g>
<g >
<title>loopback_xmit (3 samples, 1.34%)</title><rect x="368.2" y="261" width="15.8" height="15.0" fill="rgb(68,181,181)" rx="2" ry="2" />
<text  x="371.21" y="271.5" ></text>
</g>
<g >
<title>plugin_lock(THD*, st_plugin_int**) (1 samples, 0.45%)</title><rect x="895.0" y="709" width="5.3" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="898.00" y="719.5" ></text>
</g>
<g >
<title>ha_commit_low(THD*, bool, bool) (9 samples, 4.02%)</title><rect x="952.9" y="661" width="47.5" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="955.95" y="671.5" >ha_c..</text>
</g>
<g >
<title>Item_ident::walk(bool (Item::*)(unsigned char*), enum_walk, unsigned char*) (1 samples, 0.45%)</title><rect x="626.3" y="661" width="5.3" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="629.34" y="671.5" ></text>
</g>
<g >
<title>Fil_shard::redo_space_flush() (2 samples, 0.89%)</title><rect x="147.0" y="773" width="10.5" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="149.96" y="783.5" ></text>
</g>
<g >
<title>ext4_bio_write_page (1 samples, 0.45%)</title><rect x="152.2" y="565" width="5.3" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="155.23" y="575.5" ></text>
</g>
<g >
<title>__block_commit_write.constprop.0.isra.0 (1 samples, 0.45%)</title><rect x="189.1" y="581" width="5.3" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="192.11" y="591.5" ></text>
</g>
<g >
<title>kmem_cache_free (1 samples, 0.45%)</title><rect x="921.3" y="421" width="5.3" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="924.34" y="431.5" ></text>
</g>
<g >
<title>selinux_ip_postroute (1 samples, 0.45%)</title><rect x="505.2" y="261" width="5.2" height="15.0" fill="rgb(75,188,188)" rx="2" ry="2" />
<text  x="508.18" y="271.5" ></text>
</g>
<g >
<title>ext4_generic_write_checks (1 samples, 0.45%)</title><rect x="916.1" y="485" width="5.2" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="919.07" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.89%)</title><rect x="147.0" y="741" width="10.5" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="149.96" y="751.5" ></text>
</g>
<g >
<title>sql_strmake_with_convert(char const*, unsigned long, CHARSET_INFO const*, unsigned long, CHARSET_INFO const*, unsigned long*) (1 samples, 0.45%)</title><rect x="1079.4" y="645" width="5.2" height="15.0" fill="rgb(92,203,203)" rx="2" ry="2" />
<text  x="1082.38" y="655.5" ></text>
</g>
<g >
<title>open_table(THD*, TABLE_LIST*, Open_table_context*) (2 samples, 0.89%)</title><rect x="657.9" y="677" width="10.6" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="660.95" y="687.5" ></text>
</g>
<g >
<title>ip_local_out (1 samples, 0.45%)</title><rect x="499.9" y="309" width="5.3" height="15.0" fill="rgb(67,181,181)" rx="2" ry="2" />
<text  x="502.91" y="319.5" ></text>
</g>
<g >
<title>WPACKET_put_bytes__ (1 samples, 0.45%)</title><rect x="352.4" y="597" width="5.3" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="355.41" y="607.5" ></text>
</g>
<g >
<title>tcp_sendmsg (32 samples, 14.29%)</title><rect x="362.9" y="405" width="168.6" height="15.0" fill="rgb(92,204,204)" rx="2" ry="2" />
<text  x="365.95" y="415.5" >tcp_sendmsg</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5 samples, 2.23%)</title><rect x="241.8" y="517" width="26.3" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="244.79" y="527.5" >e..</text>
</g>
<g >
<title>ssl_write_internal (40 samples, 17.86%)</title><rect x="341.9" y="661" width="210.7" height="15.0" fill="rgb(56,170,170)" rx="2" ry="2" />
<text  x="344.88" y="671.5" >ssl_write_internal</text>
</g>
<g >
<title>read (6 samples, 2.68%)</title><rect x="236.5" y="533" width="31.6" height="15.0" fill="rgb(52,166,166)" rx="2" ry="2" />
<text  x="239.52" y="543.5" >read</text>
</g>
<g >
<title>tcp_sendmsg_locked (32 samples, 14.29%)</title><rect x="362.9" y="389" width="168.6" height="15.0" fill="rgb(89,201,201)" rx="2" ry="2" />
<text  x="365.95" y="399.5" >tcp_sendmsg_locked</text>
</g>
<g >
<title>trx_commit_low(trx_t*, mtr_t*) (6 samples, 2.68%)</title><rect x="958.2" y="581" width="31.6" height="15.0" fill="rgb(79,192,192)" rx="2" ry="2" />
<text  x="961.21" y="591.5" >tr..</text>
</g>
<g >
<title>trx_purge_rseg_get_next_history_log(trx_rseg_t*, unsigned long*) (1 samples, 0.45%)</title><rect x="120.6" y="773" width="5.3" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="123.63" y="783.5" ></text>
</g>
<g >
<title>os_file_write_retry(IORequest&amp;, char const*, pfs_os_file_t, void const*, unsigned long, unsigned long) (1 samples, 0.45%)</title><rect x="94.3" y="677" width="5.3" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="97.29" y="687.5" ></text>
</g>
<g >
<title>down_write (1 samples, 0.45%)</title><rect x="173.3" y="613" width="5.3" height="15.0" fill="rgb(55,169,169)" rx="2" ry="2" />
<text  x="176.30" y="623.5" ></text>
</g>
<g >
<title>sock_write_iter (32 samples, 14.29%)</title><rect x="362.9" y="437" width="168.6" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="365.95" y="447.5" >sock_write_iter</text>
</g>
<g >
<title>ksys_write (5 samples, 2.23%)</title><rect x="916.1" y="565" width="26.3" height="15.0" fill="rgb(77,189,189)" rx="2" ry="2" />
<text  x="919.07" y="575.5" >k..</text>
</g>
<g >
<title>PT_item_list::contextualize(Parse_context*) (1 samples, 0.45%)</title><rect x="1084.6" y="693" width="5.3" height="15.0" fill="rgb(52,167,167)" rx="2" ry="2" />
<text  x="1087.64" y="703.5" ></text>
</g>
<g >
<title>trx_undo_assign_undo(trx_t*, trx_undo_ptr_t*, unsigned long) (2 samples, 0.89%)</title><rect x="773.8" y="565" width="10.6" height="15.0" fill="rgb(102,213,213)" rx="2" ry="2" />
<text  x="776.84" y="575.5" ></text>
</g>
<g >
<title>tcp_rcv_established (21 samples, 9.38%)</title><rect x="384.0" y="117" width="110.6" height="15.0" fill="rgb(91,202,202)" rx="2" ry="2" />
<text  x="387.02" y="127.5" >tcp_rcv_estab..</text>
</g>
<g >
<title>[unknown] (1 samples, 0.45%)</title><rect x="278.7" y="693" width="5.2" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="281.66" y="703.5" ></text>
</g>
<g >
<title>mpage_process_page_bufs (1 samples, 0.45%)</title><rect x="147.0" y="581" width="5.2" height="15.0" fill="rgb(61,175,175)" rx="2" ry="2" />
<text  x="149.96" y="591.5" ></text>
</g>
<g >
<title>ha_innobase::reset_template() (1 samples, 0.45%)</title><rect x="868.7" y="677" width="5.2" height="15.0" fill="rgb(70,184,184)" rx="2" ry="2" />
<text  x="871.66" y="687.5" ></text>
</g>
<g >
<title>ext4_journal_check_start (1 samples, 0.45%)</title><rect x="926.6" y="421" width="5.3" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="929.61" y="431.5" ></text>
</g>
<g >
<title>purge_node_t::free_lob_pages() (1 samples, 0.45%)</title><rect x="115.4" y="789" width="5.2" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="118.36" y="799.5" ></text>
</g>
<g >
<title>buf_is_block_in_instance(buf_pool_t const*, buf_block_t const*) (1 samples, 0.45%)</title><rect x="805.4" y="533" width="5.3" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="808.45" y="543.5" ></text>
</g>
<g >
<title>__GI___pwrite (5 samples, 2.23%)</title><rect x="173.3" y="725" width="26.3" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="176.30" y="735.5" >_..</text>
</g>
<g >
<title>log_flush_notifier(log_t*) (1 samples, 0.45%)</title><rect x="141.7" y="821" width="5.3" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="144.70" y="831.5" ></text>
</g>
<g >
<title>PolicyMutex&lt;TTASEventMutex&lt;GenericPolicy&gt; &gt;::enter(unsigned int, unsigned int, char const*, unsigned int) (1 samples, 0.45%)</title><rect x="884.5" y="661" width="5.2" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="887.46" y="671.5" ></text>
</g>
<g >
<title>log_writer_write_buffer(log_t&amp;, unsigned long) (6 samples, 2.68%)</title><rect x="168.0" y="805" width="31.6" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="171.04" y="815.5" >lo..</text>
</g>
<g >
<title>blk_update_request (1 samples, 0.45%)</title><rect x="515.7" y="213" width="5.3" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="518.71" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 1.79%)</title><rect x="289.2" y="661" width="21.1" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="292.20" y="671.5" ></text>
</g>
<g >
<title>enqueue_to_backlog (1 samples, 0.45%)</title><rect x="368.2" y="213" width="5.3" height="15.0" fill="rgb(95,207,207)" rx="2" ry="2" />
<text  x="371.21" y="223.5" ></text>
</g>
<g >
<title>syscall_exit_work (1 samples, 0.45%)</title><rect x="536.8" y="469" width="5.3" height="15.0" fill="rgb(95,207,207)" rx="2" ry="2" />
<text  x="539.79" y="479.5" ></text>
</g>
<g >
<title>syscall (2 samples, 0.89%)</title><rect x="46.9" y="837" width="10.5" height="15.0" fill="rgb(64,178,178)" rx="2" ry="2" />
<text  x="49.88" y="847.5" ></text>
</g>
<g >
<title>ext4_journal_check_start (1 samples, 0.45%)</title><rect x="926.6" y="405" width="5.3" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="929.61" y="415.5" ></text>
</g>
<g >
<title>handler::ha_write_row(unsigned char*) (29 samples, 12.95%)</title><rect x="705.4" y="693" width="152.7" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="708.36" y="703.5" >handler::ha_write_r..</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.45%)</title><rect x="162.8" y="773" width="5.2" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="165.77" y="783.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (21 samples, 9.38%)</title><rect x="384.0" y="181" width="110.6" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="387.02" y="191.5" >ip_local_deli..</text>
</g>
<g >
<title>str2my_decimal(unsigned int, char const*, unsigned long, CHARSET_INFO const*, my_decimal*) (1 samples, 0.45%)</title><rect x="1163.7" y="693" width="5.2" height="15.0" fill="rgb(79,192,192)" rx="2" ry="2" />
<text  x="1166.66" y="703.5" ></text>
</g>
<g >
<title>__blk_mq_delay_run_hw_queue (2 samples, 0.89%)</title><rect x="46.9" y="629" width="10.5" height="15.0" fill="rgb(96,208,208)" rx="2" ry="2" />
<text  x="49.88" y="639.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.45%)</title><rect x="773.8" y="517" width="5.3" height="15.0" fill="rgb(80,192,192)" rx="2" ry="2" />
<text  x="776.84" y="527.5" ></text>
</g>
<g >
<title>ut_delay(unsigned long) (1 samples, 0.45%)</title><rect x="136.4" y="821" width="5.3" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="139.43" y="831.5" ></text>
</g>
<g >
<title>find_field_in_table(TABLE*, char const*, bool, unsigned int*) (1 samples, 0.45%)</title><rect x="621.1" y="613" width="5.2" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="624.07" y="623.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.45%)</title><rect x="94.3" y="613" width="5.3" height="15.0" fill="rgb(91,203,203)" rx="2" ry="2" />
<text  x="97.29" y="623.5" ></text>
</g>
<g >
<title>my_b_flush_io_cache(IO_CACHE*, int) (5 samples, 2.23%)</title><rect x="916.1" y="645" width="26.3" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="919.07" y="655.5" >m..</text>
</g>
<g >
<title>ipv4_dst_check (1 samples, 0.45%)</title><rect x="362.9" y="277" width="5.3" height="15.0" fill="rgb(69,183,183)" rx="2" ry="2" />
<text  x="365.95" y="287.5" ></text>
</g>
<g >
<title>_copy_from_user (1 samples, 0.45%)</title><rect x="305.0" y="581" width="5.3" height="15.0" fill="rgb(102,213,213)" rx="2" ry="2" />
<text  x="308.00" y="591.5" ></text>
</g>
<g >
<title>try_to_wake_up (2 samples, 0.89%)</title><rect x="57.4" y="741" width="10.5" height="15.0" fill="rgb(89,200,200)" rx="2" ry="2" />
<text  x="60.41" y="751.5" ></text>
</g>
<g >
<title>start_thread (187 samples, 83.48%)</title><rect x="204.9" y="853" width="985.1" height="15.0" fill="rgb(65,179,179)" rx="2" ry="2" />
<text  x="207.91" y="863.5" >start_thread</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;Malloc_allocator&lt;std::__detail::_Hash_node&lt;std::string, true&gt; &gt; &gt;::_M_allocate_buckets(unsigned long) (1 samples, 0.45%)</title><rect x="652.7" y="661" width="5.2" height="15.0" fill="rgb(106,216,216)" rx="2" ry="2" />
<text  x="655.68" y="671.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.45%)</title><rect x="1042.5" y="629" width="5.3" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="1045.50" y="639.5" ></text>
</g>
<g >
<title>innobase_xa_prepare(handlerton*, THD*, bool) (5 samples, 2.23%)</title><rect x="1026.7" y="693" width="26.3" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="1029.70" y="703.5" >i..</text>
</g>
<g >
<title>__ext4_journal_start_sb (1 samples, 0.45%)</title><rect x="926.6" y="437" width="5.3" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="929.61" y="447.5" ></text>
</g>
<g >
<title>ha_innobase::extra(ha_extra_function) (1 samples, 0.45%)</title><rect x="884.5" y="693" width="5.2" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="887.46" y="703.5" ></text>
</g>
<g >
<title>btr_page_create(buf_block_t*, page_zip_des_t*, dict_index_t*, unsigned long, mtr_t*) (1 samples, 0.45%)</title><rect x="784.4" y="565" width="5.2" height="15.0" fill="rgb(76,189,189)" rx="2" ry="2" />
<text  x="787.38" y="575.5" ></text>
</g>
<g >
<title>futex_wait (1 samples, 0.45%)</title><rect x="25.8" y="757" width="5.3" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="28.80" y="767.5" ></text>
</g>
<g >
<title>THD::Query_plan::set_query_plan(enum_sql_command, LEX*, bool) (1 samples, 0.45%)</title><rect x="873.9" y="741" width="5.3" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="876.93" y="751.5" ></text>
</g>
<g >
<title>Sql_cmd_insert_values::execute_inner(THD*) (36 samples, 16.07%)</title><rect x="668.5" y="725" width="189.6" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="671.48" y="735.5" >Sql_cmd_insert_values::e..</text>
</g>
<g >
<title>__strcmp_avx2 (2 samples, 0.89%)</title><rect x="36.3" y="805" width="10.6" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="39.34" y="815.5" ></text>
</g>
<g >
<title>mtr_t::check_nolog_and_mark() (1 samples, 0.45%)</title><rect x="1026.7" y="661" width="5.3" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="1029.70" y="671.5" ></text>
</g>
<g >
<title>iomap_dio_rw (2 samples, 0.89%)</title><rect x="46.9" y="725" width="10.5" height="15.0" fill="rgb(94,206,206)" rx="2" ry="2" />
<text  x="49.88" y="735.5" ></text>
</g>
<g >
<title>handler::ha_reset() (1 samples, 0.45%)</title><rect x="884.5" y="709" width="5.2" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="887.46" y="719.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.45%)</title><rect x="773.8" y="533" width="5.3" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="776.84" y="543.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::commit(THD*, bool) (1 samples, 0.45%)</title><rect x="1053.0" y="709" width="5.3" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="1056.04" y="719.5" ></text>
</g>
<g >
<title>ha_innobase::extra(ha_extra_function) (1 samples, 0.45%)</title><rect x="663.2" y="661" width="5.3" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="666.21" y="671.5" ></text>
</g>
<g >
<title>security_file_permission (1 samples, 0.45%)</title><rect x="262.9" y="453" width="5.2" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="265.86" y="463.5" ></text>
</g>
<g >
<title>buf_flush_page(buf_pool_t*, buf_page_t*, buf_flush_t, bool) (1 samples, 0.45%)</title><rect x="94.3" y="757" width="5.3" height="15.0" fill="rgb(81,194,194)" rx="2" ry="2" />
<text  x="97.29" y="767.5" ></text>
</g>
<g >
<title>tcp_queue_rcv (1 samples, 0.45%)</title><rect x="489.4" y="85" width="5.2" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="492.38" y="95.5" ></text>
</g>
<g >
<title>__iomap_dio_rw (1 samples, 0.45%)</title><rect x="94.3" y="501" width="5.3" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="97.29" y="511.5" ></text>
</g>
<g >
<title>blk_mq_dispatch_rq_list (2 samples, 0.89%)</title><rect x="46.9" y="549" width="10.5" height="15.0" fill="rgb(56,171,171)" rx="2" ry="2" />
<text  x="49.88" y="559.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.45%)</title><rect x="152.2" y="517" width="5.3" height="15.0" fill="rgb(94,206,206)" rx="2" ry="2" />
<text  x="155.23" y="527.5" ></text>
</g>
<g >
<title>LEX::make_sql_cmd(Parse_tree_root*) (2 samples, 0.89%)</title><rect x="1079.4" y="725" width="10.5" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="1082.38" y="735.5" ></text>
</g>
<g >
<title>Protocol_classic::send_ok(unsigned int, unsigned int, unsigned long long, unsigned long long, char const*) (41 samples, 18.30%)</title><rect x="336.6" y="757" width="216.0" height="15.0" fill="rgb(83,196,196)" rx="2" ry="2" />
<text  x="339.61" y="767.5" >Protocol_classic::send_ok(un..</text>
</g>
<g >
<title>os_file_write_func(IORequest&amp;, char const*, int, void const*, unsigned long, unsigned long) (5 samples, 2.23%)</title><rect x="173.3" y="757" width="26.3" height="15.0" fill="rgb(66,179,179)" rx="2" ry="2" />
<text  x="176.30" y="767.5" >o..</text>
</g>
<g >
<title>buf_page_hash_get_low(buf_pool_t*, page_id_t const&amp;) (1 samples, 0.45%)</title><rect x="120.6" y="709" width="5.3" height="15.0" fill="rgb(71,184,184)" rx="2" ry="2" />
<text  x="123.63" y="719.5" ></text>
</g>
<g >
<title>ActiveTranx::find_active_tranx_node(char const*, unsigned long long) (1 samples, 0.45%)</title><rect x="1016.2" y="645" width="5.2" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="1019.16" y="655.5" ></text>
</g>
<g >
<title>innobase_commit_low(trx_t*) (7 samples, 3.12%)</title><rect x="958.2" y="629" width="36.9" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="961.21" y="639.5" >inn..</text>
</g>
<g >
<title>futex_wait_setup (1 samples, 0.45%)</title><rect x="25.8" y="725" width="5.3" height="15.0" fill="rgb(92,204,204)" rx="2" ry="2" />
<text  x="28.80" y="735.5" ></text>
</g>
<g >
<title>lex_start(THD*) (1 samples, 0.45%)</title><rect x="563.1" y="757" width="5.3" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="566.12" y="767.5" ></text>
</g>
<g >
<title>flst_add_first(unsigned char*, unsigned char*, mtr_t*) (1 samples, 0.45%)</title><rect x="984.6" y="517" width="5.2" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="987.55" y="527.5" ></text>
</g>
<g >
<title>Field_real::store_decimal(my_decimal const*) (2 samples, 0.89%)</title><rect x="689.6" y="661" width="10.5" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="692.55" y="671.5" ></text>
</g>
<g >
<title>trans_commit_stmt(THD*, bool) (3 samples, 1.34%)</title><rect x="1053.0" y="741" width="15.8" height="15.0" fill="rgb(102,213,213)" rx="2" ry="2" />
<text  x="1056.04" y="751.5" ></text>
</g>
<g >
<title>process_backlog (21 samples, 9.38%)</title><rect x="384.0" y="213" width="110.6" height="15.0" fill="rgb(94,206,206)" rx="2" ry="2" />
<text  x="387.02" y="223.5" >process_backlog</text>
</g>
<g >
<title>THD::binlog_write_table_map(TABLE*, bool, bool) (5 samples, 2.23%)</title><rect x="705.4" y="661" width="26.3" height="15.0" fill="rgb(69,183,183)" rx="2" ry="2" />
<text  x="708.36" y="671.5" >T..</text>
</g>
<g >
<title>btr_cur_optimistic_insert(unsigned long, btr_cur_t*, unsigned long**, mem_block_info_t**, dtuple_t*, unsigned char**, big_rec_t**, que_thr_t*, mtr_t*) (5 samples, 2.23%)</title><rect x="758.0" y="597" width="26.4" height="15.0" fill="rgb(81,194,194)" rx="2" ry="2" />
<text  x="761.04" y="607.5" >b..</text>
</g>
<g >
<title>__usecs_to_jiffies (1 samples, 0.45%)</title><rect x="473.6" y="53" width="5.2" height="15.0" fill="rgb(56,171,171)" rx="2" ry="2" />
<text  x="476.57" y="63.5" ></text>
</g>
<g >
<title>tls13_enc (1 samples, 0.45%)</title><rect x="547.3" y="597" width="5.3" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="550.32" y="607.5" ></text>
</g>
<g >
<title>blk_complete_reqs (1 samples, 0.45%)</title><rect x="515.7" y="245" width="5.3" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="518.71" y="255.5" ></text>
</g>
<g >
<title>tcp_ack (1 samples, 0.45%)</title><rect x="463.0" y="85" width="5.3" height="15.0" fill="rgb(65,179,179)" rx="2" ry="2" />
<text  x="466.04" y="95.5" ></text>
</g>
<g >
<title>ha_innobase::write_row(unsigned char*) (20 samples, 8.93%)</title><rect x="752.8" y="677" width="105.3" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="755.77" y="687.5" >ha_innobase:..</text>
</g>
<g >
<title>sk_reset_timer (1 samples, 0.45%)</title><rect x="384.0" y="101" width="5.3" height="15.0" fill="rgb(82,195,195)" rx="2" ry="2" />
<text  x="387.02" y="111.5" ></text>
</g>
<g >
<title>Fil_shard::do_redo_io(IORequest const&amp;, page_id_t const&amp;, page_size_t const&amp;, unsigned long, unsigned long, void*) (5 samples, 2.23%)</title><rect x="173.3" y="773" width="26.3" height="15.0" fill="rgb(78,191,191)" rx="2" ry="2" />
<text  x="176.30" y="783.5" >F..</text>
</g>
<g >
<title>blk_mq_sched_insert_requests (2 samples, 0.89%)</title><rect x="46.9" y="645" width="10.5" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="49.88" y="655.5" ></text>
</g>
<g >
<title>net_read_packet(NET*, unsigned long*) (21 samples, 9.38%)</title><rect x="204.9" y="741" width="110.6" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="207.91" y="751.5" >net_read_pack..</text>
</g>
<g >
<title>ext4_dirty_inode (1 samples, 0.45%)</title><rect x="926.6" y="453" width="5.3" height="15.0" fill="rgb(65,178,178)" rx="2" ry="2" />
<text  x="929.61" y="463.5" ></text>
</g>
<g >
<title>ssl3_write (40 samples, 17.86%)</title><rect x="341.9" y="645" width="210.7" height="15.0" fill="rgb(101,211,211)" rx="2" ry="2" />
<text  x="344.88" y="655.5" >ssl3_write</text>
</g>
<g >
<title>log_flusher(log_t*) (2 samples, 0.89%)</title><rect x="147.0" y="821" width="10.5" height="15.0" fill="rgb(106,217,217)" rx="2" ry="2" />
<text  x="149.96" y="831.5" ></text>
</g>
<g >
<title>std::string::reserve(unsigned long) (1 samples, 0.45%)</title><rect x="742.2" y="645" width="5.3" height="15.0" fill="rgb(105,216,216)" rx="2" ry="2" />
<text  x="745.23" y="655.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (1 samples, 0.45%)</title><rect x="194.4" y="629" width="5.2" height="15.0" fill="rgb(64,177,177)" rx="2" ry="2" />
<text  x="197.38" y="639.5" ></text>
</g>
<g >
<title>ssl3_read_bytes (12 samples, 5.36%)</title><rect x="215.4" y="629" width="63.3" height="15.0" fill="rgb(68,181,181)" rx="2" ry="2" />
<text  x="218.45" y="639.5" >ssl3_r..</text>
</g>
<g >
<title>blk_mq_end_request (1 samples, 0.45%)</title><rect x="515.7" y="229" width="5.3" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="518.71" y="239.5" ></text>
</g>
<g >
<title>dd::cache::Local_multi_map&lt;dd::Event&gt;::erase() (1 samples, 0.45%)</title><rect x="905.5" y="693" width="5.3" height="15.0" fill="rgb(56,171,171)" rx="2" ry="2" />
<text  x="908.54" y="703.5" ></text>
</g>
<g >
<title>bio_write_intern (36 samples, 16.07%)</title><rect x="357.7" y="565" width="189.6" height="15.0" fill="rgb(63,177,177)" rx="2" ry="2" />
<text  x="360.68" y="575.5" >bio_write_intern</text>
</g>
<g >
<title>find_field_in_tables(THD*, Item_ident*, TABLE_LIST*, TABLE_LIST*, Item**, find_item_error_report_type, unsigned long, bool) (1 samples, 0.45%)</title><rect x="636.9" y="661" width="5.2" height="15.0" fill="rgb(93,204,204)" rx="2" ry="2" />
<text  x="639.88" y="671.5" ></text>
</g>
<g >
<title>page_cur_insert_rec_low(unsigned char*, dict_index_t*, unsigned char const*, unsigned long*, mtr_t*) (1 samples, 0.45%)</title><rect x="758.0" y="581" width="5.3" height="15.0" fill="rgb(90,202,202)" rx="2" ry="2" />
<text  x="761.04" y="591.5" ></text>
</g>
<g >
<title>net_send_ok(THD*, unsigned int, unsigned int, unsigned long long, unsigned long long, char const*, bool) (41 samples, 18.30%)</title><rect x="336.6" y="741" width="216.0" height="15.0" fill="rgb(69,183,183)" rx="2" ry="2" />
<text  x="339.61" y="751.5" >net_send_ok(THD*, unsigned i..</text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.45%)</title><rect x="1042.5" y="597" width="5.3" height="15.0" fill="rgb(73,186,186)" rx="2" ry="2" />
<text  x="1045.50" y="607.5" ></text>
</g>
<g >
<title>binlog_cache_data::write_event(Log_event*) (1 samples, 0.45%)</title><rect x="726.4" y="629" width="5.3" height="15.0" fill="rgb(67,181,181)" rx="2" ry="2" />
<text  x="729.43" y="639.5" ></text>
</g>
<g >
<title>ext4_sync_file (2 samples, 0.89%)</title><rect x="147.0" y="693" width="10.5" height="15.0" fill="rgb(109,219,219)" rx="2" ry="2" />
<text  x="149.96" y="703.5" ></text>
</g>
<g >
<title>ip_output (1 samples, 0.45%)</title><rect x="505.2" y="309" width="5.2" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="508.18" y="319.5" ></text>
</g>
<g >
<title>Buf_fetch&lt;Buf_fetch_normal&gt;::single_page() (1 samples, 0.45%)</title><rect x="1042.5" y="613" width="5.3" height="15.0" fill="rgb(97,208,208)" rx="2" ry="2" />
<text  x="1045.50" y="623.5" ></text>
</g>
<g >
<title>futex_wait_setup (1 samples, 0.45%)</title><rect x="25.8" y="741" width="5.3" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="28.80" y="751.5" ></text>
</g>
<g >
<title>close_thread_table(THD*, TABLE**) (1 samples, 0.45%)</title><rect x="884.5" y="725" width="5.2" height="15.0" fill="rgb(69,183,183)" rx="2" ry="2" />
<text  x="887.46" y="735.5" ></text>
</g>
<g >
<title>__mod_timer (1 samples, 0.45%)</title><rect x="384.0" y="69" width="5.3" height="15.0" fill="rgb(77,189,189)" rx="2" ry="2" />
<text  x="387.02" y="79.5" ></text>
</g>
<g >
<title>SSL_write (40 samples, 17.86%)</title><rect x="341.9" y="677" width="210.7" height="15.0" fill="rgb(92,203,203)" rx="2" ry="2" />
<text  x="344.88" y="687.5" >SSL_write</text>
</g>
<g >
<title>fill_record_n_invoke_before_triggers(THD*, COPY_INFO*, mem_root_deque&lt;Item*&gt; const&amp;, mem_root_deque&lt;Item*&gt; const&amp;, TABLE*, enum_trigger_event_type, int, bool, bool*) (3 samples, 1.34%)</title><rect x="684.3" y="709" width="15.8" height="15.0" fill="rgb(103,213,213)" rx="2" ry="2" />
<text  x="687.29" y="719.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned (1 samples, 0.45%)</title><rect x="731.7" y="597" width="5.3" height="15.0" fill="rgb(90,201,201)" rx="2" ry="2" />
<text  x="734.70" y="607.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.45%)</title><rect x="152.2" y="533" width="5.3" height="15.0" fill="rgb(106,217,217)" rx="2" ry="2" />
<text  x="155.23" y="543.5" ></text>
</g>
<g >
<title>sock_poll (1 samples, 0.45%)</title><rect x="299.7" y="565" width="5.3" height="15.0" fill="rgb(105,215,215)" rx="2" ry="2" />
<text  x="302.73" y="575.5" ></text>
</g>
<g >
<title>do_syscall_64 (5 samples, 2.23%)</title><rect x="241.8" y="501" width="26.3" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="244.79" y="511.5" >d..</text>
</g>
<g >
<title>lock_trx_release_locks(trx_t*) (1 samples, 0.45%)</title><rect x="958.2" y="565" width="5.3" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="961.21" y="575.5" ></text>
</g>
<g >
<title>void ut_list_append&lt;ut_list_base&lt;dyn_buf_t&lt;512ul&gt;::block_t, ut_list_base_explicit_getter&lt;dyn_buf_t&lt;512ul&gt;::block_t, &amp;dyn_buf_t&lt;512ul&gt;::block_t::m_node&gt; &gt; &gt;(ut_list_base&lt;dyn_buf_t&lt;512ul&gt;::block_t, ut_list_base_explicit_getter&lt;dyn_buf_t&lt;512ul&gt;::block_t, &amp;dyn_buf_t&lt;512ul&gt;::block_t::m_node&gt; &gt;&amp;, ut_list_base&lt;dyn_buf_t&lt;512ul&gt;::block_t, ut_list_base_explicit_getter&lt;dyn_buf_t&lt;512ul&gt;::block_t, &amp;dyn_buf_t&lt;512ul&gt;::block_t::m_node&gt; &gt;::elem_type*) (1 samples, 0.45%)</title><rect x="125.9" y="773" width="5.3" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="128.89" y="783.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.45%)</title><rect x="83.8" y="725" width="5.2" height="15.0" fill="rgb(72,185,185)" rx="2" ry="2" />
<text  x="86.75" y="735.5" ></text>
</g>
<g >
<title>ha_innobase::update_thd(THD*) (1 samples, 0.45%)</title><rect x="884.5" y="677" width="5.2" height="15.0" fill="rgb(91,203,203)" rx="2" ry="2" />
<text  x="887.46" y="687.5" ></text>
</g>
<g >
<title>Buf_fetch_normal::get(buf_block_t*&amp;) (1 samples, 0.45%)</title><rect x="805.4" y="549" width="5.3" height="15.0" fill="rgb(101,212,212)" rx="2" ry="2" />
<text  x="808.45" y="559.5" ></text>
</g>
<g >
<title>Protocol_classic::read_packet() (21 samples, 9.38%)</title><rect x="204.9" y="773" width="110.6" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="207.91" y="783.5" >Protocol_clas..</text>
</g>
<g >
<title>row_ins_clust_index_entry(dict_index_t*, dtuple_t*, que_thr_t*, bool) (17 samples, 7.59%)</title><rect x="758.0" y="629" width="89.6" height="15.0" fill="rgb(108,219,219)" rx="2" ry="2" />
<text  x="761.04" y="639.5" >row_ins_cl..</text>
</g>
<g >
<title>__x64_sys_ppoll (4 samples, 1.79%)</title><rect x="289.2" y="629" width="21.1" height="15.0" fill="rgb(67,181,181)" rx="2" ry="2" />
<text  x="292.20" y="639.5" ></text>
</g>
<g >
<title>ha_commit_trans(THD*, bool, bool) (3 samples, 1.34%)</title><rect x="1053.0" y="725" width="15.8" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="1056.04" y="735.5" ></text>
</g>
<g >
<title>hash_futex (1 samples, 0.45%)</title><rect x="162.8" y="709" width="5.2" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="165.77" y="719.5" ></text>
</g>
<g >
<title>page_cur_search_with_match_bytes(buf_block_t const*, dict_index_t const*, dtuple_t const*, page_cur_mode_t, unsigned long*, unsigned long*, unsigned long*, unsigned long*, page_cur_t*) (1 samples, 0.45%)</title><rect x="821.3" y="581" width="5.2" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="824.25" y="591.5" ></text>
</g>
<g >
<title>WPACKET_memcpy (1 samples, 0.45%)</title><rect x="347.1" y="597" width="5.3" height="15.0" fill="rgb(74,187,187)" rx="2" ry="2" />
<text  x="350.14" y="607.5" ></text>
</g>
<g >
<title>virtio_queue_rq (2 samples, 0.89%)</title><rect x="46.9" y="533" width="10.5" height="15.0" fill="rgb(95,206,206)" rx="2" ry="2" />
<text  x="49.88" y="543.5" ></text>
</g>
<g >
<title>LEX::set_trg_event_type_for_tables() (1 samples, 0.45%)</title><rect x="326.1" y="773" width="5.2" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="329.07" y="783.5" ></text>
</g>
<g >
<title>blk_finish_plug (2 samples, 0.89%)</title><rect x="46.9" y="693" width="10.5" height="15.0" fill="rgb(85,197,197)" rx="2" ry="2" />
<text  x="49.88" y="703.5" ></text>
</g>
<g >
<title>pfs_spawn_thread (187 samples, 83.48%)</title><rect x="204.9" y="837" width="985.1" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="207.91" y="847.5" >pfs_spawn_thread</text>
</g>
<g >
<title>check_insert_fields(THD*, TABLE_LIST*, mem_root_deque&lt;Item*&gt;*) (8 samples, 3.57%)</title><rect x="600.0" y="693" width="42.1" height="15.0" fill="rgb(102,212,212)" rx="2" ry="2" />
<text  x="603.00" y="703.5" >che..</text>
</g>
<g >
<title>os_file_write_func(IORequest&amp;, char const*, int, void const*, unsigned long, unsigned long) (1 samples, 0.45%)</title><rect x="94.3" y="661" width="5.3" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="97.29" y="671.5" ></text>
</g>
<g >
<title>sock_def_readable (14 samples, 6.25%)</title><rect x="389.3" y="101" width="73.7" height="15.0" fill="rgb(68,182,182)" rx="2" ry="2" />
<text  x="392.29" y="111.5" >sock_def..</text>
</g>
<g >
<title>__x64_sys_futex (1 samples, 0.45%)</title><rect x="25.8" y="789" width="5.3" height="15.0" fill="rgb(65,179,179)" rx="2" ry="2" />
<text  x="28.80" y="799.5" ></text>
</g>
<g >
<title>Table_columns_view&lt;std::function&lt;bool (TABLE const*, unsigned long)&gt; &gt;::init_fields_bitmaps() (1 samples, 0.45%)</title><rect x="731.7" y="613" width="5.3" height="15.0" fill="rgb(99,210,210)" rx="2" ry="2" />
<text  x="734.70" y="623.5" ></text>
</g>
<g >
<title>btr_page_split_and_insert(unsigned int, btr_cur_t*, unsigned long**, mem_block_info_t**, dtuple_t const*, mtr_t*) (1 samples, 0.45%)</title><rect x="784.4" y="581" width="5.2" height="15.0" fill="rgb(50,165,165)" rx="2" ry="2" />
<text  x="787.38" y="591.5" ></text>
</g>
<g >
<title>new_sync_write (1 samples, 0.45%)</title><rect x="94.3" y="549" width="5.3" height="15.0" fill="rgb(58,172,172)" rx="2" ry="2" />
<text  x="97.29" y="559.5" ></text>
</g>
<g >
<title>lock_unlock_table_autoinc(trx_t*) (1 samples, 0.45%)</title><rect x="1063.6" y="677" width="5.2" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="1066.57" y="687.5" ></text>
</g>
<g >
<title>trx_undo_gtid_add_update_undo(trx_t*, bool, bool) (1 samples, 0.45%)</title><rect x="989.8" y="597" width="5.3" height="15.0" fill="rgb(96,207,207)" rx="2" ry="2" />
<text  x="992.82" y="607.5" ></text>
</g>
<g >
<title>dispatch_sql_command(THD*, Parser_state*) (120 samples, 53.57%)</title><rect x="557.9" y="773" width="632.1" height="15.0" fill="rgb(67,181,181)" rx="2" ry="2" />
<text  x="560.86" y="783.5" >dispatch_sql_command(THD*, Parser_state*)</text>
</g>
<g >
<title>memory_alloc_noop(unsigned int, unsigned long, PSI_thread**) (1 samples, 0.45%)</title><rect x="341.9" y="533" width="5.2" height="15.0" fill="rgb(91,203,203)" rx="2" ry="2" />
<text  x="344.88" y="543.5" ></text>
</g>
<g >
<title>__lll_lock_wake (1 samples, 0.45%)</title><rect x="162.8" y="805" width="5.2" height="15.0" fill="rgb(86,198,198)" rx="2" ry="2" />
<text  x="165.77" y="815.5" ></text>
</g>
<g >
<title>buf_page_get_gen(page_id_t const&amp;, page_size_t const&amp;, unsigned long, buf_block_t*, Page_fetch, ut::Location, mtr_t*, bool) (1 samples, 0.45%)</title><rect x="773.8" y="549" width="5.3" height="15.0" fill="rgb(65,179,179)" rx="2" ry="2" />
<text  x="776.84" y="559.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (14 samples, 6.25%)</title><rect x="389.3" y="53" width="73.7" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="392.29" y="63.5" >_raw_spi..</text>
</g>
<g >
<title>mysqld (224 samples, 100.00%)</title><rect x="10.0" y="869" width="1180.0" height="15.0" fill="rgb(57,171,171)" rx="2" ry="2" />
<text  x="13.00" y="879.5" >mysqld</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (14 samples, 6.25%)</title><rect x="389.3" y="69" width="73.7" height="15.0" fill="rgb(82,195,195)" rx="2" ry="2" />
<text  x="392.29" y="79.5" >_raw_spi..</text>
</g>
<g >
<title>new_sync_read (3 samples, 1.34%)</title><rect x="247.1" y="453" width="15.8" height="15.0" fill="rgb(70,183,183)" rx="2" ry="2" />
<text  x="250.05" y="463.5" ></text>
</g>
<g >
<title>hrtimer_try_to_cancel.part.0 (1 samples, 0.45%)</title><rect x="83.8" y="741" width="5.2" height="15.0" fill="rgb(66,180,180)" rx="2" ry="2" />
<text  x="86.75" y="751.5" ></text>
</g>
<g >
<title>mysql_audit_acquire_plugins(THD*, mysql_event_class_t, unsigned long, bool) (1 samples, 0.45%)</title><rect x="900.3" y="725" width="5.2" height="15.0" fill="rgb(77,190,190)" rx="2" ry="2" />
<text  x="903.27" y="735.5" ></text>
</g>
<g >
<title>void dd::cache::Dictionary_client::remove_uncommitted_objects&lt;dd::Event&gt;(bool) (1 samples, 0.45%)</title><rect x="905.5" y="709" width="5.3" height="15.0" fill="rgb(107,217,217)" rx="2" ry="2" />
<text  x="908.54" y="719.5" ></text>
</g>
<g >
<title>exit_to_user_mode_loop (1 samples, 0.45%)</title><rect x="952.9" y="549" width="5.3" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="955.95" y="559.5" ></text>
</g>
<g >
<title>do_poll.constprop.0 (2 samples, 0.89%)</title><rect x="289.2" y="581" width="10.5" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="292.20" y="591.5" ></text>
</g>
<g >
<title>tcp_ack_update_rtt (1 samples, 0.45%)</title><rect x="478.8" y="53" width="5.3" height="15.0" fill="rgb(68,182,182)" rx="2" ry="2" />
<text  x="481.84" y="63.5" ></text>
</g>
<g >
<title>trx_release_impl_and_expl_locks(trx_t*, bool) (2 samples, 0.89%)</title><rect x="963.5" y="565" width="10.5" height="15.0" fill="rgb(88,199,199)" rx="2" ry="2" />
<text  x="966.48" y="575.5" ></text>
</g>
<g >
<title>Replicated_columns_view::Replicated_columns_view(TABLE const*, Replicated_columns_view::enum_replication_flow, THD const*) (1 samples, 0.45%)</title><rect x="731.7" y="629" width="5.3" height="15.0" fill="rgb(104,214,214)" rx="2" ry="2" />
<text  x="734.70" y="639.5" ></text>
</g>
<g >
<title>Item_field::check_column_privileges(unsigned char*) (1 samples, 0.45%)</title><rect x="626.3" y="645" width="5.3" height="15.0" fill="rgb(64,178,178)" rx="2" ry="2" />
<text  x="629.34" y="655.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::write_transaction(THD*, binlog_cache_data*, Binlog_event_writer*) (2 samples, 0.89%)</title><rect x="1005.6" y="629" width="10.6" height="15.0" fill="rgb(82,194,194)" rx="2" ry="2" />
<text  x="1008.63" y="639.5" ></text>
</g>
<g >
<title>vp_notify (1 samples, 0.45%)</title><rect x="94.3" y="293" width="5.3" height="15.0" fill="rgb(53,168,168)" rx="2" ry="2" />
<text  x="97.29" y="303.5" ></text>
</g>
<g >
<title>kmem_cache_free (1 samples, 0.45%)</title><rect x="178.6" y="533" width="5.2" height="15.0" fill="rgb(62,176,176)" rx="2" ry="2" />
<text  x="181.57" y="543.5" ></text>
</g>
<g >
<title>do_sys_poll (3 samples, 1.34%)</title><rect x="289.2" y="613" width="15.8" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="292.20" y="623.5" ></text>
</g>
<g >
<title>ext4_writepages (2 samples, 0.89%)</title><rect x="147.0" y="629" width="10.5" height="15.0" fill="rgb(84,196,196)" rx="2" ry="2" />
<text  x="149.96" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;unsigned long long, std::pair&lt;unsigned long long const, binlog_cache_data::cache_state&gt;, std::_Select1st&lt;std::pair&lt;unsigned long long const, binlog_cache_data::cache_state&gt; &gt;, std::less&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, binlog_cache_data::cache_state&gt; &gt; &gt;::_M_get_insert_unique_pos(unsigned long long const&amp;) (1 samples, 0.45%)</title><rect x="1053.0" y="693" width="5.3" height="15.0" fill="rgb(81,193,193)" rx="2" ry="2" />
<text  x="1056.04" y="703.5" ></text>
</g>
<g >
<title>mtr_t::Command::add_dirty_blocks_to_flush_list(unsigned long, unsigned long) (2 samples, 0.89%)</title><rect x="831.8" y="565" width="10.5" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="834.79" y="575.5" ></text>
</g>
<g >
<title>Field_varstring::real_type() const (1 samples, 0.45%)</title><rect x="715.9" y="597" width="5.3" height="15.0" fill="rgb(60,174,174)" rx="2" ry="2" />
<text  x="718.89" y="607.5" ></text>
</g>
<g >
<title>file_has_perm (1 samples, 0.45%)</title><rect x="531.5" y="437" width="5.3" height="15.0" fill="rgb(91,203,203)" rx="2" ry="2" />
<text  x="534.52" y="447.5" ></text>
</g>
<g >
<title>mtr_t::commit() (1 samples, 0.45%)</title><rect x="1032.0" y="661" width="5.2" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="1034.96" y="671.5" ></text>
</g>
<g >
<title>__dev_queue_xmit (3 samples, 1.34%)</title><rect x="368.2" y="293" width="15.8" height="15.0" fill="rgb(54,169,169)" rx="2" ry="2" />
<text  x="371.21" y="303.5" ></text>
</g>
<g >
<title>mtr_t::commit() (1 samples, 0.45%)</title><rect x="1037.2" y="645" width="5.3" height="15.0" fill="rgb(82,195,195)" rx="2" ry="2" />
<text  x="1040.23" y="655.5" ></text>
</g>
<g >
<title>locksys::Shard_naked_latch_guard::Shard_naked_latch_guard(ut::Location, dict_table_t const&amp;) (1 samples, 0.45%)</title><rect x="968.8" y="549" width="5.2" height="15.0" fill="rgb(79,191,191)" rx="2" ry="2" />
<text  x="971.75" y="559.5" ></text>
</g>
<g >
<title>operator delete(void*) (1 samples, 0.45%)</title><rect x="578.9" y="725" width="5.3" height="15.0" fill="rgb(51,166,166)" rx="2" ry="2" />
<text  x="581.93" y="735.5" ></text>
</g>
<g >
<title>kmem_cache_free (1 samples, 0.45%)</title><rect x="468.3" y="53" width="5.3" height="15.0" fill="rgb(88,200,200)" rx="2" ry="2" />
<text  x="471.30" y="63.5" ></text>
</g>
<g >
<title>LEX::reset() (1 samples, 0.45%)</title><rect x="563.1" y="741" width="5.3" height="15.0" fill="rgb(92,203,203)" rx="2" ry="2" />
<text  x="566.12" y="751.5" ></text>
</g>
<g >
<title>tcp_write_xmit (30 samples, 13.39%)</title><rect x="362.9" y="357" width="158.1" height="15.0" fill="rgb(98,209,209)" rx="2" ry="2" />
<text  x="365.95" y="367.5" >tcp_write_xmit</text>
</g>
<g >
<title>MYSQL_BIN_LOG::ordered_commit(THD*, bool, bool) (21 samples, 9.38%)</title><rect x="910.8" y="693" width="110.6" height="15.0" fill="rgb(102,213,213)" rx="2" ry="2" />
<text  x="913.80" y="703.5" >MYSQL_BIN_LOG..</text>
</g>
<g >
<title>BIO_write (36 samples, 16.07%)</title><rect x="357.7" y="581" width="189.6" height="15.0" fill="rgb(79,192,192)" rx="2" ry="2" />
<text  x="360.68" y="591.5" >BIO_write</text>
</g>
<g >
<title>blk_flush_plug (2 samples, 0.89%)</title><rect x="46.9" y="677" width="10.5" height="15.0" fill="rgb(99,209,209)" rx="2" ry="2" />
<text  x="49.88" y="687.5" ></text>
</g>
<g >
<title>my_strtod(char const*, char const**, int*) (2 samples, 0.89%)</title><rect x="689.6" y="629" width="10.5" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="692.55" y="639.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (4 samples, 1.79%)</title><rect x="173.3" y="629" width="21.1" height="15.0" fill="rgb(59,174,174)" rx="2" ry="2" />
<text  x="176.30" y="639.5" ></text>
</g>
<g >
<title>rec_get_offsets_func(unsigned char const*, dict_index_t const*, unsigned long*, unsigned long, mem_block_info_t**) (1 samples, 0.45%)</title><rect x="842.3" y="597" width="5.3" height="15.0" fill="rgb(100,211,211)" rx="2" ry="2" />
<text  x="845.32" y="607.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.89%)</title><rect x="46.9" y="821" width="10.5" height="15.0" fill="rgb(83,195,195)" rx="2" ry="2" />
<text  x="49.88" y="831.5" ></text>
</g>
<g >
<title>MYSQL_BIN_LOG::process_flush_stage_queue(unsigned long long*, bool*, THD**) (3 samples, 1.34%)</title><rect x="1000.4" y="677" width="15.8" height="15.0" fill="rgb(69,183,183)" rx="2" ry="2" />
<text  x="1003.36" y="687.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.45%)</title><rect x="25.8" y="805" width="5.3" height="15.0" fill="rgb(82,194,194)" rx="2" ry="2" />
<text  x="28.80" y="815.5" ></text>
</g>
<g >
<title>innobase_commit(handlerton*, THD*, bool) (8 samples, 3.57%)</title><rect x="952.9" y="645" width="42.2" height="15.0" fill="rgb(94,205,205)" rx="2" ry="2" />
<text  x="955.95" y="655.5" >inn..</text>
</g>
<g >
<title>Item_ident::itemize(Parse_context*, Item**) (1 samples, 0.45%)</title><rect x="1084.6" y="645" width="5.3" height="15.0" fill="rgb(59,173,173)" rx="2" ry="2" />
<text  x="1087.64" y="655.5" ></text>
</g>
</g>
</svg>
